(window.webpackJsonp=window.webpackJsonp||[]).push([[312],{1007:function(s,a,n){"use strict";n.r(a);var t=n(5),e=Object(t.a)({},(function(){var s=this,a=s.$createElement,n=s._self._c||a;return n("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[n("h1",{attrs:{id:"方法引用与构造器引用"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#方法引用与构造器引用"}},[s._v("#")]),s._v(" 方法引用与构造器引用")]),s._v(" "),n("h2",{attrs:{id:"方法引用"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#方法引用"}},[s._v("#")]),s._v(" 方法引用")]),s._v(" "),n("h3",{attrs:{id:"概念"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#概念"}},[s._v("#")]),s._v(" 概念")]),s._v(" "),n("p",[s._v("若Lambda体中的内容有方法已经实现了，我们可以使用“方法引用”，可以理解为方法引用是Lambda表达式的另外一种表现形式")]),s._v(" "),n("h3",{attrs:{id:"格式"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#格式"}},[s._v("#")]),s._v(" 格式")]),s._v(" "),n("ul",[n("li",[s._v("对象::实例方法名")]),s._v(" "),n("li",[s._v("类::静态方法名")]),s._v(" "),n("li",[s._v("类::实例方法名")])]),s._v(" "),n("h3",{attrs:{id:"注意"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#注意"}},[s._v("#")]),s._v(" 注意")]),s._v(" "),n("ul",[n("li",[s._v("Lambda体中，调用方法的参数列表与返回值类型，要与函数式接口中抽象方法的函数列表和返回值类型保持一致。")]),s._v(" "),n("li",[s._v("若Lambda参数列表中，第一个参数是实例方法的调用者，第二个参数是实例方法的参数时，可以使用ClassName::method")])]),s._v(" "),n("h3",{attrs:{id:"对象-实例方法名"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#对象-实例方法名"}},[s._v("#")]),s._v(" 对象::实例方法名")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('     /**\n     * 格式： 对象::实例方法名\n     */\n    public static void test() {\n        Consumer<String> consumer = (x) -> System.out.println(x);\n\n        // 使用方法引用完成（也就是上述的方法体中，已经有Lambda实现了，那就可以用方法引用的方式实现）\n        // 同时使用方法引用的时候，需要保证：参数列表和返回值类型相同\n        PrintStream ps = System.out;\n        Consumer<String> consumer2 = ps::println;\n    }\n\n    /**\n     * 格式： 对象::实例方法名\n     */\n    public static void test2() {\n        Employee employee = new Employee("张三", 12, 5555);\n        Supplier<String> supplier = () -> employee.getName();\n        System.out.println(supplier.get());\n\n        // 使用方法引用\n        Supplier<String> supplier1 = employee::getName;\n        System.out.println(supplier1.get());\n    }\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br"),n("span",{staticClass:"line-number"},[s._v("23")]),n("br"),n("span",{staticClass:"line-number"},[s._v("24")]),n("br")])]),n("h3",{attrs:{id:"类-静态方法名"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#类-静态方法名"}},[s._v("#")]),s._v(" 类::静态方法名")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("/**\n * 类::静态方法名\n */\npublic static void test3() {\n    Comparator<Integer> comparator = (x, y) -> Integer.compare(x, y);\n\n    // 使用方法引用\n    Comparator<Integer> comparator2 = Integer::compare;\n}\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br")])]),n("h3",{attrs:{id:"类-实例方法名"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#类-实例方法名"}},[s._v("#")]),s._v(" 类::实例方法名")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('    /**\n     * 类::实例方法名\n     */\n    public static void test4() {\n        // 比较\n        BiPredicate<String, String> bp = (x, y) -> x.equals(y);\n        System.out.println(bp.test("abc", "abc"));\n\n        // 使用方法引用\n        BiPredicate<String, String> bp2 = String::equals;\n        System.out.println(bp2.test("abc", "abc"));\n\n    }\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br")])]),n("h2",{attrs:{id:"构造器引用"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#构造器引用"}},[s._v("#")]),s._v(" 构造器引用")]),s._v(" "),n("h3",{attrs:{id:"格式-2"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#格式-2"}},[s._v("#")]),s._v(" 格式")]),s._v(" "),n("ul",[n("li",[s._v("ClassName::new")])]),s._v(" "),n("h3",{attrs:{id:"注意-2"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#注意-2"}},[s._v("#")]),s._v(" 注意")]),s._v(" "),n("p",[s._v("需要调用的构造器的参数列表要与函数式接口中抽象方法的参数列表保持一致")]),s._v(" "),n("h3",{attrs:{id:"代码"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#代码"}},[s._v("#")]),s._v(" 代码")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('    /**\n     * 构造器引用\n     */\n    public static void test() {\n        Supplier<Employee> supplier = () -> new Employee("张三", 18, 13);\n\n        // 构造器引用（调用的无参构造器）\n        Supplier<Employee> supplier1 = Employee::new;\n        Employee employee = supplier1.get();\n\n        // 构造器引用（调用有参构造器，一个参数的）\n        Function<Integer, Employee> function = Employee::new;\n        Employee employee1 = function.apply(10);\n        System.out.println(employee1.getAge());\n    }\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br")])]),n("h2",{attrs:{id:"数组引用"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#数组引用"}},[s._v("#")]),s._v(" 数组引用")]),s._v(" "),n("h3",{attrs:{id:"格式-3"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#格式-3"}},[s._v("#")]),s._v(" 格式")]),s._v(" "),n("ul",[n("li",[s._v("Type::new")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("    public static void test() {\n        Function<Integer, String[]> function = (x) -> new String[x];\n        function.apply(20);\n\n        // 数组引用\n        Function<Integer, String[]> function1 = String[]::new;\n        String[] strArray = function1.apply(20);\n        System.out.println(strArray.length);\n    }\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br")])])])}),[],!1,null,null,null);a.default=e.exports}}]);