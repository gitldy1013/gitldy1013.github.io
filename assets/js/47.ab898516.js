(window.webpackJsonp=window.webpackJsonp||[]).push([[47],{744:function(a,t,s){"use strict";s.r(t);var n=s(5),e=Object(n.a)({},(function(){var a=this,t=a.$createElement,s=a._self._c||t;return s("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[s("h1",{attrs:{id:"go语言发展简史"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#go语言发展简史"}},[a._v("#")]),a._v(" Go语言发展简史")]),a._v(" "),s("h2",{attrs:{id:"开发文档"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#开发文档"}},[a._v("#")]),a._v(" 开发文档")]),a._v(" "),s("p",[a._v("https://studygolang.com/pkgdoc")]),a._v(" "),s("h2",{attrs:{id:"go语言核心开发团队"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#go语言核心开发团队"}},[a._v("#")]),a._v(" Go语言核心开发团队")]),a._v(" "),s("p",[a._v("Ken Thompson（肯·汤普森）：1983年图灵奖（Turing Award）和1998年美国国家技术奖（National Medal of Technology）得主。他与Dennis Ritchie是Unix的原创者。Thompson也发明了后来衍生出C语言的B程序语言，同时也是C语言的主要发明人。")]),a._v(" "),s("p",[a._v("Rob Pike（罗布-派克）：曾是贝尔实验室（Bell Labs）的Unix团队，和Plan 9操作系统计划的成员。\n他与Thompson共事多年，并共创出广泛使用的UTF-8字元编码。")]),a._v(" "),s("p",[a._v("Robert Griesemer：曾协助制作Java的HotSpot编译器，和Chrome浏览器的JavaScript引擎V8。")]),a._v(" "),s("p",[s("img",{attrs:{src:"/images/image-20200718103112309.png",alt:"image-20200718103112309"}})]),a._v(" "),s("h2",{attrs:{id:"google为什么要创建go"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#google为什么要创建go"}},[a._v("#")]),a._v(" Google为什么要创建Go")]),a._v(" "),s("ul",[s("li",[a._v("计算机硬件技术更新频繁，性能提高很快。目前主流的编程语言发展明显落后于硬件，不能合理利用多核多CPU的优势提升软件系统性能。")]),a._v(" "),s("li",[a._v("软件系统复杂度越来越高，维护成本越来越高，目前缺乏一个足够简洁高效的编程语言。\n"),s("ul",[s("li",[a._v("现有编程语言存在：风格不统一、计算能力不够、处理大并发不够好")])])]),a._v(" "),s("li",[a._v("企业运行维护很多c/c++的项目，c/c++程序运行速度虽然很快，但是编译速度确很慢，同时还存在内存泄漏的一系列的困扰需要解决。")])]),a._v(" "),s("h2",{attrs:{id:"go语言发展历史"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#go语言发展历史"}},[a._v("#")]),a._v(" Go语言发展历史")]),a._v(" "),s("ul",[s("li",[a._v("2007年，谷歌工程师Rob Pike，Ken Thompson和Robert Griesemer开始设计一门全新的语言，这是Go语言的最初原型。")]),a._v(" "),s("li",[a._v("2009年11月10日，Google将Go语言以开放源代码的方式向全球发布。")]),a._v(" "),s("li",[a._v("2015年8月19日，Go1.5版发布，本次更新中移除了”最后残余的c代码”")]),a._v(" "),s("li",[a._v("2017年2月17日，Go语言Go1.8版发布。")]),a._v(" "),s("li",[a._v("2017年8月24日，Go语言Go1.9版发布。")]),a._v(" "),s("li",[a._v("2018年2月16日，Go语言Go1.10版发布。")])]),a._v(" "),s("h2",{attrs:{id:"go语言的特点"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#go语言的特点"}},[a._v("#")]),a._v(" Go语言的特点")]),a._v(" "),s("p",[a._v("Go语言保证了既能到达静态编译语言的安全和性能，又达到了动态语言开发维护的高效率，使用一个表达式来形容Go语言：Go=C+Python，说明Go语言既有C静态语言程序的运行速度，又能达到Python动态语言的快速开发。")]),a._v(" "),s("ul",[s("li",[a._v("从c语言中继承了很多理念，包括表达式语法，控制结构，基础数据类型，调用参数传值，指针等等，也保留了和C语言一样的编译执行方式及弱化的指针。")])]),a._v(" "),s("div",{staticClass:"language-go line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-go"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// go语言的指针使用特点")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("func")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("testPtr")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("num "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("*")]),s("span",{pre:!0,attrs:{class:"token builtin"}},[a._v("int")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n\t"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("*")]),a._v("num "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("20")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br"),s("span",{staticClass:"line-number"},[a._v("3")]),s("br"),s("span",{staticClass:"line-number"},[a._v("4")]),s("br")])]),s("ul",[s("li",[a._v("引入包的概念，用于组织程序结构，Go语言的一个文件都要归属于一个包，而不能单独存在。")]),a._v(" "),s("li",[a._v("垃圾回收机制，内存自动回收，不需开发人员管理 【稍微不注意就会出现内存泄漏】")]),a._v(" "),s("li",[a._v("天然并发【重要特点】\n"),s("ul",[s("li",[a._v("从语言层面支持并发，实现简单")]),a._v(" "),s("li",[a._v("goroutine，轻量级线程，可实现大并发处理，高效利用多核。")]),a._v(" "),s("li",[a._v("基于CPS并发模型（Communicating Sequential Processes）实现")])])]),a._v(" "),s("li",[a._v("吸收了管道通信机制，形成go语言特有的管道channel，通过管道channel，可以实现不同的goroute之间的相互通信")]),a._v(" "),s("li",[a._v("函数返回多个值（实例代码）")]),a._v(" "),s("li",[a._v("新的创新：比如切片slice，延时执行defer等")])]),a._v(" "),s("h2",{attrs:{id:"hello-go"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#hello-go"}},[a._v("#")]),a._v(" Hello Go")]),a._v(" "),s("p",[a._v("我们写一个最简单的入门代码，在控制台输出hello go！")]),a._v(" "),s("div",{staticClass:"language-go line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-go"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("package")]),a._v(" main\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// fmt包中提供格式化，输入和输出的函数")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("import")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('"fmt"')]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("func")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("main")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n\tfmt"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("Println")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('"hello go!"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br"),s("span",{staticClass:"line-number"},[a._v("3")]),s("br"),s("span",{staticClass:"line-number"},[a._v("4")]),s("br"),s("span",{staticClass:"line-number"},[a._v("5")]),s("br"),s("span",{staticClass:"line-number"},[a._v("6")]),s("br")])]),s("h2",{attrs:{id:"golang执行流程分析"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#golang执行流程分析"}},[a._v("#")]),a._v(" Golang执行流程分析")]),a._v(" "),s("p",[a._v("我们可以通过以下命令来进行操作")]),a._v(" "),s("ul",[s("li",[a._v("go build hello.go    -> hello.exe")]),a._v(" "),s("li",[a._v("go  run  hello.go")])]),a._v(" "),s("p",[s("img",{attrs:{src:"/images/image-20200718161111596.png",alt:"image-20200718161111596"}})]),a._v(" "),s("h3",{attrs:{id:"两种执行流程分析"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#两种执行流程分析"}},[a._v("#")]),a._v(" 两种执行流程分析")]),a._v(" "),s("ul",[s("li",[a._v("如果我们先编译生成了可执行文件，那么我们可以将该可执行文件拷贝到没有go开发环境的机器上，然可以运行")]),a._v(" "),s("li",[a._v("如果我们是直接go rungo源代码，那么如果要在另外一个机器上这么运行，也需要go开发环境，否则无法执行。")]),a._v(" "),s("li",[a._v("在编译时，编译器会将程序运行依赖的库文件包含在可执行文件中，所以，可执行文件变大了很多。")])]),a._v(" "),s("h3",{attrs:{id:"什么是编译"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#什么是编译"}},[a._v("#")]),a._v(" 什么是编译")]),a._v(" "),s("ul",[s("li",[a._v("有了go源文件，通过编译器将其编译成机器可以识别的二进制码文件。")]),a._v(" "),s("li",[a._v("在该源文件目录下，通过go build 对hello.go文件进行编译。可以指定生成的可执行文件名，在windows下必须是.exe后缀。")]),a._v(" "),s("li",[a._v("如果程序没有错误，没有任何提示，会在当前目录下会出现一个可执行文件（windows下是.exe Linux下是一个可执行文件），该文件是二进制码文件，也是可以执行的程序。")]),a._v(" "),s("li",[a._v("如果程序有错误，编译时，会在错误的那行报错。")])]),a._v(" "),s("h2",{attrs:{id:"go语言开发注意事项"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#go语言开发注意事项"}},[a._v("#")]),a._v(" Go语言开发注意事项")]),a._v(" "),s("ul",[s("li",[a._v("Go源文件以“go”为扩展名")]),a._v(" "),s("li",[a._v("Go应用程序的执行入口是main()方法")]),a._v(" "),s("li",[a._v("Go语言严格区分大小写。")]),a._v(" "),s("li",[a._v("Go方法由一条条语句构成，每个语句后不需要分号（Go语言会在每行后自动加分号），这也体现出Golang的简洁性。")]),a._v(" "),s("li",[a._v("Go编译器是一行行进行编译的，因此我们一行就写一条语句，不能把多条语句写在同一个，否则报错")]),a._v(" "),s("li",[a._v("Go语言定义的变量或者import的包如果没有使用到，代码不能编译通过")]),a._v(" "),s("li",[a._v("大括号都是成对出现的，缺一不可。")])]),a._v(" "),s("h2",{attrs:{id:"go语言中的转义字符"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#go语言中的转义字符"}},[a._v("#")]),a._v(" Go语言中的转义字符")]),a._v(" "),s("p",[a._v("GoLang常用的转义字符（escape char）")]),a._v(" "),s("ul",[s("li",[a._v("\\t：一个制表位，实现对齐的功能")]),a._v(" "),s("li",[a._v("\\n：换行符")]),a._v(" "),s("li",[a._v("\\：一个\\")]),a._v(" "),s("li",[a._v("\\r：一个回车")])])])}),[],!1,null,null,null);t.default=e.exports}}]);