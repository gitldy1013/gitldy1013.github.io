(window.webpackJsonp=window.webpackJsonp||[]).push([[937],{1632:function(s,e,a){"use strict";a.r(e);var n=a(5),t=Object(n.a)({},(function(){var s=this,e=s.$createElement,a=s._self._c||e;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("h1",{attrs:{id:"使用路由网关的全局过滤功能"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#使用路由网关的全局过滤功能"}},[s._v("#")]),s._v(" 使用路由网关的全局过滤功能")]),s._v(" "),a("h2",{attrs:{id:"概述"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#概述"}},[s._v("#")]),s._v(" 概述")]),s._v(" "),a("p",[s._v("全局过滤器作用于所有的路由，不需要单独配置，我们可以用它来实现很多统一化处理的业务需求，比如权限认证，IP 访问限制等等。")]),s._v(" "),a("p",[a("strong",[s._v("注意：截止博客发表时间 2019 年 01 月 10 日，Spring Cloud Gateway 正式版为 2.0.2 其文档并不完善，并且有些地方还要重新设计，这里仅提供一个基本的案例")])]),s._v(" "),a("p",[a("strong",[s._v("详见："),a("a",{attrs:{href:"https://cloud.spring.io/spring-cloud-static/spring-cloud-gateway/2.0.2.RELEASE/",target:"_blank",rel:"noopener noreferrer"}},[s._v("Spring Cloud Gateway Documentation"),a("OutboundLink")],1)])]),s._v(" "),a("h2",{attrs:{id:"声明周期"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#声明周期"}},[s._v("#")]),s._v(" 声明周期")]),s._v(" "),a("p",[a("img",{attrs:{src:"/img/006tKfTcly1fr48yqx3ouj31kw17pn81.jpg",alt:""}})]),s._v(" "),a("p",[s._v("Spring Cloud Gateway 基于 Project Reactor 和 WebFlux，采用响应式编程风格，打开它的 Filter 的接口 GlobalFilter 你会发现它只有一个方法 filter。")]),s._v(" "),a("h2",{attrs:{id:"创建全局过滤器"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#创建全局过滤器"}},[s._v("#")]),s._v(" 创建全局过滤器")]),s._v(" "),a("p",[s._v("实现 "),a("code",[s._v("GlobalFilter")]),s._v(", "),a("code",[s._v("Ordered")]),s._v(" 接口并在类上增加 "),a("code",[s._v("@Component")]),s._v(" 注解就可以使用过滤功能了，非常简单方便")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('    package com.cmcc.hello.spring.cloud.gateway.filters;\n    \n    import com.fasterxml.jackson.core.JsonProcessingException;\n    import com.fasterxml.jackson.databind.ObjectMapper;\n    import com.google.common.collect.Maps;\n    import org.springframework.cloud.gateway.filter.GatewayFilterChain;\n    import org.springframework.cloud.gateway.filter.GlobalFilter;\n    import org.springframework.core.Ordered;\n    import org.springframework.core.io.buffer.DataBuffer;\n    import org.springframework.http.HttpStatus;\n    import org.springframework.http.server.reactive.ServerHttpResponse;\n    import org.springframework.stereotype.Component;\n    import org.springframework.web.server.ServerWebExchange;\n    import reactor.core.publisher.Mono;\n    \n    import java.util.Map;\n    \n    /**\n     * 鉴权过滤器\n     */\n    @Component\n    public class AuthFilter implements GlobalFilter, Ordered {\n        @Override\n        public Mono<Void> filter(ServerWebExchange exchange, GatewayFilterChain chain) {\n            String token = exchange.getRequest().getQueryParams().getFirst("token");\n    \n            if (token == null || token.isEmpty()) {\n                ServerHttpResponse response = exchange.getResponse();\n    \n                // 封装错误信息\n                Map<String, Object> responseData = Maps.newHashMap();\n                responseData.put("code", 401);\n                responseData.put("message", "非法请求");\n                responseData.put("cause", "Token is empty");\n    \n                try {\n                    // 将信息转换为 JSON\n                    ObjectMapper objectMapper = new ObjectMapper();\n                    byte[] data = objectMapper.writeValueAsBytes(responseData);\n    \n                    // 输出错误信息到页面\n                    DataBuffer buffer = response.bufferFactory().wrap(data);\n                    response.setStatusCode(HttpStatus.UNAUTHORIZED);\n                    response.getHeaders().add("Content-Type", "application/json;charset=UTF-8");\n                    return response.writeWith(Mono.just(buffer));\n                } catch (JsonProcessingException e) {\n                    e.printStackTrace();\n                }\n            }\n    \n            return chain.filter(exchange);\n        }\n    \n        /**\n        * 设置过滤器的执行顺序\n        * @return \n        */\n        @Override\n        public int getOrder() {\n            return Ordered.LOWEST_PRECEDENCE;\n        }\n    }\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br"),a("span",{staticClass:"line-number"},[s._v("26")]),a("br"),a("span",{staticClass:"line-number"},[s._v("27")]),a("br"),a("span",{staticClass:"line-number"},[s._v("28")]),a("br"),a("span",{staticClass:"line-number"},[s._v("29")]),a("br"),a("span",{staticClass:"line-number"},[s._v("30")]),a("br"),a("span",{staticClass:"line-number"},[s._v("31")]),a("br"),a("span",{staticClass:"line-number"},[s._v("32")]),a("br"),a("span",{staticClass:"line-number"},[s._v("33")]),a("br"),a("span",{staticClass:"line-number"},[s._v("34")]),a("br"),a("span",{staticClass:"line-number"},[s._v("35")]),a("br"),a("span",{staticClass:"line-number"},[s._v("36")]),a("br"),a("span",{staticClass:"line-number"},[s._v("37")]),a("br"),a("span",{staticClass:"line-number"},[s._v("38")]),a("br"),a("span",{staticClass:"line-number"},[s._v("39")]),a("br"),a("span",{staticClass:"line-number"},[s._v("40")]),a("br"),a("span",{staticClass:"line-number"},[s._v("41")]),a("br"),a("span",{staticClass:"line-number"},[s._v("42")]),a("br"),a("span",{staticClass:"line-number"},[s._v("43")]),a("br"),a("span",{staticClass:"line-number"},[s._v("44")]),a("br"),a("span",{staticClass:"line-number"},[s._v("45")]),a("br"),a("span",{staticClass:"line-number"},[s._v("46")]),a("br"),a("span",{staticClass:"line-number"},[s._v("47")]),a("br"),a("span",{staticClass:"line-number"},[s._v("48")]),a("br"),a("span",{staticClass:"line-number"},[s._v("49")]),a("br"),a("span",{staticClass:"line-number"},[s._v("50")]),a("br"),a("span",{staticClass:"line-number"},[s._v("51")]),a("br"),a("span",{staticClass:"line-number"},[s._v("52")]),a("br"),a("span",{staticClass:"line-number"},[s._v("53")]),a("br"),a("span",{staticClass:"line-number"},[s._v("54")]),a("br"),a("span",{staticClass:"line-number"},[s._v("55")]),a("br"),a("span",{staticClass:"line-number"},[s._v("56")]),a("br"),a("span",{staticClass:"line-number"},[s._v("57")]),a("br"),a("span",{staticClass:"line-number"},[s._v("58")]),a("br"),a("span",{staticClass:"line-number"},[s._v("59")]),a("br"),a("span",{staticClass:"line-number"},[s._v("60")]),a("br"),a("span",{staticClass:"line-number"},[s._v("61")]),a("br"),a("span",{staticClass:"line-number"},[s._v("62")]),a("br")])]),a("h2",{attrs:{id:"测试过滤器"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#测试过滤器"}},[s._v("#")]),s._v(" 测试过滤器")]),s._v(" "),a("p",[s._v("浏览器访问：http://localhost:9000/nacos-consumer/echo/app/name 网页显示")]),s._v(" "),a("p",[a("img",{attrs:{src:"/img/20190110001903.png",alt:""}})]),s._v(" "),a("p",[s._v("浏览器访问：http://localhost:9000/nacos-consumer/echo/app/name?token=123456 网页显示")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("    Hello Nacos Discovery nacos-consumer i am from port 8082\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("h2",{attrs:{id:"附-spring-cloud-gateway-benchmark"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#附-spring-cloud-gateway-benchmark"}},[s._v("#")]),s._v(" 附：Spring Cloud Gateway Benchmark")]),s._v(" "),a("p",[s._v("Spring 官方人员提供的网关基准测试报告 "),a("a",{attrs:{href:"https://github.com/spencergibb/spring-cloud-gateway-bench",target:"_blank",rel:"noopener noreferrer"}},[s._v("GitHub"),a("OutboundLink")],1)]),s._v(" "),a("table",[a("thead",[a("tr",[a("th",[s._v("Proxy")]),s._v(" "),a("th",[s._v("Avg Latency")]),s._v(" "),a("th",[s._v("Avg Req/Sec/Thread")])])]),s._v(" "),a("tbody",[a("tr",[a("td",[s._v("gateway")]),s._v(" "),a("td",[s._v("6.61ms")]),s._v(" "),a("td",[s._v("3.24k")])]),s._v(" "),a("tr",[a("td",[s._v("linkered")]),s._v(" "),a("td",[s._v("7.62ms")]),s._v(" "),a("td",[s._v("2.82k")])]),s._v(" "),a("tr",[a("td",[s._v("zuul")]),s._v(" "),a("td",[s._v("12.56ms")]),s._v(" "),a("td",[s._v("2.09k")])]),s._v(" "),a("tr",[a("td",[s._v("none")]),s._v(" "),a("td",[s._v("2.09ms")]),s._v(" "),a("td",[s._v("11.77k")])])])]),s._v(" "),a("h3",{attrs:{id:"说明"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#说明"}},[s._v("#")]),s._v(" 说明")]),s._v(" "),a("ul",[a("li",[s._v("这里的 Zuul 为 1.x 版本，是一个基于阻塞 IO 的 API Gateway")]),s._v(" "),a("li",[s._v("Zuul 已经发布了 Zuul 2.x，基于 Netty，非阻塞的，支持长连接，但 Spring Cloud 暂时还没有整合计划")]),s._v(" "),a("li",[s._v("Linkerd 基于 Scala 实现的、目前市面上仅有的生产级别的 Service Mesh（其他诸如 "),a("strong",[s._v("Istio、Conduit 暂时还不能用于生产")]),s._v("）。")])])])}),[],!1,null,null,null);e.default=t.exports}}]);