(window.webpackJsonp=window.webpackJsonp||[]).push([[313],{1012:function(s,a,e){"use strict";e.r(a);var t=e(5),n=Object(t.a)({},(function(){var s=this,a=s.$createElement,e=s._self._c||a;return e("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[e("h1",{attrs:{id:"stream-api"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#stream-api"}},[s._v("#")]),s._v(" Stream API")]),s._v(" "),e("h2",{attrs:{id:"了解stream"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#了解stream"}},[s._v("#")]),s._v(" 了解Stream")]),s._v(" "),e("p",[s._v("Java8中有两个比较大的改变")]),s._v(" "),e("ul",[e("li",[s._v("Lambda表达式")]),s._v(" "),e("li",[s._v("Stream API （java.util.stream.*）")])]),s._v(" "),e("p",[s._v("Stream是Java8中处理集合的关键抽象概念，它可以指定你希望对集合进行的操作，可以执行非常复杂的查找，过滤和映射数据等操作。使用Stream API对集合数据进行操作，就类似于使用SQL执行的数据库查询，也可以使用Stream API来并行操作，简而言之，Stream API提供了一种高效且易于使用的处理数据的方式。")]),s._v(" "),e("h2",{attrs:{id:"区别"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#区别"}},[s._v("#")]),s._v(" 区别")]),s._v(" "),e("p",[s._v("这里的Stream流和IO流是有区别的，这里是我们在数据源流向 目标源的时候，会产生一系列流水线式的中间操作，最后产生一个新流，同时原来的数据源是不会改变的。")]),s._v(" "),e("p",[s._v("这里的中间操作可能是：切片，排序，筛选等")]),s._v(" "),e("p",[e("img",{attrs:{src:"/images/image-20200406105528445.png",alt:"image-20200406105528445"}})]),s._v(" "),e("h2",{attrs:{id:"什么是stream"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#什么是stream"}},[s._v("#")]),s._v(" 什么是Stream")]),s._v(" "),e("p",[s._v("Stream是数据渠道，用于操作数据源（集合，数组等）所生成的元素序列，“集合讲的是数据，流讲的是计算”！")]),s._v(" "),e("p",[s._v("注意：")]),s._v(" "),e("ul",[e("li",[s._v("Stream 自己不会存储元素")]),s._v(" "),e("li",[s._v("Stream 不会改变源对象，相反，他们会返回一个持有结果的新Stream")]),s._v(" "),e("li",[s._v("Stream 操作是延迟的，这就意味着他们会等到需要结果的时候才执行的")])]),s._v(" "),e("h2",{attrs:{id:"stream操作的三部曲"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#stream操作的三部曲"}},[s._v("#")]),s._v(" Stream操作的三部曲")]),s._v(" "),e("h3",{attrs:{id:"创建流"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#创建流"}},[s._v("#")]),s._v(" 创建流")]),s._v(" "),e("p",[s._v("一个数据源（如：集合，数组），获取一个流")]),s._v(" "),e("ul",[e("li",[s._v("通过Collection系列集合的 stream() 或者 parallelStream() 获取流")])]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("List<String> list = new ArrayList<>();\nStream<String> stream =  list.stream();\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br")])]),e("ul",[e("li",[s._v("通过Arrays 中的静态方法，获取数组流")])]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("Employee[] employees = new Employee[10];\nStream<Employee> stream1 = Arrays.stream(employees);\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br")])]),e("ul",[e("li",[s._v("通过Stream中的静态方法of()，获取流")])]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v('Stream<String> stream3 = Stream.of("aa", "bb", "cc");\n')])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br")])]),e("ul",[e("li",[s._v("创建无限流")])]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("Stream<Integer> stream4 = Stream.iterate(0, (x) -> x +2 );\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br")])]),e("h3",{attrs:{id:"中间操作"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#中间操作"}},[s._v("#")]),s._v(" 中间操作")]),s._v(" "),e("p",[s._v("一个中间操作链，对数据源的数据进行处理")]),s._v(" "),e("h3",{attrs:{id:"终止操作"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#终止操作"}},[s._v("#")]),s._v(" 终止操作")]),s._v(" "),e("p",[s._v("一个终止操作，执行中间操作链，并产生结果")]),s._v(" "),e("p",[e("img",{attrs:{src:"/images/image-20200406110230148.png",alt:"image-20200406110230148"}})]),s._v(" "),e("h2",{attrs:{id:"stream流的操作"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#stream流的操作"}},[s._v("#")]),s._v(" Stream流的操作")]),s._v(" "),e("p",[s._v("多中间操作可以连接起来形成一个流水线，除非流水线上触发终止操作，否者中间操作不会执行任何的处理，而在终止操作时一次性全部处理，这样被称为 惰性求值")]),s._v(" "),e("h3",{attrs:{id:"筛选与切片"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#筛选与切片"}},[s._v("#")]),s._v(" 筛选与切片")]),s._v(" "),e("ul",[e("li",[s._v("filter( Predicate p)：接收Lambda，从流中排除某些元素")]),s._v(" "),e("li",[s._v("distinct()：筛选，通过流所生成的hashCode()和equals()去除重复元素")]),s._v(" "),e("li",[s._v("limit(long maxSize)：截断流，使其元素不超过给定数量")]),s._v(" "),e("li",[s._v("skip(long n)：跳过元素，返回一个扔掉了前n个元素的流，若流中元素不足n个，则返回一个空流")])]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v('        List<Employee> employees = Arrays.asList(\n                new Employee("张三", 18, 3333),\n                new Employee("李四", 38, 55555),\n                new Employee("王五", 50, 6666.66),\n                new Employee("赵六", 16, 77777.77),\n                new Employee("田七", 8, 8888.88)\n        );\n        Stream<Employee> stream = employees.stream();\n        stream.filter((x) -> x.getAge() > 30)\n                .limit(2)\n                .forEach(System.out::println);\n')])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br")])]),e("h3",{attrs:{id:"映射"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#映射"}},[s._v("#")]),s._v(" 映射")]),s._v(" "),e("p",[s._v("map接收Lambda，将元素转换成其它形式或提取信息，接收一个函数作为参数，该函数会被应用到每个元素上，并将其映射成一个新元素。flatMap 接收一个函数作为参数，将流中的每个值都转换成另一个流，然后把所有流连接成一个流。")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v('    public static void test2() {\n        List<String> list = Arrays.asList("aaa", "bbb", "ccc", "ddd");\n        list.stream().map((x) -> x.toUpperCase()).forEach(System.out::println);\n    }\n')])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br")])]),e("h3",{attrs:{id:"排序"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#排序"}},[s._v("#")]),s._v(" 排序")]),s._v(" "),e("ul",[e("li",[s._v("sorted()：自然排序")]),s._v(" "),e("li",[s._v("sorted(Comparator com)：定制排序")])]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v('    public static void test3() {\n        List<String> list = Arrays.asList("aaa", "bbb", "ccc", "ddd");\n        // 自然排序，按照字典进行排序\n        list.stream().sorted().forEach(System.out::println);\n\n        // 定制排序\n        List<Employee> employees = Arrays.asList(\n                new Employee("张三", 18, 3333),\n                new Employee("李四", 38, 55555),\n                new Employee("王五", 50, 6666.66),\n                new Employee("赵六", 16, 77777.77),\n                new Employee("田七", 8, 8888.88)\n        );\n        employees.stream().sorted((e1, e2) -> {\n            if(e1.getAge() == e2.getAge()) {\n                return e1.getName().compareTo(e2.getName());\n            } else {\n                return Integer.compare(e1.getAge(), e2.getAge());\n            }\n        }).forEach(System.out::println);\n    }\n')])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br"),e("span",{staticClass:"line-number"},[s._v("16")]),e("br"),e("span",{staticClass:"line-number"},[s._v("17")]),e("br"),e("span",{staticClass:"line-number"},[s._v("18")]),e("br"),e("span",{staticClass:"line-number"},[s._v("19")]),e("br"),e("span",{staticClass:"line-number"},[s._v("20")]),e("br"),e("span",{staticClass:"line-number"},[s._v("21")]),e("br")])]),e("p",[s._v("输出结果：")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("aaa\nbbb\nccc\nddd\nEmployee{name='田七', age=8, salary=8888.88}\nEmployee{name='赵六', age=16, salary=77777.77}\nEmployee{name='张三', age=18, salary=3333.0}\nEmployee{name='李四', age=38, salary=55555.0}\nEmployee{name='王五', age=50, salary=6666.66}\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br")])]),e("h3",{attrs:{id:"终止操作-2"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#终止操作-2"}},[s._v("#")]),s._v(" 终止操作")]),s._v(" "),e("p",[s._v("执行下列操作后，Stream流就会进行终止执行")]),s._v(" "),e("p",[s._v("查找与匹配")]),s._v(" "),e("ul",[e("li",[s._v("allMatch：检查是否匹配所有元素")]),s._v(" "),e("li",[s._v("anyMatch：检查是否至少匹配一个元素")]),s._v(" "),e("li",[s._v("noneMatch：检查是否一个都没匹配")]),s._v(" "),e("li",[s._v("findFirst：返回第一个元素")]),s._v(" "),e("li",[s._v("findAny：返回当前流中任意一个元素")]),s._v(" "),e("li",[s._v("count：返回流中元素的个数")]),s._v(" "),e("li",[s._v("max：返回当前流中最大值")]),s._v(" "),e("li",[s._v("min：返回当前流中最小值")]),s._v(" "),e("li",[s._v("forEach：内部迭代")])]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v('    public static void test4() {\n        // 定制排序\n        List<Employee> employees = Arrays.asList(\n                new Employee("张三", 18, 3333),\n                new Employee("李四", 38, 55555),\n                new Employee("王五", 50, 6666.66),\n                new Employee("赵六", 16, 77777.77),\n                new Employee("田七", 8, 8888.88)\n        );\n        Boolean isAllMatch = employees.stream().allMatch((x) -> x.getAge() > 10);\n        System.out.println("是否匹配所有元素:" + isAllMatch);\n\n        Boolean isAnyMatch = employees.stream().anyMatch((x) -> x.getAge() > 10);\n        System.out.println("是否匹配至少一个元素:" + isAnyMatch);\n    }\n')])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br")])]),e("h3",{attrs:{id:"规约"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#规约"}},[s._v("#")]),s._v(" 规约")]),s._v(" "),e("p",[s._v("格式：reduce(T identity, BinaryOperator) / reduce(BinaryOperator)")]),s._v(" "),e("p",[s._v("可以将流中元素反复结合，得到一个新值")]),s._v(" "),e("p",[s._v("这个reduce，其实有点类似于Hadoop中的mapReduce，先做map操作，然后做reduce操作")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("List<Integer> list = Arrays.asList(1, 2, 3, 4, 5 ,6 ,7 ,8 , 9, 10);\n// 按照下面的规则进行累加操作\n// reduce的规约，就是把前面定义的起始值，作为了x\nInteger num = list.stream().reduce(0, (x, y) -> x + y);\nSystem.out.println(num);\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br")])]),e("h3",{attrs:{id:"收集"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#收集"}},[s._v("#")]),s._v(" 收集")]),s._v(" "),e("p",[s._v("Collection将流转换成其它形式，接收一个Collector接口实现，用于给Stream中元素做汇总的方法")]),s._v(" "),e("p",[s._v("格式：collect(Collector c)")]),s._v(" "),e("p",[s._v("Collector接口实现方法的实现决定了如何对流执行收集操作（如收集到List，Set，Map）。但是Collectors实用类提供了很多静态方法，可以方便地创建常用收集器实例")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v('    /**\n     * 收集器\n     */\n    public static void test6() {\n        List<Employee> employees = Arrays.asList(\n                new Employee("张三", 18, 3333),\n                new Employee("李四", 38, 55555),\n                new Employee("王五", 50, 6666.66),\n                new Employee("赵六", 16, 77777.77),\n                new Employee("田七", 8, 8888.88)\n        );\n        // 收集放入list中\n        List<String> list = employees.stream().map(Employee::getName).collect(Collectors.toList());\n        list.forEach(System.out::println);\n    }\n')])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br")])])])}),[],!1,null,null,null);a.default=n.exports}}]);