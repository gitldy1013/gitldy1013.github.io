(window.webpackJsonp=window.webpackJsonp||[]).push([[615],{1312:function(e,n,a){"use strict";a.r(n);var r=a(5),t=Object(r.a)({},(function(){var e=this,n=e.$createElement,a=e._self._c||n;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("h1",{attrs:{id:"在线程池中寻找堆栈"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#在线程池中寻找堆栈"}},[e._v("#")]),e._v(" 在线程池中寻找堆栈")]),e._v(" "),a("p",[e._v("下面看一个简单的例子:")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[e._v("public class DivTask implements Runnable {\n\n    int a, b;\n\n    public DivTask(int a, int b) {\n        this.a = a;\n        this.b = b;\n    }\n\n    @Override\n    public void run() {\n        double re = a / b;\n        System.out.println(re);\n    }\n}\n")])])]),a("p",[e._v("运行该任务:")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[e._v("    public static void main(String[] args) {\n        ThreadPoolExecutor pools = new ThreadPoolExecutor(0, Integer.MAX_VALUE,\n                0L, TimeUnit.SECONDS,\n                new SynchronousQueue<Runnable>());\n\n        for (int i = 0; i < 5; i++) {\n            pools.submit(new DivTask(100, i));\n        }\n    }\n")])])]),a("p",[e._v("可以得到:")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[e._v("100.0\n25.0\n33.0\n50.0\n")])])]),a("p",[e._v("只有4个输出,也就是说程序漏算了一组数据,并且程序没有任何日志,没有任何错误提示.")]),e._v(" "),a("p",[e._v("解决上述问题最简单的一种方法就输出放弃submit(),改用execute()")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[e._v("pools.execute(new DivTask(100, i));\n")])])]),a("p",[e._v("或者使用")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[e._v("Future  submit = pools.submit(new DivTask(100, i));\nsubmit.get();\n")])])]),a("p",[e._v("上面两种方法都可以得到部分堆栈信息,如下所示:")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[e._v('Exception in thread "pool-1-thread-1" java.lang.ArithmeticException: / by zero\n    at threadDemo.DivTask.run(DivTask.java:19)\n    at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)\n    at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)\n    at java.lang.Thread.run(Thread.java:748)\n100.0\n25.0\n33.0\n50.0\n')])])]),a("p",[e._v("这里只能知道异常是在哪里抛的,并不知道是在哪里提交的,所以我们扩展我们的ThreadPoolExecutor线程池")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[e._v('/**\n * @author luozhiyun on 2018/6/25.\n */\npublic class TraceThreadPoolExecutor extends ThreadPoolExecutor {\n    public TraceThreadPoolExecutor(int corePoolSize, int maximumPoolSize,\n                                   long keepAliveTime, TimeUnit unit, BlockingQueue<Runnable> workQueue) {\n        super(corePoolSize, maximumPoolSize, keepAliveTime, unit, workQueue);\n    }\n\n    @Override\n    public void execute(Runnable command) {\n        super.execute(wrap(command,clientTrace(),Thread.currentThread().getName()));\n    }\n\n    @Override\n    public Future<?> submit(Runnable task) {\n        return super.submit(wrap(task, clientTrace(), Thread.currentThread().getName()));\n    }\n\n    private Exception clientTrace() {\n        return new Exception("Client stack trace");\n    }\n\n    private Runnable wrap(final Runnable task, final Exception clientStack, String clientThreadName) {\n        return new Runnable() {\n            @Override\n            public void run() {\n                try {\n                    task.run();\n                } catch (Exception e) {\n                    clientStack.printStackTrace();\n                    throw e;\n                }\n            }\n        };\n    }\n\n    public static void main(String[] args) {\n        ThreadPoolExecutor pools = new TraceThreadPoolExecutor(0, Integer.MAX_VALUE,\n                0L, TimeUnit.SECONDS,\n                new SynchronousQueue<Runnable>());\n\n        for (int i = 0; i < 5; i++) {\n            pools.execute(new DivTask(100, i));\n        }\n    }\n}\n')])])]),a("p",[e._v("通过上面扩展的线程池, 就可以打印出堆栈信息了")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[e._v('100.0\n25.0\n33.0\n50.0\njava.lang.Exception: Client stack trace\n    at threadDemo.TraceThreadPoolExecutor.clientTrace(TraceThreadPoolExecutor.java:25)\n    at threadDemo.TraceThreadPoolExecutor.execute(TraceThreadPoolExecutor.java:16)\n    at threadDemo.TraceThreadPoolExecutor.main(TraceThreadPoolExecutor.java:48)\nException in thread "pool-1-thread-1" java.lang.ArithmeticException: / by zero\n    at threadDemo.DivTask.run(DivTask.java:19)\n    at threadDemo.TraceThreadPoolExecutor$1.run(TraceThreadPoolExecutor.java:33)\n    at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)\n    at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)\n    at java.lang.Thread.run(Thread.java:748)\n\nProcess finished with exit code 0\n')])])]),a("p",[e._v("现在我们不仅可以得到异常发生的Runnable实现内的信息,我们也知道了这个任务是在哪里提交的.")])])}),[],!1,null,null,null);n.default=t.exports}}]);