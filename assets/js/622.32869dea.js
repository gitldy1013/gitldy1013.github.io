(window.webpackJsonp=window.webpackJsonp||[]).push([[622],{1321:function(_,v,t){"use strict";t.r(v);var a=t(5),l=Object(a.a)({},(function(){var _=this,v=_.$createElement,t=_._self._c||v;return t("ContentSlotsDistributor",{attrs:{"slot-key":_.$parent.slotKey}},[t("h1",{attrs:{id:"_23-种设计模式的设计理念"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_23-种设计模式的设计理念"}},[_._v("#")]),_._v(" 23 种设计模式的设计理念")]),_._v(" "),t("h2",{attrs:{id:"什么是设计模式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#什么是设计模式"}},[_._v("#")]),_._v(" 什么是设计模式")]),_._v(" "),t("p",[_._v("设计模式（Design pattern）是一套被反复使用、多数人知晓的、经过分类编目的、代码设计经验的总结。使用设计模式是为了可重用代码、让代码更容易被他人理解、保证代码可靠性。 毫无疑问，设计模式于己于他人于系统都是多赢的，设计模式使代码编制真正工程化，设计模式是软件工程的基石，如同大厦的一块块砖石一样。项目中合理的运用设计模式可以完美的解决很多问题，每种模式在现在中都有相应的原理来与之对应，每一个模式描述了一个在我们周围不断重复发生的问题，以及该问题的核心解决方案，这也是它能被广泛应用的原因。简单说：")]),_._v(" "),t("ul",[t("li",[_._v("模式：在某些场景下，针对某类问题的某种通用的解决方案")]),_._v(" "),t("li",[_._v("场景：项目所在的环境")]),_._v(" "),t("li",[_._v("问题：约束条件，项目目标等")]),_._v(" "),t("li",[_._v("解决方案：通用、可复用的设计，解决约束达到目标")])]),_._v(" "),t("h2",{attrs:{id:"设计模式的三个分类"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#设计模式的三个分类"}},[_._v("#")]),_._v(" 设计模式的三个分类")]),_._v(" "),t("ul",[t("li",[_._v("创建型模式：对象实例化的模式，创建型模式用于解耦对象的实例化过程。")]),_._v(" "),t("li",[_._v("结构型模式：把类或对象结合在一起形成一个更大的结构。")]),_._v(" "),t("li",[_._v("行为型模式：类和对象如何交互，及划分责任和算法。")])]),_._v(" "),t("h2",{attrs:{id:"各分类中模式的关键点"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#各分类中模式的关键点"}},[_._v("#")]),_._v(" 各分类中模式的关键点")]),_._v(" "),t("h3",{attrs:{id:"创建型模式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#创建型模式"}},[_._v("#")]),_._v(" 创建型模式")]),_._v(" "),t("ul",[t("li",[_._v("单例模式：某个类只能有一个实例，提供一个全局的访问点。")]),_._v(" "),t("li",[_._v("简单工厂：一个工厂类根据传入的参量决定创建出那一种产品类的实例。")]),_._v(" "),t("li",[_._v("工厂方法：定义一个创建对象的接口，让子类决定实例化那个类。")]),_._v(" "),t("li",[_._v("抽象工厂：创建相关或依赖对象的家族，而无需明确指定具体类。")]),_._v(" "),t("li",[_._v("建造者模式：封装一个复杂对象的构建过程，并可以按步骤构造。")]),_._v(" "),t("li",[_._v("原型模式：通过复制现有的实例来创建新的实例。")])]),_._v(" "),t("h3",{attrs:{id:"结构型模式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#结构型模式"}},[_._v("#")]),_._v(" 结构型模式")]),_._v(" "),t("ul",[t("li",[_._v("适配器模式：将一个类的方法接口转换成客户希望的另外一个接口。")]),_._v(" "),t("li",[_._v("组合模式：将对象组合成树形结构以表示“”部分-整体“”的层次结构。")]),_._v(" "),t("li",[_._v("装饰模式：动态的给对象添加新的功能。")]),_._v(" "),t("li",[_._v("代理模式：为其他对象提供一个代理以便控制这个对象的访问。")]),_._v(" "),t("li",[_._v("亨元（蝇量）模式：通过共享技术来有效的支持大量细粒度的对象。")]),_._v(" "),t("li",[_._v("外观模式：对外提供一个统一的方法，来访问子系统中的一群接口。")]),_._v(" "),t("li",[_._v("桥接模式：将抽象部分和它的实现部分分离，使它们都可以独立的变化。")])]),_._v(" "),t("h3",{attrs:{id:"行为型模式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#行为型模式"}},[_._v("#")]),_._v(" 行为型模式")]),_._v(" "),t("ul",[t("li",[_._v("模板模式：定义一个算法结构，而将一些步骤延迟到子类实现。")]),_._v(" "),t("li",[_._v("解释器模式：给定一个语言，定义它的文法的一种表示，并定义一个解释器。")]),_._v(" "),t("li",[_._v("策略模式：定义一系列算法，把他们封装起来，并且使它们可以相互替换。")]),_._v(" "),t("li",[_._v("状态模式：允许一个对象在其对象内部状态改变时改变它的行为。")]),_._v(" "),t("li",[_._v("观察者模式：对象间的一对多的依赖关系。")]),_._v(" "),t("li",[_._v("备忘录模式：在不破坏封装的前提下，保持对象的内部状态。")]),_._v(" "),t("li",[_._v("中介者模式：用一个中介对象来封装一系列的对象交互。")]),_._v(" "),t("li",[_._v("命令模式：将命令请求封装为一个对象，使得可以用不同的请求来进行参数化。")]),_._v(" "),t("li",[_._v("访问者模式：在不改变数据结构的前提下，增加作用于一组对象元素的新功能。")]),_._v(" "),t("li",[_._v("责任链模式：将请求的发送者和接收者解耦，使的多个对象都有处理这个请求的机会。")]),_._v(" "),t("li",[_._v("迭代器模式：一种遍历访问聚合对象中各个元素的方法，不暴露该对象的内部结构。")])])])}),[],!1,null,null,null);v.default=l.exports}}]);