(window.webpackJsonp=window.webpackJsonp||[]).push([[406],{1102:function(e,s,a){"use strict";a.r(s);var t=a(5),r=Object(t.a)({},(function(){var e=this,s=e.$createElement,a=e._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("h1",{attrs:{id:"helm"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#helm"}},[e._v("#")]),e._v(" helm")]),e._v(" "),a("h2",{attrs:{id:"概述"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#概述"}},[e._v("#")]),e._v(" 概述")]),e._v(" "),a("p",[e._v("Helm 是 Kubernetes 生态系统中的一个软件包管理工具。")]),e._v(" "),a("p",[a("a",{attrs:{href:"https://github.com/helm/helm",target:"_blank",rel:"noopener noreferrer"}},[e._v("官方 GitHub"),a("OutboundLink")],1)]),e._v(" "),a("h2",{attrs:{id:"kubernetes-的应用部署"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#kubernetes-的应用部署"}},[e._v("#")]),e._v(" Kubernetes 的应用部署")]),e._v(" "),a("ul",[a("li",[a("p",[e._v("Kubernetes 是一个提供了基于容器的应用集群管理解决方案，Kubernetes 为容器化应用提供了部署运行、资源调度、服务发现和动态伸缩等一系列完整功能。")])]),e._v(" "),a("li",[a("p",[e._v("Kubernetes 的核心设计理念是：用户定义要部署的应用程序的规则，而 Kubernetes 则负责按照定义的规则部署并运行应用程序。如果应用程序出现问题导致偏离了定义的规格，Kubernetes 负责对其进行自动修正。例如：定义的应用规则要求部署两个实例（Pod），其中一个实例异常终止了，Kubernetes 会检查到并重新启动一个新的实例。")])]),e._v(" "),a("li",[a("p",[e._v("用户通过使用 Kubernetes API 对象来描述应用程序规则，包括 "),a("strong",[e._v("Pod")]),e._v("、"),a("strong",[e._v("Service")]),e._v("、"),a("strong",[e._v("Volume")]),e._v("、"),a("strong",[e._v("Namespace")]),e._v("、"),a("strong",[e._v("ReplicaSet")]),e._v("、"),a("strong",[e._v("Deployment")]),e._v("、"),a("strong",[e._v("Job")]),e._v(" 等等。一般这些资源对象的定义需要写入一系列的 YAML 文件中，然后通过 Kubernetes 命令行工具 Kubectl 调 Kubernetes API 进行部署。")])])]),e._v(" "),a("p",[e._v("以一个典型的三层应用 WordPress 为例，该应用程序就涉及到多个 Kubernetes API 对象，而要描述这些 Kubernetes API 对象就可能要同时维护多个 YAML 文件。")]),e._v(" "),a("p",[a("img",{attrs:{src:"/leg_img/f9b5071a354ac72.png",alt:""}})]),e._v(" "),a("p",[e._v("从上图可以看到，在进行 Kubernetes 软件部署时，我们面临下述几个问题（Helm 的出现就是为了很好地解决下面这些问题）：")]),e._v(" "),a("ul",[a("li",[e._v("如何管理、编辑和更新这些这些分散的 Kubernetes 应用配置文件。")]),e._v(" "),a("li",[e._v("如何把一套相关的配置文件作为一个应用进行管理。")]),e._v(" "),a("li",[e._v("如何分发和重用 Kubernetes 的应用配置。")])]),e._v(" "),a("h2",{attrs:{id:"什么是-helm"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#什么是-helm"}},[e._v("#")]),e._v(" 什么是 Helm")]),e._v(" "),a("ul",[a("li",[a("p",[e._v("Helm 是 Deis 开发的一个用于 Kubernetes 应用的包管理工具，主要用来管理 Charts。"),a("strong",[e._v("有点类似于 Ubuntu 中的 APT 或 CentOS 中的 YUM")]),e._v("。")])]),e._v(" "),a("li",[a("p",[e._v("Helm Chart 是用来封装 Kubernetes 原生应用程序的一系列 YAML 文件。可以在你部署应用的时候自定义应用程序的一些 Metadata，以便于应用程序的分发。")])]),e._v(" "),a("li",[a("p",[e._v("对于应用发布者而言，可以通过 Helm 打包应用、管理应用依赖关系、管理应用版本并发布应用到软件仓库。")])]),e._v(" "),a("li",[a("p",[e._v("对于使用者而言，使用 Helm 后不用需要编写复杂的应用部署文件，"),a("strong",[e._v("可以以简单的方式在 Kubernetes 上查找、安装、升级、回滚、卸载应用程序")]),e._v("。")])])]),e._v(" "),a("h2",{attrs:{id:"组件及相关术语"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#组件及相关术语"}},[e._v("#")]),e._v(" 组件及相关术语")]),e._v(" "),a("ul",[a("li",[a("strong",[e._v("Helm：")]),e._v(" 是一个命令行下的客户端工具。主要用于 Kubernetes 应用程序 Chart 的创建、打包、发布以及创建和管理本地和远程的 Chart 仓库")]),e._v(" "),a("li",[a("strong",[e._v("Tiller：")]),e._v(" 是 Helm 的服务端，部署在 Kubernetes 集群中。Tiller 用于接收 Helm 的请求，并根据 Chart 生成 Kubernetes 的部署文件（ Helm 称为 Release ），然后提交给 Kubernetes 创建应用。Tiller 还提供了 Release 的升级、删除、回滚等一系列功能")]),e._v(" "),a("li",[a("strong",[e._v("Chart：")]),e._v(" Helm 的软件包，采用 TAR 格式。类似于 APT 的 DEB 包或者 YUM 的 RPM 包，其包含了一组定义 Kubernetes 资源相关的 YAML 文件")]),e._v(" "),a("li",[a("strong",[e._v("Repoistory：")]),e._v(" Helm 的软件仓库，Repository 本质上是一个 Web 服务器，该服务器保存了一系列的 Chart 软件包以供用户下载，并且提供了一个该 Repository 的 Chart 包的清单文件以供查询。Helm 可以同时管理多个不同的 Repository")]),e._v(" "),a("li",[a("strong",[e._v("Release：")]),e._v(" 使用 "),a("code",[e._v("helm install")]),e._v(" 命令在 Kubernetes 集群中部署的 Chart 称为 Release")])]),e._v(" "),a("blockquote",[a("p",[a("strong",[e._v("注意：")]),e._v(" Helm 中提到的 Release 和我们通常概念中的版本有所不同，这里的 Release 可以理解为 Helm 使用 Chart 包部署的一个应用实例。")])]),e._v(" "),a("h2",{attrs:{id:"工作原理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#工作原理"}},[e._v("#")]),e._v(" 工作原理")]),e._v(" "),a("p",[e._v("下图描述了 Helm 的几个关键组件 Helm（客户端）、Tiller（服务器）、Repository（Chart 软件仓库）、Chart（软件包）之间的关系。")]),e._v(" "),a("p",[a("img",{attrs:{src:"/leg_img/ba9170e64b57e7d.png",alt:""}})]),e._v(" "),a("h3",{attrs:{id:"chart-install-安装过程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#chart-install-安装过程"}},[e._v("#")]),e._v(" Chart Install 安装过程")]),e._v(" "),a("ul",[a("li",[e._v("Helm 从指定的目录或者 TAR 文件中解析出 Chart 结构信息")]),e._v(" "),a("li",[e._v("Helm 将指定的 Chart 结构和 Values 信息通过 gRPC 传递给 Tiller")]),e._v(" "),a("li",[e._v("Tiller 根据 Chart 和 Values 生成一个 Release")]),e._v(" "),a("li",[e._v("Tiller 将 Release 发送给 Kubernetes 用于生成 Release")])]),e._v(" "),a("h3",{attrs:{id:"chart-update-更新过程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#chart-update-更新过程"}},[e._v("#")]),e._v(" Chart Update 更新过程")]),e._v(" "),a("ul",[a("li",[e._v("Helm 从指定的目录或者 TAR 文件中解析出 Chart 结构信息")]),e._v(" "),a("li",[e._v("Helm 将需要更新的 Release 的名称、Chart 结构和 Values 信息传递给 Tiller")]),e._v(" "),a("li",[e._v("Tiller 生成 Release 并更新指定名称的 Release 的 History")]),e._v(" "),a("li",[e._v("Tiller 将 Release 发送给 Kubernetes 用于更新 Release")])]),e._v(" "),a("h3",{attrs:{id:"chart-rollback-回滚过程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#chart-rollback-回滚过程"}},[e._v("#")]),e._v(" Chart Rollback 回滚过程")]),e._v(" "),a("ul",[a("li",[e._v("Helm 将要回滚的 Release 的名称传递给 Tiller")]),e._v(" "),a("li",[e._v("Tiller 根据 Release 的名称查找 History")]),e._v(" "),a("li",[e._v("Tiller 从 History 中获取上一个 Release")]),e._v(" "),a("li",[e._v("Tiller 将上一个 Release 发送给 Kubernetes 用于替换当前 Release")])]),e._v(" "),a("h3",{attrs:{id:"chart-处理依赖"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#chart-处理依赖"}},[e._v("#")]),e._v(" Chart 处理依赖")]),e._v(" "),a("p",[e._v("Tiller 在处理 Chart 时，直接将 Chart 以及其依赖的所有 Charts 合并为一个 Release，同时传递给 Kubernetes。因此 Tiller 并不负责管理依赖之间的启动顺序。Chart 中的应用需要能够自行处理依赖关系。")]),e._v(" "),a("h2",{attrs:{id:"安装-helm"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#安装-helm"}},[e._v("#")]),e._v(" 安装 Helm")]),e._v(" "),a("h3",{attrs:{id:"安装客户端-helm"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#安装客户端-helm"}},[e._v("#")]),e._v(" 安装客户端 Helm")]),e._v(" "),a("p",[e._v("Helm 的安装方式很多，这里采用二进制的方式安装。更多安装方法可以参考 Helm 的 "),a("a",{attrs:{href:"https://helm.sh/docs/using_helm/#installing-helm",target:"_blank",rel:"noopener noreferrer"}},[e._v("官方帮助文档"),a("OutboundLink")],1)]),e._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("# 下载\nwget https://get.helm.sh/helm-v2.11.0-linux-amd64.tar.gz\n# 解压\ntar -zxvf helm-v2.11.0-linux-amd64.tar.gz\n# 复制客户端执行文件到 bin 目录下\ncp linux-amd64/helm /usr/local/bin/\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br"),a("span",{staticClass:"line-number"},[e._v("3")]),a("br"),a("span",{staticClass:"line-number"},[e._v("4")]),a("br"),a("span",{staticClass:"line-number"},[e._v("5")]),a("br"),a("span",{staticClass:"line-number"},[e._v("6")]),a("br")])]),a("h3",{attrs:{id:"安装服务端-tiller"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#安装服务端-tiller"}},[e._v("#")]),e._v(" 安装服务端 Tiller")]),e._v(" "),a("p",[e._v("Tiller 是以 Deployment 方式部署在 Kubernetes 集群中的，只需使用以下指令便可简单的完成安装")]),e._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("helm init --upgrade --tiller-image registry.cn-hangzhou.aliyuncs.com/google_containers/tiller:v2.11.0  --stable-repo-url https://kubernetes.oss-cn-hangzhou.aliyuncs.com/charts\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br")])]),a("h3",{attrs:{id:"给-tiller-授权"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#给-tiller-授权"}},[e._v("#")]),e._v(" 给 Tiller 授权")]),e._v(" "),a("p",[e._v("Helm 的服务端 Tiller 是一个部署在 Kubernetes 中 "),a("code",[e._v("Kube-system")]),e._v(" Namespace 下的 Deployment，它会去连接 "),a("code",[e._v("kube-api")]),e._v(" 在 Kubernetes 里创建和删除应用。")]),e._v(" "),a("p",[e._v("从 Kubernetes 1.6 版本开始，API Server 启用了 RBAC 授权。目前的 Tiller 部署时默认没有定义授权的 ServiceAccount，这会导致访问 API Server 时被拒绝。所以我们需要明确为 Tiller 部署添加授权")]),e._v(" "),a("ul",[a("li",[e._v("创建一个名为 "),a("code",[e._v("tiller-adminuser.yaml")]),e._v(" 的配置文件，为 Tiller 创建服务帐号和绑定角色")])]),e._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("apiVersion: v1\nkind:  ServiceAccount\nmetadata:\n name: tiller\n namespace: kube-system\n---\napiVersion: rbac.authorization.k8s.io/v1\nkind:  ClusterRoleBinding\nmetadata:\n  name: tiller-cluster-rule\n roleRef:\n  apiGroup: rbac.authorization.k8s.io\n  kind:  ClusterRole\n  name: cluster-admin\n subjects:\n - kind:  ServiceAccount\n  name: tiller\n  namespace: kube-system\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br"),a("span",{staticClass:"line-number"},[e._v("3")]),a("br"),a("span",{staticClass:"line-number"},[e._v("4")]),a("br"),a("span",{staticClass:"line-number"},[e._v("5")]),a("br"),a("span",{staticClass:"line-number"},[e._v("6")]),a("br"),a("span",{staticClass:"line-number"},[e._v("7")]),a("br"),a("span",{staticClass:"line-number"},[e._v("8")]),a("br"),a("span",{staticClass:"line-number"},[e._v("9")]),a("br"),a("span",{staticClass:"line-number"},[e._v("10")]),a("br"),a("span",{staticClass:"line-number"},[e._v("11")]),a("br"),a("span",{staticClass:"line-number"},[e._v("12")]),a("br"),a("span",{staticClass:"line-number"},[e._v("13")]),a("br"),a("span",{staticClass:"line-number"},[e._v("14")]),a("br"),a("span",{staticClass:"line-number"},[e._v("15")]),a("br"),a("span",{staticClass:"line-number"},[e._v("16")]),a("br"),a("span",{staticClass:"line-number"},[e._v("17")]),a("br"),a("span",{staticClass:"line-number"},[e._v("18")]),a("br")])]),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("kubectl apply -f tiller-adminuser.yaml\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br")])]),a("ul",[a("li",[e._v("为 Tiller 设置帐号")])]),e._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('# 使用 kubectl patch 更新 API 对象\nkubectl patch deploy --namespace kube-system tiller-deploy -p \'{"spec":{"template":{"spec":{"serviceAccount":"tiller"}}}}\'\n# 输出如下\ndeployment.extensions/tiller-deploy patched\n')])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br"),a("span",{staticClass:"line-number"},[e._v("3")]),a("br"),a("span",{staticClass:"line-number"},[e._v("4")]),a("br")])]),a("ul",[a("li",[e._v("查看是否授权成功")])]),e._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("kubectl get deploy --namespace kube-system tiller-deploy --output yaml|grep  serviceAccount\n# 输出如下\nserviceAccount: tiller\nserviceAccountName: tiller\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br"),a("span",{staticClass:"line-number"},[e._v("3")]),a("br"),a("span",{staticClass:"line-number"},[e._v("4")]),a("br")])]),a("h3",{attrs:{id:"验证安装是否成功"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#验证安装是否成功"}},[e._v("#")]),e._v(" 验证安装是否成功")]),e._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('kubectl -n kube-system get pods|grep tiller\n# 输出如下\ntiller-deploy-6d74cd8c9d-v6zg4 1/1  Running  0  10m\n\nhelm version\n# 输出如下\nClient:  &version.Version{SemVer:"v2.11.0",  GitCommit:"2e55dbe1fdb5fdb96b75ff144a339489417b146b",  GitTreeState:"clean"}\nServer:  &version.Version{SemVer:"v2.11.0",  GitCommit:"2e55dbe1fdb5fdb96b75ff144a339489417b146b",  GitTreeState:"clean"}\n')])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br"),a("span",{staticClass:"line-number"},[e._v("3")]),a("br"),a("span",{staticClass:"line-number"},[e._v("4")]),a("br"),a("span",{staticClass:"line-number"},[e._v("5")]),a("br"),a("span",{staticClass:"line-number"},[e._v("6")]),a("br"),a("span",{staticClass:"line-number"},[e._v("7")]),a("br"),a("span",{staticClass:"line-number"},[e._v("8")]),a("br")])]),a("h2",{attrs:{id:"卸载-tiller"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#卸载-tiller"}},[e._v("#")]),e._v(" 卸载 Tiller")]),e._v(" "),a("p",[e._v("如果你需要在 Kubernetes 中卸载已部署的 Tiller，可使用以下命令完成卸载")]),e._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("helm reset\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br")])])])}),[],!1,null,null,null);s.default=r.exports}}]);