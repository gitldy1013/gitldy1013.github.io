(window.webpackJsonp=window.webpackJsonp||[]).push([[617],{1314:function(e,t,r){"use strict";r.r(t);var a=r(5),n=Object(a.a)({},(function(){var e=this,t=e.$createElement,r=e._self._c||t;return r("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[r("h1",{attrs:{id:"java中的线程池"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#java中的线程池"}},[e._v("#")]),e._v(" Java中的线程池")]),e._v(" "),r("p",[e._v("Java中的线程池是运用场景最多的并发框架，几乎所有需要异步或并发执行任务的程序都可以使用线程池。在开发过程中，合理地使用线程池能够带来3个好处。"),r("br"),e._v("\n第一：降低资源消耗。通过重复利用已创建的线程降低线程创建和销毁造成的消耗。"),r("br"),e._v("\n第二：提高响应速度。当任务到达时，任务可以不需要等到线程创建就能立即执行。"),r("br"),e._v("\n第三：提高线程的可管理性。线程是稀缺资源，如果无限制地创建，不仅会消耗系统资源，还会降低系统的稳定性，使用线程池可以进行统一分配、调优和监控。但是，要做到合理利用线程池，必须对其实现原理了如指掌。")]),e._v(" "),r("h2",{attrs:{id:"线程池的实现原理"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#线程池的实现原理"}},[e._v("#")]),e._v(" 线程池的实现原理")]),e._v(" "),r("p",[e._v("当提交一个新任务到线程池时，线程池的处理流程如下")]),e._v(" "),r("p",[e._v("1）线程池判断核心线程池里的线程是否都在执行任务。如果不是，则创建一个新的工作线程来执行任务。如果核心线程池里的线程都在执行任务，则进入下个流程。")]),e._v(" "),r("p",[e._v("2）线程池判断工作队列是否已经满。如果工作队列没有满，则将新提交的任务存储在这个工作队列里。如果工作队列满了，则进入下个流程。")]),e._v(" "),r("p",[e._v("3）线程池判断线程池的线程是否都处于工作状态。如果没有，则创建一个新的工作线程来执行任务。如果已经满了，则交给饱和策略来处理这个任务。")]),e._v(" "),r("p",[e._v("ThreadPoolExecutor执行execute方法分下面4种情况。"),r("br"),e._v("\n1）如果当前运行的线程少于corePoolSize，则创建新线程来执行任务（注意，执行这一步骤需要获取全局锁）。"),r("br"),e._v("\n2）如果运行的线程等于或多于corePoolSize，则将任务加入BlockingQueue。"),r("br"),e._v("\n3）如果无法将任务加入BlockingQueue（队列已满），则创建新的线程来处理任务（注意，执行这一步骤需要获取全局锁）。"),r("br"),e._v("\n4）如果创建新线程将使当前运行的线程超出maximumPoolSize，任务将被拒绝，并调用"),r("br"),e._v("\nRejectedExecutionHandler.rejectedExecution()方法。")]),e._v(" "),r("h2",{attrs:{id:"线程池的创建"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#线程池的创建"}},[e._v("#")]),e._v(" 线程池的创建")]),e._v(" "),r("p",[e._v("我们可以通过ThreadPoolExecutor来创建一个线程池。")]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",[r("code",[e._v("new ThreadPoolExecutor(corePoolSize, maximumPoolSize, keepAliveTime,\n                milliseconds,runnableTaskQueue, handler);\n")])])]),r("p",[e._v("创建一个线程池时需要输入几个参数，如下。"),r("br"),e._v("\n1）corePoolSize（线程池的基本大小）：当提交一个任务到线程池时，线程池会创建一个线程来执行任务，即使其他空闲的基本线程能够执行新任务也会创建线程，等到需要执行的任务数大于线程池基本大小时就不再创建。如果调用了线程池的prestartAllCoreThreads()方法，线程池会提前创建并启动所有基本线程。")]),e._v(" "),r("p",[e._v("2）runnableTaskQueue（任务队列）：用于保存等待执行的任务的阻塞队列。可以选择以下几个阻塞队列。")]),e._v(" "),r("p",[e._v("·ArrayBlockingQueue：是一个基于数组结构的有界阻塞队列，此队列按FIFO（先进先出）原则对元素进行排序。")]),e._v(" "),r("p",[e._v("·LinkedBlockingQueue：一个基于链表结构的阻塞队列，此队列按FIFO排序元素，吞吐量通常要高于ArrayBlockingQueue。静态工厂方法Executors.newFixedThreadPool()使用了这个队列。")]),e._v(" "),r("p",[e._v("·SynchronousQueue：一个不存储元素的阻塞队列。每个插入操作必须等到另一个线程调用移除操作，否则插入操作一直处于阻塞状态，吞吐量通常要高于Linked-BlockingQueue，静态工厂方法Executors.newCachedThreadPool使用了这个队列。·PriorityBlockingQueue：一个具有优先级的无限阻塞队列。")]),e._v(" "),r("p",[e._v("3）maximumPoolSize（线程池最大数量）：线程池允许创建的最大线程数。如果队列满了，并且已创建的线程数小于最大线程数，则线程池会再创建新的线程执行任务。值得注意的是，如果使用了无界的任务队列这个参数就没什么效果。"),r("br"),e._v("\n4）ThreadFactory：用于设置创建线程的工厂，可以通过线程工厂给每个创建出来的线程设置更有意义的名字。使用开源框架guava提供的ThreadFactoryBuilder可以快速给线程池里的线程设置有意义的名字，代码如下。")]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",[r("code",[e._v('new ThreadFactoryBuilder().setNameFormat("XX-task-%d").build();\n')])])]),r("p",[e._v("5）RejectedExecutionHandler（饱和策略）：当队列和线程池都满了，说明线程池处于饱和状态，那么必须采取一种策略处理提交的新任务。这个策略默认情况下是AbortPolicy，表示无法处理新任务时抛出异常。在JDK 1.5中Java线程池框架提供了以下4种策略。")]),e._v(" "),r("p",[e._v("·AbortPolicy：直接抛出异常。"),r("br"),e._v("\n·CallerRunsPolicy：只用调用者所在线程来运行任务。"),r("br"),e._v("\n·DiscardOldestPolicy：丢弃队列里最近的一个任务，并执行当前任务。"),r("br"),e._v("\n·DiscardPolicy：不处理，丢弃掉。")]),e._v(" "),r("p",[e._v("·keepAliveTime（线程活动保持时间）：线程池的工作线程空闲后，保持存活的时间。所以，"),r("br"),e._v("\n如果任务很多，并且每个任务执行的时间比较短，可以调大时间，提高线程的利用率。")]),e._v(" "),r("p",[e._v("·TimeUnit（线程活动保持时间的单位）：可选的单位有天（DAYS）、小时（HOURS）、分钟（MINUTES）、毫秒（MILLISECONDS）、微秒（MICROSECONDS，千分之一毫秒）和纳秒（NANOSECONDS，千分之一微秒）。")]),e._v(" "),r("h2",{attrs:{id:"向线程池提交任务"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#向线程池提交任务"}},[e._v("#")]),e._v(" 向线程池提交任务")]),e._v(" "),r("p",[e._v("可以使用两个方法向线程池提交任务，分别为execute()和submit()方法。"),r("br"),e._v("\nexecute()方法用于提交不需要返回值的任务，所以无法判断任务是否被线程池执行成功。通过以下代码可知execute()方法输入的任务是一个Runnable类的实例。")]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",[r("code",[e._v("threadsPool.execute(new Runnable(){\n    public void run(){\n    }\n})\n")])])]),r("p",[e._v("submit()方法用于提交需要返回值的任务。线程池会返回一个future类型的对象，通过这个future对象可以判断任务是否执行成功，并且可以通过future的get()方法来获取返回值，get()方法会阻塞当前线程直到任务完成，而使用get（long timeout，TimeUnit unit）方法则会阻塞当前线程一段时间后立即返回，这时候有可能任务没有执行完。")]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",[r("code",[e._v("Future<Object> future = executor.submit(harReturnValuetask);\n    try {\n        Object s = future.get();\n    } catch (InterruptedException e) {\n    // 处理中断异常\n    } catch (ExecutionException e) {\n    // 处理无法执行任务异常\n    } finally {\n         // 关闭线程池\n         executor.shutdown();\n    }\n")])])]),r("h2",{attrs:{id:"关闭线程池"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#关闭线程池"}},[e._v("#")]),e._v(" 关闭线程池")]),e._v(" "),r("p",[e._v("可以通过调用线程池的shutdown或shutdownNow方法来关闭线程池。它们的原理是遍历线程池中的工作线程，然后逐个调用线程的interrupt方法来中断线程，所以无法响应中断的任务可能永远无法终止。但是它们存在一定的区别，shutdownNow首先将线程池的状态设置成STOP，然后尝试停止所有的正在执行或暂停任务的线程，并返回等待执行任务的列表，而shutdown只是将线程池的状态设置成SHUTDOWN状态，然后中断所有没有正在执行任务的线程。")]),e._v(" "),r("p",[e._v("只要调用了这两个关闭方法中的任意一个，isShutdown方法就会返回true。当所有的任务都已关闭后，才表示线程池关闭成功，这时调用isTerminaed方法会返回true。至于应该调用哪一种方法来关闭线程池，应该由提交到线程池的任务特性决定，通常调用shutdown方法来关闭线程池，如果任务不一定要执行完，则可以调用shutdownNow方法。")])])}),[],!1,null,null,null);t.default=n.exports}}]);