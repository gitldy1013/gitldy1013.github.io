(window.webpackJsonp=window.webpackJsonp||[]).push([[589],{1285:function(s,n,a){"use strict";a.r(n);var t=a(5),e=Object(t.a)({},(function(){var s=this,n=s.$createElement,a=s._self._c||n;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("h1",{attrs:{id:"go语言中没有-类-的概念-也不支持-类-的继承等面向对象的概念。go语言中通过结构体的内嵌再配合接口比面向对象具有更高的扩展性和灵活性。"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#go语言中没有-类-的概念-也不支持-类-的继承等面向对象的概念。go语言中通过结构体的内嵌再配合接口比面向对象具有更高的扩展性和灵活性。"}},[s._v("#")]),s._v(" Go语言中没有“类”的概念，也不支持“类”的继承等面向对象的概念。Go语言中通过结构体的内嵌再配合接口比面向对象具有更高的扩展性和灵活性。")]),s._v(" "),a("h2",{attrs:{id:"类型别名和自定义类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#类型别名和自定义类型"}},[s._v("#")]),s._v(" 类型别名和自定义类型")]),s._v(" "),a("h3",{attrs:{id:"自定义类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#自定义类型"}},[s._v("#")]),s._v(" 自定义类型")]),s._v(" "),a("p",[s._v("在Go语言中有一些基本的数据类型，如"),a("code",[s._v("string")]),s._v("、"),a("code",[s._v("整型")]),s._v("、"),a("code",[s._v("浮点型")]),s._v("、"),a("code",[s._v("布尔")]),s._v("等数据类型， Go语言中可以使用"),a("code",[s._v("type")]),s._v("关键字来定义自定义类型。")]),s._v(" "),a("p",[s._v("自定义类型是定义了一个全新的类型。我们可以基于内置的基本类型定义，也可以通过struct定义。例如：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("    //将MyInt定义为int类型\n    type MyInt int\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("p",[s._v("通过"),a("code",[s._v("type")]),s._v("关键字的定义，"),a("code",[s._v("MyInt")]),s._v("就是一种新的类型，它具有"),a("code",[s._v("int")]),s._v("的特性。")]),s._v(" "),a("h3",{attrs:{id:"类型别名"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#类型别名"}},[s._v("#")]),s._v(" 类型别名")]),s._v(" "),a("p",[s._v("类型别名是"),a("code",[s._v("Go1.9")]),s._v("版本添加的新功能。")]),s._v(" "),a("p",[s._v("类型别名规定：TypeAlias只是Type的别名，本质上TypeAlias与Type是同一个类型。就像一个孩子小时候有小名、乳名，上学后用学名，英语老师又会给他起英文名，但这些名字都指的是他本人。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("    type TypeAlias = Type\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("我们之前见过的"),a("code",[s._v("rune")]),s._v("和"),a("code",[s._v("byte")]),s._v("就是类型别名，他们的定义如下：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("    type byte = uint8\n    type rune = int32\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("h3",{attrs:{id:"类型定义和类型别名的区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#类型定义和类型别名的区别"}},[s._v("#")]),s._v(" 类型定义和类型别名的区别")]),s._v(" "),a("p",[s._v("类型别名与类型定义表面上看只有一个等号的差异，我们通过下面的这段代码来理解它们之间的区别。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('    //类型定义\n    type NewInt int\n    \n    //类型别名\n    type MyInt = int\n    \n    func main() {\n    \tvar a NewInt\n    \tvar b MyInt\n    \t\n    \tfmt.Printf("type of a:%T\\n", a) //type of a:main.NewInt\n    \tfmt.Printf("type of b:%T\\n", b) //type of b:int\n    }\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br")])]),a("p",[s._v("结果显示a的类型是"),a("code",[s._v("main.NewInt")]),s._v("，表示main包下定义的"),a("code",[s._v("NewInt")]),s._v("类型。b的类型是"),a("code",[s._v("int")]),s._v("。"),a("code",[s._v("MyInt")]),s._v("类型只会在代码中存在，编译完成时并不会有"),a("code",[s._v("MyInt")]),s._v("类型。")]),s._v(" "),a("h2",{attrs:{id:"结构体"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#结构体"}},[s._v("#")]),s._v(" 结构体")]),s._v(" "),a("p",[s._v("Go语言中的基础数据类型可以表示一些事物的基本属性，但是当我们想表达一个事物的全部或部分属性时，这时候再用单一的基本数据类型明显就无法满足需求了，Go语言提供了一种自定义数据类型，可以封装多个基本数据类型，这种数据类型叫结构体，英文名称"),a("code",[s._v("struct")]),s._v("。 也就是我们可以通过"),a("code",[s._v("struct")]),s._v("来定义自己的类型了。")]),s._v(" "),a("p",[s._v("Go语言中通过"),a("code",[s._v("struct")]),s._v("来实现面向对象。")]),s._v(" "),a("h3",{attrs:{id:"结构体的定义"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#结构体的定义"}},[s._v("#")]),s._v(" 结构体的定义")]),s._v(" "),a("p",[s._v("使用"),a("code",[s._v("type")]),s._v("和"),a("code",[s._v("struct")]),s._v("关键字来定义结构体，具体代码格式如下：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("    type 类型名 struct {\n        字段名 字段类型\n        字段名 字段类型\n        …\n    }\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br")])]),a("p",[s._v("其中：")]),s._v(" "),a("ul",[a("li",[s._v("类型名：标识自定义结构体的名称，在同一个包内不能重复。")]),s._v(" "),a("li",[s._v("字段名：表示结构体字段名。结构体中的字段名必须唯一。")]),s._v(" "),a("li",[s._v("字段类型：表示结构体字段的具体类型。")])]),s._v(" "),a("p",[s._v("举个例子，我们定义一个"),a("code",[s._v("Person")]),s._v("（人）结构体，代码如下：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("    type person struct {\n    \tname string\n    \tcity string\n    \tage  int8\n    }\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br")])]),a("p",[s._v("同样类型的字段也可以写在一行，")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("    type person1 struct {\n    \tname, city string\n    \tage        int8\n    }\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br")])]),a("p",[s._v("这样我们就拥有了一个"),a("code",[s._v("person")]),s._v("的自定义类型，它有"),a("code",[s._v("name")]),s._v("、"),a("code",[s._v("city")]),s._v("、"),a("code",[s._v("age")]),s._v("三个字段，分别表示姓名、城市和年龄。这样我们使用这个"),a("code",[s._v("person")]),s._v("结构体就能够很方便的在程序中表示和存储人信息了。")]),s._v(" "),a("p",[s._v("语言内置的基础数据类型是用来描述一个值的，而结构体是用来描述一组值的。比如一个人有名字、年龄和居住城市等，本质上是一种聚合型的数据类型")]),s._v(" "),a("h3",{attrs:{id:"结构体实例化"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#结构体实例化"}},[s._v("#")]),s._v(" 结构体实例化")]),s._v(" "),a("p",[s._v("只有当结构体实例化时，才会真正地分配内存。也就是必须实例化后才能使用结构体的字段。")]),s._v(" "),a("p",[s._v("结构体本身也是一种类型，我们可以像声明内置类型一样使用"),a("code",[s._v("var")]),s._v("关键字声明结构体类型。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("    var 结构体实例 结构体类型\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("h4",{attrs:{id:"基本实例化"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#基本实例化"}},[s._v("#")]),s._v(" 基本实例化")]),s._v(" "),a("p",[s._v("举个例子：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('    type person struct {\n    \tname string\n    \tcity string\n    \tage  int8\n    }\n    \n    func main() {\n    \tvar p1 person\n    \tp1.name = "沙河娜扎"\n    \tp1.city = "北京"\n    \tp1.age = 18\n    \tfmt.Printf("p1=%v\\n", p1)  //p1={沙河娜扎 北京 18}\n    \tfmt.Printf("p1=%#v\\n", p1) //p1=main.person{name:"沙河娜扎", city:"北京", age:18}\n    }\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br")])]),a("p",[s._v("我们通过"),a("code",[s._v(".")]),s._v("来访问结构体的字段（成员变量）,例如"),a("code",[s._v("p1.name")]),s._v("和"),a("code",[s._v("p1.age")]),s._v("等。")]),s._v(" "),a("h4",{attrs:{id:"匿名结构体"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#匿名结构体"}},[s._v("#")]),s._v(" 匿名结构体")]),s._v(" "),a("p",[s._v("在定义一些临时数据结构等场景下还可以使用匿名结构体。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('    package main\n         \n    import (\n        "fmt"\n    )\n         \n    func main() {\n        var user struct{Name string; Age int}\n        user.Name = "小王子"\n        user.Age = 18\n        fmt.Printf("%#v\\n", user)\n    }\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br")])]),a("h4",{attrs:{id:"创建指针类型结构体"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#创建指针类型结构体"}},[s._v("#")]),s._v(" 创建指针类型结构体")]),s._v(" "),a("p",[s._v("我们还可以通过使用"),a("code",[s._v("new")]),s._v("关键字对结构体进行实例化，得到的是结构体的地址。 格式如下：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('    var p2 = new(person)\n    fmt.Printf("%T\\n", p2)     //*main.person\n    fmt.Printf("p2=%#v\\n", p2) //p2=&main.person{name:"", city:"", age:0}\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("p",[s._v("从打印的结果中我们可以看出"),a("code",[s._v("p2")]),s._v("是一个结构体指针。")]),s._v(" "),a("p",[s._v("需要注意的是在Go语言中支持对结构体指针直接使用"),a("code",[s._v(".")]),s._v("来访问结构体的成员。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('    var p2 = new(person)\n    p2.name = "小王子"\n    p2.age = 28\n    p2.city = "上海"\n    fmt.Printf("p2=%#v\\n", p2) //p2=&main.person{name:"小王子", city:"上海", age:28}\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br")])]),a("h4",{attrs:{id:"取结构体的地址实例化"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#取结构体的地址实例化"}},[s._v("#")]),s._v(" 取结构体的地址实例化")]),s._v(" "),a("p",[s._v("使用"),a("code",[s._v("&")]),s._v("对结构体进行取地址操作相当于对该结构体类型进行了一次"),a("code",[s._v("new")]),s._v("实例化操作。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('    p3 := &person{}\n    fmt.Printf("%T\\n", p3)     //*main.person\n    fmt.Printf("p3=%#v\\n", p3) //p3=&main.person{name:"", city:"", age:0}\n    p3.name = "七米"\n    p3.age = 30\n    p3.city = "成都"\n    fmt.Printf("p3=%#v\\n", p3) //p3=&main.person{name:"七米", city:"成都", age:30}\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br")])]),a("p",[a("code",[s._v('p3.name = "七米"')]),s._v("其实在底层是"),a("code",[s._v('(*p3).name = "七米"')]),s._v("，这是Go语言帮我们实现的语法糖。")]),s._v(" "),a("h3",{attrs:{id:"结构体初始化"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#结构体初始化"}},[s._v("#")]),s._v(" 结构体初始化")]),s._v(" "),a("p",[s._v("没有初始化的结构体，其成员变量都是对应其类型的零值。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('    type person struct {\n    \tname string\n    \tcity string\n    \tage  int8\n    }\n    \n    func main() {\n    \tvar p4 person\n    \tfmt.Printf("p4=%#v\\n", p4) //p4=main.person{name:"", city:"", age:0}\n    }\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br")])]),a("h4",{attrs:{id:"使用键值对初始化"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#使用键值对初始化"}},[s._v("#")]),s._v(" 使用键值对初始化")]),s._v(" "),a("p",[s._v("使用键值对对结构体进行初始化时，键对应结构体的字段，值对应该字段的初始值。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('    p5 := person{\n    \tname: "小王子",\n    \tcity: "北京",\n    \tage:  18,\n    }\n    fmt.Printf("p5=%#v\\n", p5) //p5=main.person{name:"小王子", city:"北京", age:18}\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br")])]),a("p",[s._v("也可以对结构体指针进行键值对初始化，例如：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('    p6 := &person{\n    \tname: "小王子",\n    \tcity: "北京",\n    \tage:  18,\n    }\n    fmt.Printf("p6=%#v\\n", p6) //p6=&main.person{name:"小王子", city:"北京", age:18}\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br")])]),a("p",[s._v("当某些字段没有初始值的时候，该字段可以不写。此时，没有指定初始值的字段的值就是该字段类型的零值。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('    p7 := &person{\n    \tcity: "北京",\n    }\n    fmt.Printf("p7=%#v\\n", p7) //p7=&main.person{name:"", city:"北京", age:0}\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br")])]),a("h4",{attrs:{id:"使用值的列表初始化"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#使用值的列表初始化"}},[s._v("#")]),s._v(" 使用值的列表初始化")]),s._v(" "),a("p",[s._v("初始化结构体的时候可以简写，也就是初始化的时候不写键，直接写值：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('    p8 := &person{\n    \t"沙河娜扎",\n    \t"北京",\n    \t28,\n    }\n    fmt.Printf("p8=%#v\\n", p8) //p8=&main.person{name:"沙河娜扎", city:"北京", age:28}\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br")])]),a("p",[s._v("使用这种格式初始化时，需要注意：")]),s._v(" "),a("ol",[a("li",[s._v("必须初始化结构体的所有字段。")]),s._v(" "),a("li",[s._v("初始值的填充顺序必须与字段在结构体中的声明顺序一致。")]),s._v(" "),a("li",[s._v("该方式不能和键值初始化方式混用。")])]),s._v(" "),a("h3",{attrs:{id:"结构体内存布局"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#结构体内存布局"}},[s._v("#")]),s._v(" 结构体内存布局")]),s._v(" "),a("p",[s._v("结构体占用一块连续的内存。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('    type test struct {\n    \ta int8\n    \tb int8\n    \tc int8\n    \td int8\n    }\n    n := test{\n    \t1, 2, 3, 4,\n    }\n    fmt.Printf("n.a %p\\n", &n.a)\n    fmt.Printf("n.b %p\\n", &n.b)\n    fmt.Printf("n.c %p\\n", &n.c)\n    fmt.Printf("n.d %p\\n", &n.d)\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br")])]),a("p",[s._v("输出：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("    n.a 0xc0000a0060\n    n.b 0xc0000a0061\n    n.c 0xc0000a0062\n    n.d 0xc0000a0063\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br")])]),a("p",[s._v("【进阶知识点】关于Go语言中的内存对齐推荐阅读:"),a("a",{attrs:{href:"https://segmentfault.com/a/1190000017527311?utm_campaign=studygolang.com&utm_medium=studygolang.com&utm_source=studygolang.com",target:"_blank",rel:"noopener noreferrer"}},[s._v("在 Go 中恰到好处的内存对齐"),a("OutboundLink")],1)]),s._v(" "),a("h4",{attrs:{id:"空结构体"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#空结构体"}},[s._v("#")]),s._v(" 空结构体")]),s._v(" "),a("p",[s._v("空结构体是不占用空间的。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("    var v struct{}\n    fmt.Println(unsafe.Sizeof(v))  // 0\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("h2",{attrs:{id:"面试题"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#面试题"}},[s._v("#")]),s._v(" 面试题")]),s._v(" "),a("p",[s._v("请问下面代码的执行结果是什么？")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('    type student struct {\n    \tname string\n    \tage  int\n    }\n    \n    func main() {\n    \tm := make(map[string]*student)\n    \tstus := []student{\n    \t\t{name: "小王子", age: 18},\n    \t\t{name: "娜扎", age: 23},\n    \t\t{name: "大王八", age: 9000},\n    \t}\n    \n    \tfor _, stu := range stus {\n    \t\tm[stu.name] = &stu\n    \t}\n    \tfor k, v := range m {\n    \t\tfmt.Println(k, "=>", v.name)\n    \t}\n    }\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br")])]),a("h3",{attrs:{id:"构造函数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#构造函数"}},[s._v("#")]),s._v(" 构造函数")]),s._v(" "),a("p",[s._v("Go语言的结构体没有构造函数，我们可以自己实现。 例如，下方的代码就实现了一个"),a("code",[s._v("person")]),s._v("的构造函数。 因为"),a("code",[s._v("struct")]),s._v("是值类型，如果结构体比较复杂的话，值拷贝性能开销会比较大，所以该构造函数返回的是结构体指针类型。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("    func newPerson(name, city string, age int8) *person {\n    \treturn &person{\n    \t\tname: name,\n    \t\tcity: city,\n    \t\tage:  age,\n    \t}\n    }\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br")])]),a("p",[s._v("调用构造函数")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('    p9 := newPerson("张三", "沙河", 90)\n    fmt.Printf("%#v\\n", p9) //&main.person{name:"张三", city:"沙河", age:90}\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("h3",{attrs:{id:"方法和接收者"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#方法和接收者"}},[s._v("#")]),s._v(" 方法和接收者")]),s._v(" "),a("p",[s._v("Go语言中的"),a("code",[s._v("方法（Method）")]),s._v("是一种作用于特定类型变量的函数。这种特定类型变量叫做"),a("code",[s._v("接收者（Receiver）")]),s._v("。接收者的概念就类似于其他语言中的"),a("code",[s._v("this")]),s._v("或者 "),a("code",[s._v("self")]),s._v("。")]),s._v(" "),a("p",[s._v("方法的定义格式如下：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("    func (接收者变量 接收者类型) 方法名(参数列表) (返回参数) {\n        函数体\n    }\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("p",[s._v("其中，")]),s._v(" "),a("ul",[a("li",[s._v("接收者变量：接收者中的参数变量名在命名时，官方建议使用接收者类型名称首字母的小写，而不是"),a("code",[s._v("self")]),s._v("、"),a("code",[s._v("this")]),s._v("之类的命名。例如，"),a("code",[s._v("Person")]),s._v("类型的接收者变量应该命名为 "),a("code",[s._v("p")]),s._v("，"),a("code",[s._v("Connector")]),s._v("类型的接收者变量应该命名为"),a("code",[s._v("c")]),s._v("等。")]),s._v(" "),a("li",[s._v("接收者类型：接收者类型和参数类似，可以是指针类型和非指针类型。")]),s._v(" "),a("li",[s._v("方法名、参数列表、返回参数：具体格式与函数定义相同。")])]),s._v(" "),a("p",[s._v("举个例子：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('    //Person 结构体\n    type Person struct {\n    \tname string\n    \tage  int8\n    }\n    \n    //NewPerson 构造函数\n    func NewPerson(name string, age int8) *Person {\n    \treturn &Person{\n    \t\tname: name,\n    \t\tage:  age,\n    \t}\n    }\n    \n    //Dream Person做梦的方法\n    func (p Person) Dream() {\n    \tfmt.Printf("%s的梦想是学好Go语言！\\n", p.name)\n    }\n    \n    func main() {\n    \tp1 := NewPerson("小王子", 25)\n    \tp1.Dream()\n    }\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br")])]),a("p",[s._v("方法与函数的区别是，函数不属于任何类型，方法属于特定的类型。")]),s._v(" "),a("h4",{attrs:{id:"指针类型的接收者"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#指针类型的接收者"}},[s._v("#")]),s._v(" 指针类型的接收者")]),s._v(" "),a("p",[s._v("指针类型的接收者由一个结构体的指针组成，由于指针的特性，调用方法时修改接收者指针的任意成员变量，在方法结束后，修改都是有效的。这种方式就十分接近于其他语言中面向对象中的"),a("code",[s._v("this")]),s._v("或者"),a("code",[s._v("self")]),s._v("。 例如我们为"),a("code",[s._v("Person")]),s._v("添加一个"),a("code",[s._v("SetAge")]),s._v("方法，来修改实例变量的年龄。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("    // SetAge 设置p的年龄\n    // 使用指针接收者\n    func (p *Person) SetAge(newAge int8) {\n    \tp.age = newAge\n    }\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br")])]),a("p",[s._v("调用该方法：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('    func main() {\n    \tp1 := NewPerson("小王子", 25)\n    \tfmt.Println(p1.age) // 25\n    \tp1.SetAge(30)\n    \tfmt.Println(p1.age) // 30\n    }\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br")])]),a("h4",{attrs:{id:"值类型的接收者"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#值类型的接收者"}},[s._v("#")]),s._v(" 值类型的接收者")]),s._v(" "),a("p",[s._v("当方法作用于值类型接收者时，Go语言会在代码运行时将接收者的值复制一份。在值类型接收者的方法中可以获取接收者的成员值，但修改操作只是针对副本，无法修改接收者变量本身。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('    // SetAge2 设置p的年龄\n    // 使用值接收者\n    func (p Person) SetAge2(newAge int8) {\n    \tp.age = newAge\n    }\n    \n    func main() {\n    \tp1 := NewPerson("小王子", 25)\n    \tp1.Dream()\n    \tfmt.Println(p1.age) // 25\n    \tp1.SetAge2(30) // (*p1).SetAge2(30)\n    \tfmt.Println(p1.age) // 25\n    }\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br")])]),a("h4",{attrs:{id:"什么时候应该使用指针类型接收者"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#什么时候应该使用指针类型接收者"}},[s._v("#")]),s._v(" 什么时候应该使用指针类型接收者")]),s._v(" "),a("ol",[a("li",[s._v("需要修改接收者中的值")]),s._v(" "),a("li",[s._v("接收者是拷贝代价比较大的大对象")]),s._v(" "),a("li",[s._v("保证一致性，如果有某个方法使用了指针接收者，那么其他的方法也应该使用指针接收者。")])]),s._v(" "),a("h3",{attrs:{id:"任意类型添加方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#任意类型添加方法"}},[s._v("#")]),s._v(" 任意类型添加方法")]),s._v(" "),a("p",[s._v("在Go语言中，接收者的类型可以是任何类型，不仅仅是结构体，任何类型都可以拥有方法。 举个例子，我们基于内置的"),a("code",[s._v("int")]),s._v("类型使用type关键字可以定义新的自定义类型，然后为我们的自定义类型添加方法。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('    //MyInt 将int定义为自定义MyInt类型\n    type MyInt int\n    \n    //SayHello 为MyInt添加一个SayHello的方法\n    func (m MyInt) SayHello() {\n    \tfmt.Println("Hello, 我是一个int。")\n    }\n    func main() {\n    \tvar m1 MyInt\n    \tm1.SayHello() //Hello, 我是一个int。\n    \tm1 = 100\n    \tfmt.Printf("%#v  %T\\n", m1, m1) //100  main.MyInt\n    }\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br")])]),a("p",[a("strong",[s._v("注意事项：")]),s._v(" 非本地类型不能定义方法，也就是说我们不能给别的包的类型定义方法。")]),s._v(" "),a("h3",{attrs:{id:"结构体的匿名字段"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#结构体的匿名字段"}},[s._v("#")]),s._v(" 结构体的匿名字段")]),s._v(" "),a("p",[s._v("结构体允许其成员字段在声明时没有字段名而只有类型，这种没有名字的字段就称为匿名字段。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('    //Person 结构体Person类型\n    type Person struct {\n    \tstring\n    \tint\n    }\n    \n    func main() {\n    \tp1 := Person{\n    \t\t"小王子",\n    \t\t18,\n    \t}\n    \tfmt.Printf("%#v\\n", p1)        //main.Person{string:"北京", int:18}\n    \tfmt.Println(p1.string, p1.int) //北京 18\n    }\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br")])]),a("p",[s._v("匿名字段默认采用类型名作为字段名，结构体要求字段名称必须唯一，因此一个结构体中同种类型的匿名字段只能有一个。")]),s._v(" "),a("h3",{attrs:{id:"嵌套结构体"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#嵌套结构体"}},[s._v("#")]),s._v(" 嵌套结构体")]),s._v(" "),a("p",[s._v("一个结构体中可以嵌套包含另一个结构体或结构体指针。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('    //Address 地址结构体\n    type Address struct {\n    \tProvince string\n    \tCity     string\n    }\n    \n    //User 用户结构体\n    type User struct {\n    \tName    string\n    \tGender  string\n    \tAddress Address\n    }\n    \n    func main() {\n    \tuser1 := User{\n    \t\tName:   "小王子",\n    \t\tGender: "男",\n    \t\tAddress: Address{\n    \t\t\tProvince: "山东",\n    \t\t\tCity:     "威海",\n    \t\t},\n    \t}\n    \tfmt.Printf("user1=%#v\\n", user1)//user1=main.User{Name:"小王子", Gender:"男", Address:main.Address{Province:"山东", City:"威海"}}\n    }\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br")])]),a("h4",{attrs:{id:"嵌套匿名结构体"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#嵌套匿名结构体"}},[s._v("#")]),s._v(" 嵌套匿名结构体")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('    //Address 地址结构体\n    type Address struct {\n    \tProvince string\n    \tCity     string\n    }\n    \n    //User 用户结构体\n    type User struct {\n    \tName    string\n    \tGender  string\n    \tAddress //匿名结构体\n    }\n    \n    func main() {\n    \tvar user2 User\n    \tuser2.Name = "小王子"\n    \tuser2.Gender = "男"\n    \tuser2.Address.Province = "山东"    //通过匿名结构体.字段名访问\n    \tuser2.City = "威海"                //直接访问匿名结构体的字段名\n    \tfmt.Printf("user2=%#v\\n", user2) //user2=main.User{Name:"小王子", Gender:"男", Address:main.Address{Province:"山东", City:"威海"}}\n    }\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br")])]),a("p",[s._v("当访问结构体成员时会先在结构体中查找该字段，找不到再去匿名结构体中查找。")]),s._v(" "),a("h4",{attrs:{id:"嵌套结构体的字段名冲突"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#嵌套结构体的字段名冲突"}},[s._v("#")]),s._v(" 嵌套结构体的字段名冲突")]),s._v(" "),a("p",[s._v("嵌套结构体内部可能存在相同的字段名。这个时候为了避免歧义需要指定具体的内嵌结构体的字段。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('    //Address 地址结构体\n    type Address struct {\n    \tProvince   string\n    \tCity       string\n    \tCreateTime string\n    }\n    \n    //Email 邮箱结构体\n    type Email struct {\n    \tAccount    string\n    \tCreateTime string\n    }\n    \n    //User 用户结构体\n    type User struct {\n    \tName   string\n    \tGender string\n    \tAddress\n    \tEmail\n    }\n    \n    func main() {\n    \tvar user3 User\n    \tuser3.Name = "沙河娜扎"\n    \tuser3.Gender = "男"\n    \t// user3.CreateTime = "2019" //ambiguous selector user3.CreateTime\n    \tuser3.Address.CreateTime = "2000" //指定Address结构体中的CreateTime\n    \tuser3.Email.CreateTime = "2000"   //指定Email结构体中的CreateTime\n    }\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br"),a("span",{staticClass:"line-number"},[s._v("26")]),a("br"),a("span",{staticClass:"line-number"},[s._v("27")]),a("br"),a("span",{staticClass:"line-number"},[s._v("28")]),a("br"),a("span",{staticClass:"line-number"},[s._v("29")]),a("br")])]),a("h3",{attrs:{id:"结构体的-继承"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#结构体的-继承"}},[s._v("#")]),s._v(" 结构体的“继承”")]),s._v(" "),a("p",[s._v("Go语言中使用结构体也可以实现其他编程语言中面向对象的继承。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('    //Animal 动物\n    type Animal struct {\n    \tname string\n    }\n    \n    func (a *Animal) move() {\n    \tfmt.Printf("%s会动！\\n", a.name)\n    }\n    \n    //Dog 狗\n    type Dog struct {\n    \tFeet    int8\n    \t*Animal //通过嵌套匿名结构体实现继承\n    }\n    \n    func (d *Dog) wang() {\n    \tfmt.Printf("%s会汪汪汪~\\n", d.name)\n    }\n    \n    func main() {\n    \td1 := &Dog{\n    \t\tFeet: 4,\n    \t\tAnimal: &Animal{ //注意嵌套的是结构体指针\n    \t\t\tname: "乐乐",\n    \t\t},\n    \t}\n    \td1.wang() //乐乐会汪汪汪~\n    \td1.move() //乐乐会动！\n    }\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br"),a("span",{staticClass:"line-number"},[s._v("26")]),a("br"),a("span",{staticClass:"line-number"},[s._v("27")]),a("br"),a("span",{staticClass:"line-number"},[s._v("28")]),a("br"),a("span",{staticClass:"line-number"},[s._v("29")]),a("br")])]),a("h3",{attrs:{id:"结构体字段的可见性"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#结构体字段的可见性"}},[s._v("#")]),s._v(" 结构体字段的可见性")]),s._v(" "),a("p",[s._v("结构体中字段大写开头表示可公开访问，小写表示私有（仅在定义当前结构体的包中可访问）。")]),s._v(" "),a("h3",{attrs:{id:"结构体与json序列化"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#结构体与json序列化"}},[s._v("#")]),s._v(" 结构体与JSON序列化")]),s._v(" "),a("p",[s._v("JSON(JavaScript Object Notation) 是一种轻量级的数据交换格式。易于人阅读和编写。同时也易于机器解析和生成。JSON键值对是用来保存JS对象的一种方式，键/值对组合中的键名写在前面并用双引号"),a("code",[s._v('""')]),s._v("包裹，使用冒号"),a("code",[s._v(":")]),s._v("分隔，然后紧接着值；多个键值之间使用英文"),a("code",[s._v(",")]),s._v("分隔。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('    //Student 学生\n    type Student struct {\n    \tID     int\n    \tGender string\n    \tName   string\n    }\n    \n    //Class 班级\n    type Class struct {\n    \tTitle    string\n    \tStudents []*Student\n    }\n    \n    func main() {\n    \tc := &Class{\n    \t\tTitle:    "101",\n    \t\tStudents: make([]*Student, 0, 200),\n    \t}\n    \tfor i := 0; i < 10; i++ {\n    \t\tstu := &Student{\n    \t\t\tName:   fmt.Sprintf("stu%02d", i),\n    \t\t\tGender: "男",\n    \t\t\tID:     i,\n    \t\t}\n    \t\tc.Students = append(c.Students, stu)\n    \t}\n    \t//JSON序列化：结构体--\x3eJSON格式的字符串\n    \tdata, err := json.Marshal(c)\n    \tif err != nil {\n    \t\tfmt.Println("json marshal failed")\n    \t\treturn\n    \t}\n    \tfmt.Printf("json:%s\\n", data)\n    \t//JSON反序列化：JSON格式的字符串--\x3e结构体\n    \tstr := `{"Title":"101","Students":[{"ID":0,"Gender":"男","Name":"stu00"},{"ID":1,"Gender":"男","Name":"stu01"},{"ID":2,"Gender":"男","Name":"stu02"},{"ID":3,"Gender":"男","Name":"stu03"},{"ID":4,"Gender":"男","Name":"stu04"},{"ID":5,"Gender":"男","Name":"stu05"},{"ID":6,"Gender":"男","Name":"stu06"},{"ID":7,"Gender":"男","Name":"stu07"},{"ID":8,"Gender":"男","Name":"stu08"},{"ID":9,"Gender":"男","Name":"stu09"}]}`\n    \tc1 := &Class{}\n    \terr = json.Unmarshal([]byte(str), c1)\n    \tif err != nil {\n    \t\tfmt.Println("json unmarshal failed!")\n    \t\treturn\n    \t}\n    \tfmt.Printf("%#v\\n", c1)\n    }\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br"),a("span",{staticClass:"line-number"},[s._v("26")]),a("br"),a("span",{staticClass:"line-number"},[s._v("27")]),a("br"),a("span",{staticClass:"line-number"},[s._v("28")]),a("br"),a("span",{staticClass:"line-number"},[s._v("29")]),a("br"),a("span",{staticClass:"line-number"},[s._v("30")]),a("br"),a("span",{staticClass:"line-number"},[s._v("31")]),a("br"),a("span",{staticClass:"line-number"},[s._v("32")]),a("br"),a("span",{staticClass:"line-number"},[s._v("33")]),a("br"),a("span",{staticClass:"line-number"},[s._v("34")]),a("br"),a("span",{staticClass:"line-number"},[s._v("35")]),a("br"),a("span",{staticClass:"line-number"},[s._v("36")]),a("br"),a("span",{staticClass:"line-number"},[s._v("37")]),a("br"),a("span",{staticClass:"line-number"},[s._v("38")]),a("br"),a("span",{staticClass:"line-number"},[s._v("39")]),a("br"),a("span",{staticClass:"line-number"},[s._v("40")]),a("br"),a("span",{staticClass:"line-number"},[s._v("41")]),a("br"),a("span",{staticClass:"line-number"},[s._v("42")]),a("br"),a("span",{staticClass:"line-number"},[s._v("43")]),a("br")])]),a("h3",{attrs:{id:"结构体标签-tag"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#结构体标签-tag"}},[s._v("#")]),s._v(" 结构体标签（Tag）")]),s._v(" "),a("p",[a("code",[s._v("Tag")]),s._v("是结构体的元信息，可以在运行的时候通过反射的机制读取出来。 "),a("code",[s._v("Tag")]),s._v("在结构体字段的后方定义，由一对"),a("strong",[s._v("反引号")]),s._v("包裹起来，具体的格式如下：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('    `key1:"value1" key2:"value2"`\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("结构体tag由一个或多个键值对组成。键与值使用冒号分隔，值用双引号括起来。同一个结构体字段可以设置多个键值对tag，不同的键值对之间使用空格分隔。")]),s._v(" "),a("p",[a("strong",[s._v("注意事项：")]),s._v(" 为结构体编写"),a("code",[s._v("Tag")]),s._v("时，必须严格遵守键值对的规则。结构体标签的解析代码的容错能力很差，一旦格式写错，编译和运行时都不会提示任何错误，通过反射也无法正确取值。例如不要在key和value之间添加空格。")]),s._v(" "),a("p",[s._v("例如我们为"),a("code",[s._v("Student")]),s._v("结构体的每个字段定义json序列化时使用的Tag：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('    //Student 学生\n    type Student struct {\n    \tID     int    `json:"id"` //通过指定tag实现json序列化该字段时的key\n    \tGender string //json序列化是默认使用字段名作为key\n    \tname   string //私有不能被json包访问\n    }\n    \n    func main() {\n    \ts1 := Student{\n    \t\tID:     1,\n    \t\tGender: "男",\n    \t\tname:   "沙河娜扎",\n    \t}\n    \tdata, err := json.Marshal(s1)\n    \tif err != nil {\n    \t\tfmt.Println("json marshal failed!")\n    \t\treturn\n    \t}\n    \tfmt.Printf("json str:%s\\n", data) //json str:{"id":1,"Gender":"男"}\n    }\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br")])]),a("h3",{attrs:{id:"结构体和方法补充知识点"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#结构体和方法补充知识点"}},[s._v("#")]),s._v(" 结构体和方法补充知识点")]),s._v(" "),a("p",[s._v("因为slice和map这两种数据类型都包含了指向底层数据的指针，因此我们在需要复制它们时要特别注意。我们来看下面的例子：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('    type Person struct {\n    \tname   string\n    \tage    int8\n    \tdreams []string\n    }\n    \n    func (p *Person) SetDreams(dreams []string) {\n    \tp.dreams = dreams\n    }\n    \n    func main() {\n    \tp1 := Person{name: "小王子", age: 18}\n    \tdata := []string{"吃饭", "睡觉", "打豆豆"}\n    \tp1.SetDreams(data)\n    \n    \t// 你真的想要修改 p1.dreams 吗？\n    \tdata[1] = "不睡觉"\n    \tfmt.Println(p1.dreams)  // ?\n    }\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br")])]),a("p",[s._v("正确的做法是在方法中使用传入的slice的拷贝进行结构体赋值。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("    func (p *Person) SetDreams(dreams []string) {\n    \tp.dreams = make([]string, len(dreams))\n    \tcopy(p.dreams, dreams)\n    }\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br")])]),a("p",[s._v("同样的问题也存在于返回值slice和map的情况，在实际编码过程中一定要注意这个问题。")]),s._v(" "),a("h2",{attrs:{id:"练习题"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#练习题"}},[s._v("#")]),s._v(" 练习题")]),s._v(" "),a("ol",[a("li",[s._v("使用“面向对象”的思维方式编写一个学生信息管理系统。\n"),a("ol",[a("li",[s._v("学生有id、姓名、年龄、分数等信息")]),s._v(" "),a("li",[s._v("程序提供展示学生列表、添加学生、编辑学生信息、删除学生等功能")])])])])])}),[],!1,null,null,null);n.default=e.exports}}]);