(window.webpackJsonp=window.webpackJsonp||[]).push([[619],{1316:function(e,t,n){"use strict";n.r(t);var i=n(5),a=Object(i.a)({},(function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[n("h1",{attrs:{id:"java中的13个原子操作类"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#java中的13个原子操作类"}},[e._v("#")]),e._v(" Java中的13个原子操作类")]),e._v(" "),n("p",[e._v("当程序更新一个变量时，如果多线程同时更新这个变量，可能得到期望之外的值，比如变量i=1，A线程更新i+1，B线程也更新i+1，经过两个线程操作之后可能i不等于3，而是等于2。因为A和B线程在更新变量i的时候拿到的i都是1，这就是线程不安全的更新操作，通常我们会使用synchronized来解决这个问题，synchronized会保证多线程不会同时更新变量i。")]),e._v(" "),n("p",[e._v("而Java从JDK 1.5开始提供了java.util.concurrent.atomic包（以下简称Atomic包），这个包中的原子操作类提供了一种用法简单、性能高效、线程安全地更新一个变量的方式。")]),e._v(" "),n("p",[e._v("因为变量的类型有很多种，所以在Atomic包里一共提供了13个类，属于4种类型的原子更新方式，分别是原子更新基本类型、原子更新数组、原子更新引用和原子更新属性（字段）。Atomic包里的类基本都是使用Unsafe实现的包装类。")]),e._v(" "),n("h2",{attrs:{id:"原子更新基本类型类"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#原子更新基本类型类"}},[e._v("#")]),e._v(" 原子更新基本类型类")]),e._v(" "),n("p",[e._v("使用原子的方式更新基本类型，Atomic包提供了以下3个类。"),n("br"),e._v("\n·AtomicBoolean：原子更新布尔类型。"),n("br"),e._v("\n·AtomicInteger：原子更新整型。"),n("br"),e._v("\n·AtomicLong：原子更新长整型。")]),e._v(" "),n("p",[e._v("以上3个类提供的方法几乎一模一样，所以本节仅以AtomicInteger为例进行讲解，AtomicInteger的常用方法如下。")]),e._v(" "),n("p",[e._v("·int addAndGet（int delta）：以原子方式将输入的数值与实例中的值（AtomicInteger里的value）相加，并返回结果。")]),e._v(" "),n("p",[e._v("·boolean compareAndSet（int expect，int update）：如果输入的数值等于预期值，则以原子方式将该值设置为输入的值。")]),e._v(" "),n("p",[e._v("·int getAndIncrement()：以原子方式将当前值加1，注意，这里返回的是自增前的值。")]),e._v(" "),n("p",[e._v("·void lazySet（int newValue）：最终会设置成newValue，使用lazySet设置值后，可能导致其他线程在之后的一小段时间内还是可以读到旧的值。")]),e._v(" "),n("p",[e._v("·int getAndSet（int newValue）：以原子方式设置为newValue的值，并返回旧值。")]),e._v(" "),n("h2",{attrs:{id:"原子更新数组"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#原子更新数组"}},[e._v("#")]),e._v(" 原子更新数组")]),e._v(" "),n("p",[e._v("通过原子的方式更新数组里的某个元素，Atomic包提供了以下4个类。"),n("br"),e._v("\n·AtomicIntegerArray：原子更新整型数组里的元素。"),n("br"),e._v("\n·AtomicLongArray：原子更新长整型数组里的元素。"),n("br"),e._v("\n·AtomicReferenceArray：原子更新引用类型数组里的元素。")]),e._v(" "),n("p",[e._v("·AtomicIntegerArray类主要是提供原子的方式更新数组里的整型，其常用方法如下。"),n("br"),e._v("\n​ ·int addAndGet（int i，int delta）：以原子方式将输入值与数组中索引i的元素相加。"),n("br"),e._v("\n​ ·boolean compareAndSet（int i，int expect，int update）：如果当前值等于预期值，则以原子方式将数组位置i的元素设置成update值。")]),e._v(" "),n("p",[e._v("以上几个类提供的方法几乎一样，所以本节仅以AtomicIntegerArray为例进行讲解")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[e._v("public class AtomicIntegerArrayTest{\n    static int[] value = new int[]{1,2};\n    static AtomicIntegerArray ai = new AtomicIntegerArray(value);\n    public static void main(String[] args) {\n        ai.getAndSet(0,3);\n        System.out.println(ai.get(0));\n        System.out.println(value[0]);\n    }\n}\n\n3\n1\n")])])]),n("p",[e._v("需要注意的是，数组value通过构造方法传递进去，然后AtomicIntegerArray会将当前数组复制一份，所以当AtomicIntegerArray对内部的数组元素进行修改时，不会影响传入的数组。")]),e._v(" "),n("h2",{attrs:{id:"原子更新引用类型"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#原子更新引用类型"}},[e._v("#")]),e._v(" 原子更新引用类型")]),e._v(" "),n("p",[e._v("原子更新基本类型的AtomicInteger，只能更新一个变量，如果要原子更新多个变量，就需要使用这个原子更新引用类型提供的类。Atomic包提供了以下3个类。")]),e._v(" "),n("p",[e._v("·AtomicReference：原子更新引用类型。")]),e._v(" "),n("p",[e._v("·AtomicReferenceFieldUpdater：原子更新引用类型里的字段。")]),e._v(" "),n("p",[e._v("·AtomicMarkableReference：原子更新带有标记位的引用类型。可以原子更新一个布尔类型的标记位和引用类型。构造方法是AtomicMarkableReference（V initialRef，booleaninitialMark）。")]),e._v(" "),n("p",[e._v("以上几个类提供的方法几乎一样，所以本节仅以AtomicReference为例进行讲解，AtomicReference的使用示例代码如代码清单7-5所示。")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[e._v('public class AtomicReferenceTest {\n    public static AtomicReference<User> atomicUserRef = new AtomicReference<>();\n\n    public static void main(String[] args) {\n        User conan = new User("conan", 15);\n        atomicUserRef.set(conan);\n        User shinichi = new User("Shinichi", 17);\n        atomicUserRef.compareAndSet(conan, shinichi);\n        System.out.println(atomicUserRef.get().getName());\n        System.out.println(atomicUserRef.get().getOld());\n    }\n\n    static class User{\n        private String name;\n        private int old;\n\n        public User(String name, int old) {\n            this.name = name;\n            this.old = old;\n        }\n\n        public String getName() {\n            return name;\n        }\n\n        public int getOld() {\n            return old;\n        }\n    }\n}\n')])])]),n("h2",{attrs:{id:"原子更新字段类"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#原子更新字段类"}},[e._v("#")]),e._v(" 原子更新字段类")]),e._v(" "),n("p",[e._v("如果需原子地更新某个类里的某个字段时，就需要使用原子更新字段类，Atomic包提供"),n("br"),e._v("\n了以下3个类进行原子字段更新。"),n("br"),e._v("\n·AtomicIntegerFieldUpdater：原子更新整型的字段的更新器。"),n("br"),e._v("\n·AtomicLongFieldUpdater：原子更新长整型字段的更新器。"),n("br"),e._v("\n·AtomicStampedReference：原子更新带有版本号的引用类型。该类将整数值与引用关联起来，可用于原子的更新数据和数据的版本号，可以解决使用CAS进行原子更新时可能出现的ABA问题。")]),e._v(" "),n("p",[e._v("要想原子地更新字段类需要两步。第一步，因为原子更新字段类都是抽象类，每次使用的时候必须使用静态方法newUpdater()创建一个更新器，并且需要设置想要更新的类和属性。第二步，更新类的字段（属性）必须使用public volatile修饰符。")]),e._v(" "),n("p",[e._v("以上3个类提供的方法几乎一样，所以本节仅以AstomicIntegerFieldUpdater为例进行讲解，"),n("br"),e._v("\nAstomicIntegerFieldUpdater的示例代码如代码清单7-6所示。")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[e._v('public class AtomicIntegerFieldUpdaterTest {\n\n    private static AtomicIntegerFieldUpdater<User> a = AtomicIntegerFieldUpdater.newUpdater(User.class, "old");\n\n    public static void main(String[] args) {\n        User conan = new User("conan", 10);\n        System.out.println(a.getAndIncrement(conan));\n        System.out.println(a.get(conan));\n\n    }\n    static class User{\n        private String name;\n        public volatile int old;\n\n        public User(String name, int old) {\n            this.name = name;\n            this.old = old;\n        }\n\n        public String getName() {\n            return name;\n        }\n\n        public int getOld() {\n            return old;\n        }\n    }\n}')])])])])}),[],!1,null,null,null);t.default=a.exports}}]);