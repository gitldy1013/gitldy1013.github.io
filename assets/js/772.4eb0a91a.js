(window.webpackJsonp=window.webpackJsonp||[]).push([[772],{1468:function(t,r,e){"use strict";e.r(r);var a=e(5),s=Object(a.a)({},(function(){var t=this,r=t.$createElement,e=t._self._c||r;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"重载和重写的区别"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#重载和重写的区别"}},[t._v("#")]),t._v(" 重载和重写的区别")]),t._v(" "),e("h2",{attrs:{id:"重载-overload"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#重载-overload"}},[t._v("#")]),t._v(" 重载 Overload")]),t._v(" "),e("p",[t._v("表示同一个类中可以有多个名称相同的方法，但这些方法的参数列表各不相同（即参数个数或类型不同）。")]),t._v(" "),e("h2",{attrs:{id:"重写-override"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#重写-override"}},[t._v("#")]),t._v(" 重写 Override")]),t._v(" "),e("p",[t._v("表示子类中的方法可以与父类中的某个方法的名称和参数完全相同，通过子类创建的实例对象调用这个方法时，将调用子类中的定义方法，这相当于把父类中定义的那个完全相同的方法给覆盖了，这也是面向对象编程的多态性的一种表现。子类覆盖父类的方法时，只能比父类抛出更少的异常，或者是抛出父类抛出的异常的子异常，因为子类可以解决父类的一些问题，不能比父类有更多的问题。子类方法的访问权限只能比父类的更大，不能更小。如果父类的方法是private类型，那么，子类则不存在覆盖的限制，相当于子类中增加了一个全新的方法。")])])}),[],!1,null,null,null);r.default=s.exports}}]);