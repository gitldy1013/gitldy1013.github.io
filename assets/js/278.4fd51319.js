(window.webpackJsonp=window.webpackJsonp||[]).push([[278],{975:function(s,n,a){"use strict";a.r(n);var t=a(5),i=Object(t.a)({},(function(){var s=this,n=s.$createElement,a=s._self._c||n;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("h1",{attrs:{id:"动态规划问题"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#动态规划问题"}},[s._v("#")]),s._v(" 动态规划问题")]),s._v(" "),a("h2",{attrs:{id:"应用场景"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#应用场景"}},[s._v("#")]),s._v(" 应用场景")]),s._v(" "),a("p",[s._v("背包问题：有个背包，初始容量为4磅，现有如下物品")]),s._v(" "),a("p",[s._v("0 - 1背包问题，转入的商品不能重复")]),s._v(" "),a("table",[a("thead",[a("tr",[a("th",[s._v("物品")]),s._v(" "),a("th",[s._v("重量")]),s._v(" "),a("th",[s._v("价格")])])]),s._v(" "),a("tbody",[a("tr",[a("td",[s._v("吉他")]),s._v(" "),a("td",[s._v("1")]),s._v(" "),a("td",[s._v("1500")])]),s._v(" "),a("tr",[a("td",[s._v("音箱")]),s._v(" "),a("td",[s._v("4")]),s._v(" "),a("td",[s._v("3000")])]),s._v(" "),a("tr",[a("td",[s._v("电脑")]),s._v(" "),a("td",[s._v("3")]),s._v(" "),a("td",[s._v("2000")])])])]),s._v(" "),a("p",[s._v("1）要求达到的目标为装入的背包的总价值最大，并且重量不能超过")]),s._v(" "),a("p",[s._v("2）要求装入物品不能重复")]),s._v(" "),a("h2",{attrs:{id:"动态规划算法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#动态规划算法"}},[s._v("#")]),s._v(" 动态规划算法")]),s._v(" "),a("h3",{attrs:{id:"概念"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#概念"}},[s._v("#")]),s._v(" 概念")]),s._v(" "),a("ul",[a("li",[s._v("动态规划（DynamicProgramming）算法的核心思想是：将大问题划分成小问题进行解决，从而一步步获取最优解的处理算法")]),s._v(" "),a("li",[s._v("动态规划算法与分治法类似，其基本思想也是将带求解问题，分解成若干个子问题，先求解子问题，然后从这些子问题的解得到原问题的解")]),s._v(" "),a("li",[s._v("与分治法不同的是，适合于用动态规划求解的问题，经分解得到子问题往往不是互相独立的，（即下一个子阶段的求解是建立在上一个子阶段的解的基础上，进行进一步求解）")]),s._v(" "),a("li",[s._v("动态规划可以通过填表的方式来逐步推进，得到最优解")])]),s._v(" "),a("h3",{attrs:{id:"求解-0-1背包问题"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#求解-0-1背包问题"}},[s._v("#")]),s._v(" 求解 0-1背包问题")]),s._v(" "),a("ul",[a("li",[s._v("背包问题主要指一个给定容量的背包、若干具有一定价值和重量的物品，如何选择物品放入背包使得物品价值最大，其中又分为01背包和完全背包（完全背包指的是：每个物品都是无限件可用）")]),s._v(" "),a("li",[s._v("这里的问题属于01背包问题，即每个物品最多放一个，而无限背包可以转回成01背包问题")])]),s._v(" "),a("h3",{attrs:{id:"主要思想"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#主要思想"}},[s._v("#")]),s._v(" 主要思想")]),s._v(" "),a("p",[s._v("算法的主要思想，利用动态规划来解决，每次遍历到第i个物品，根据 w[i] 和 v[i] 来确定是否需要将该物品放入背包中，即对于给定的n个物品，设v[i] 、w[i]分别为第i个物品的价值和重量，C为背包的容量。再令v[i] [j] 表示前i个物品中能够装入容量为j的背包中的最大价值，则我们有下面的结果。")]),s._v(" "),a("ul",[a("li",[s._v("v[i] [0] = v[0] [j] = 0")]),s._v(" "),a("li",[s._v("当w[i] > j 时：v[i] [j] = v[i - 1] [j]")]),s._v(" "),a("li",[s._v("当 j >= w[i]时：v[i] [j]  = max {v[i - 1] [j] , v[i - 1] [j - w[i]] + v[i]}")])]),s._v(" "),a("h3",{attrs:{id:"思路推导图"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#思路推导图"}},[s._v("#")]),s._v(" 思路推导图")]),s._v(" "),a("p",[s._v("使用填表法")]),s._v(" "),a("p",[s._v("解决类似的问题可以分解成一个个的小问题进行解决，假设存在背包容量大小为1,2,3,4 的各种容量的背包（分配容量的规则为最小重量的整数倍）")]),s._v(" "),a("ul",[a("li",[s._v("假设现在只有吉他（G），这时候不管背包容量有多大，只能放一个吉他 1500（G）")]),s._v(" "),a("li",[s._v("假设现在有 吉他 和 音箱S，那么在 0 - 3 磅的时候，只能放吉他，当为4磅的时候，能放入音箱")]),s._v(" "),a("li")]),s._v(" "),a("table",[a("thead",[a("tr",[a("th",[s._v("物品")]),s._v(" "),a("th",[s._v("0磅")]),s._v(" "),a("th",[s._v("1磅")]),s._v(" "),a("th",[s._v("2磅")]),s._v(" "),a("th",[s._v("3磅")]),s._v(" "),a("th",[s._v("4磅")])])]),s._v(" "),a("tbody",[a("tr",[a("td"),s._v(" "),a("td",[s._v("0")]),s._v(" "),a("td",[s._v("0")]),s._v(" "),a("td",[s._v("0")]),s._v(" "),a("td",[s._v("0")]),s._v(" "),a("td",[s._v("0")])]),s._v(" "),a("tr",[a("td",[s._v("吉他G（重量1, 价值1500）")]),s._v(" "),a("td",[s._v("0")]),s._v(" "),a("td",[s._v("1500(G)")]),s._v(" "),a("td",[s._v("1500(G)")]),s._v(" "),a("td",[s._v("1500(G)")]),s._v(" "),a("td",[s._v("1500(G)")])]),s._v(" "),a("tr",[a("td",[s._v("音箱S（重量4, 价值3000）")]),s._v(" "),a("td",[s._v("0")]),s._v(" "),a("td",[s._v("1500(G)")]),s._v(" "),a("td",[s._v("1500(G)")]),s._v(" "),a("td",[s._v("1500(G)")]),s._v(" "),a("td",[s._v("3000(S)")])]),s._v(" "),a("tr",[a("td",[s._v("电脑L（重量3, 价值2000）")]),s._v(" "),a("td",[s._v("0")]),s._v(" "),a("td",[s._v("1500(G)")]),s._v(" "),a("td",[s._v("1500(G)")]),s._v(" "),a("td",[s._v("2000（L）")]),s._v(" "),a("td",[s._v("3500（G，L）")])])])]),s._v(" "),a("p",[s._v("这个时候，就得到了公式")]),s._v(" "),a("ul",[a("li",[s._v("v[i] [0] = v[0] [j] = 0\n"),a("ul",[a("li",[s._v("表示第一行和第一列为0")])])]),s._v(" "),a("li",[s._v("当w[i] > j 时：v[i] [j] = v[i - 1] [j]\n"),a("ul",[a("li",[s._v("当我们装入新增的商品，它的容量大于当前背包的容量时，就直接使用上一个单元格的装入策略")])])]),s._v(" "),a("li",[s._v("当 j >= w[i]时：v[i] [j]  = max {v[i - 1] [j] ,  v[i] + v[i - 1] [j - w[i]] }\n"),a("ul",[a("li",[s._v("当准备新增的商品的容量小于等于当前背包的容量，装入的方式，应该是求一个最大值")]),s._v(" "),a("li",[s._v("v[i-1] [j]：表示上一个单元格的装入的最大值")]),s._v(" "),a("li",[s._v("v[i]：表示当前商品的价值")]),s._v(" "),a("li",[s._v("v[i -1] [j - w[i]]：装入i-1商品，到剩余空间的最大值")])])])]),s._v(" "),a("p",[s._v("验证公式1")]),s._v(" "),a("ul",[a("li",[s._v("v[i] [j]  = 1500")]),s._v(" "),a("li",[s._v("i = 1, j = 1")]),s._v(" "),a("li",[s._v("w[i]  = w[1] = 1")]),s._v(" "),a("li",[s._v("j >= w[i] ，满足第三个条件")]),s._v(" "),a("li",[s._v("v[i] [j] = max { v[0] [1], val[1]+ v[0] [0] } = max { 0 , 1500 + 0}  = 1500")])]),s._v(" "),a("p",[s._v("验证公式2")]),s._v(" "),a("ul",[a("li",[s._v("v[3] [4] = 3500")]),s._v(" "),a("li",[s._v("i = 3, j = 4")]),s._v(" "),a("li",[s._v("w[i] = w[3] = 3")]),s._v(" "),a("li",[s._v("j = 4 >= w[i] ， max { v[2] [4],  v[3] + v[2] [1] } = max {3000 , 2000 + 1500 }  = 3500")])]),s._v(" "),a("h2",{attrs:{id:"代码实现"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#代码实现"}},[s._v("#")]),s._v(" 代码实现")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('/**\n * 动态规划\n * 解决 0-1背包问题\n *\n * @author: 陌溪\n * @create: 2020-04-18-15:00\n */\npublic class DynamicProgramming {\n    public static void main(String[] args) {\n        // 物品的重量\n        int w [] = {1, 4, 3};\n\n        // 物品的价值\n        int val [] = {1500, 3000, 2000};\n\n        // 背包的容量\n        int m = 4;\n\n        // 物品的个数\n        int n = val.length;\n\n        // 创建二维数组  v[i][j] 表示在前i个物品中，可以装入容量为j的背包中的商品最大值\n        int [][] v = new int[n+1][m+1];\n\n        // 为了记录放入商品的情况，我们定义一个二维数组\n        int [][] path = new int[n+1][m+1];\n\n        // 初始化第一行  和 第一列，这里在本程序中可以不去处理，因为数组默认就是0\n        for(int i = 0; i<v.length; i++) {\n            v[i][0] = 0;\n        }\n        for(int j = 0; j<v[0].length; j++) {\n            v[0][j] = 0;\n        }\n\n        // 根据前面的公式，来进行动态规划\n        for(int i=1; i<v.length; i++) {\n            // 不处理第一行 和 第一列\n            for(int j=1; j<v[0].length; j++) {\n                // 公式\n                if(w[i-1] > j) {\n                    v[i][j] = v[i-1][j];\n                } else {\n                    // 因为我们的i从1开始的，因此公式需要调整成 i -> i-1\n//                     v[i][j] = Math.max(v[i-1][j], val[i-1] + v[i-1][j - w[i -1]]);\n\n                    // 为了记录商品存放的背包的情况，我们不能直接的使用上面的公式，需要使用if else来体现公式\n                    if(v[i-1][j] < (val[i-1] + v[i-1][j - w[i -1]])) {\n                        v[i][j] = (val[i-1] + v[i-1][j - w[i -1]]);\n                        // 把当前的情况记录到path\n                        path[i][j] = 1;\n                    } else {\n                        v[i][j] = v[i-1][j];\n                    }\n                }\n            }\n        }\n\n        // 输出一下\n        for(int i = 0; i< v.length; i++) {\n            for(int j = 0; j<v[0].length; j++) {\n                System.out.print(v[i][j] + " ");\n            }\n            System.out.println("");\n        }\n\n        // 输出最后我们是放入的那些商品\n        // 这样遍历，会把所有放入情况都用到，其实我们只需要最后的放入情况\n//        for(int i = 0; i< path.length; i++) {\n//            for(int j = 0; j<path[0].length; j++) {\n//                if(path[i][j] == 1) {\n//                    System.out.print(i + " ");\n//                }\n//            }\n//        }\n\n        // 求出最后的一个点\n        int i = path.length -1;\n        int j = path[0].length -1;\n        // 从path的最后开始查找\n        while (i> 0 && j>0) {\n            if(path[i][j] == 1) {\n                System.out.print(i + " ");\n                j -= w[i-1];\n            }\n            // 找到一个 i需要减1\n            i --;\n        }\n    }\n}\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br"),a("span",{staticClass:"line-number"},[s._v("26")]),a("br"),a("span",{staticClass:"line-number"},[s._v("27")]),a("br"),a("span",{staticClass:"line-number"},[s._v("28")]),a("br"),a("span",{staticClass:"line-number"},[s._v("29")]),a("br"),a("span",{staticClass:"line-number"},[s._v("30")]),a("br"),a("span",{staticClass:"line-number"},[s._v("31")]),a("br"),a("span",{staticClass:"line-number"},[s._v("32")]),a("br"),a("span",{staticClass:"line-number"},[s._v("33")]),a("br"),a("span",{staticClass:"line-number"},[s._v("34")]),a("br"),a("span",{staticClass:"line-number"},[s._v("35")]),a("br"),a("span",{staticClass:"line-number"},[s._v("36")]),a("br"),a("span",{staticClass:"line-number"},[s._v("37")]),a("br"),a("span",{staticClass:"line-number"},[s._v("38")]),a("br"),a("span",{staticClass:"line-number"},[s._v("39")]),a("br"),a("span",{staticClass:"line-number"},[s._v("40")]),a("br"),a("span",{staticClass:"line-number"},[s._v("41")]),a("br"),a("span",{staticClass:"line-number"},[s._v("42")]),a("br"),a("span",{staticClass:"line-number"},[s._v("43")]),a("br"),a("span",{staticClass:"line-number"},[s._v("44")]),a("br"),a("span",{staticClass:"line-number"},[s._v("45")]),a("br"),a("span",{staticClass:"line-number"},[s._v("46")]),a("br"),a("span",{staticClass:"line-number"},[s._v("47")]),a("br"),a("span",{staticClass:"line-number"},[s._v("48")]),a("br"),a("span",{staticClass:"line-number"},[s._v("49")]),a("br"),a("span",{staticClass:"line-number"},[s._v("50")]),a("br"),a("span",{staticClass:"line-number"},[s._v("51")]),a("br"),a("span",{staticClass:"line-number"},[s._v("52")]),a("br"),a("span",{staticClass:"line-number"},[s._v("53")]),a("br"),a("span",{staticClass:"line-number"},[s._v("54")]),a("br"),a("span",{staticClass:"line-number"},[s._v("55")]),a("br"),a("span",{staticClass:"line-number"},[s._v("56")]),a("br"),a("span",{staticClass:"line-number"},[s._v("57")]),a("br"),a("span",{staticClass:"line-number"},[s._v("58")]),a("br"),a("span",{staticClass:"line-number"},[s._v("59")]),a("br"),a("span",{staticClass:"line-number"},[s._v("60")]),a("br"),a("span",{staticClass:"line-number"},[s._v("61")]),a("br"),a("span",{staticClass:"line-number"},[s._v("62")]),a("br"),a("span",{staticClass:"line-number"},[s._v("63")]),a("br"),a("span",{staticClass:"line-number"},[s._v("64")]),a("br"),a("span",{staticClass:"line-number"},[s._v("65")]),a("br"),a("span",{staticClass:"line-number"},[s._v("66")]),a("br"),a("span",{staticClass:"line-number"},[s._v("67")]),a("br"),a("span",{staticClass:"line-number"},[s._v("68")]),a("br"),a("span",{staticClass:"line-number"},[s._v("69")]),a("br"),a("span",{staticClass:"line-number"},[s._v("70")]),a("br"),a("span",{staticClass:"line-number"},[s._v("71")]),a("br"),a("span",{staticClass:"line-number"},[s._v("72")]),a("br"),a("span",{staticClass:"line-number"},[s._v("73")]),a("br"),a("span",{staticClass:"line-number"},[s._v("74")]),a("br"),a("span",{staticClass:"line-number"},[s._v("75")]),a("br"),a("span",{staticClass:"line-number"},[s._v("76")]),a("br"),a("span",{staticClass:"line-number"},[s._v("77")]),a("br"),a("span",{staticClass:"line-number"},[s._v("78")]),a("br"),a("span",{staticClass:"line-number"},[s._v("79")]),a("br"),a("span",{staticClass:"line-number"},[s._v("80")]),a("br"),a("span",{staticClass:"line-number"},[s._v("81")]),a("br"),a("span",{staticClass:"line-number"},[s._v("82")]),a("br"),a("span",{staticClass:"line-number"},[s._v("83")]),a("br"),a("span",{staticClass:"line-number"},[s._v("84")]),a("br"),a("span",{staticClass:"line-number"},[s._v("85")]),a("br"),a("span",{staticClass:"line-number"},[s._v("86")]),a("br"),a("span",{staticClass:"line-number"},[s._v("87")]),a("br"),a("span",{staticClass:"line-number"},[s._v("88")]),a("br"),a("span",{staticClass:"line-number"},[s._v("89")]),a("br"),a("span",{staticClass:"line-number"},[s._v("90")]),a("br")])]),a("p",[s._v("输出结果")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("0 0 0 0 0 \n0 1500 1500 1500 1500 \n0 1500 1500 1500 3000 \n0 1500 1500 2000 3500 \n3 1 \n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br")])])])}),[],!1,null,null,null);n.default=i.exports}}]);