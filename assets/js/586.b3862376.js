(window.webpackJsonp=window.webpackJsonp||[]).push([[586],{1282:function(s,a,n){"use strict";n.r(a);var t=n(5),e=Object(t.a)({},(function(){var s=this,a=s.$createElement,n=s._self._c||a;return n("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[n("h1",{attrs:{id:"接口-interface-定义了一个对象的行为规范-只定义规范不实现-由具体的对象来实现规范的细节。"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#接口-interface-定义了一个对象的行为规范-只定义规范不实现-由具体的对象来实现规范的细节。"}},[s._v("#")]),s._v(" 接口（interface）定义了一个对象的行为规范，只定义规范不实现，由具体的对象来实现规范的细节。")]),s._v(" "),n("h2",{attrs:{id:"接口"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#接口"}},[s._v("#")]),s._v(" 接口")]),s._v(" "),n("h3",{attrs:{id:"接口类型"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#接口类型"}},[s._v("#")]),s._v(" 接口类型")]),s._v(" "),n("p",[s._v("在Go语言中接口（interface）是一种类型，一种抽象的类型。")]),s._v(" "),n("p",[n("code",[s._v("interface")]),s._v("是一组"),n("code",[s._v("method")]),s._v("的集合，是"),n("code",[s._v("duck-type programming")]),s._v("的一种体现。接口做的事情就像是定义一个协议（规则），只要一台机器有洗衣服和甩干的功能，我就称它为洗衣机。不关心属性（数据），只关心行为（方法）。")]),s._v(" "),n("p",[s._v("为了保护你的Go语言职业生涯，请牢记接口（interface）是一种类型。")]),s._v(" "),n("h3",{attrs:{id:"为什么要使用接口"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#为什么要使用接口"}},[s._v("#")]),s._v(" 为什么要使用接口")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('    type Cat struct{}\n    \n    func (c Cat) Say() string { return "喵喵喵" }\n    \n    type Dog struct{}\n    \n    func (d Dog) Say() string { return "汪汪汪" }\n    \n    func main() {\n    \tc := Cat{}\n    \tfmt.Println("猫:", c.Say())\n    \td := Dog{}\n    \tfmt.Println("狗:", d.Say())\n    }\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br")])]),n("p",[s._v("上面的代码中定义了猫和狗，然后它们都会叫，你会发现main函数中明显有重复的代码，如果我们后续再加上猪、青蛙等动物的话，我们的代码还会一直重复下去。那我们能不能把它们当成“能叫的动物”来处理呢？")]),s._v(" "),n("p",[s._v("像类似的例子在我们编程过程中会经常遇到：")]),s._v(" "),n("p",[s._v("比如一个网上商城可能使用支付宝、微信、银联等方式去在线支付，我们能不能把它们当成“支付方式”来处理呢？")]),s._v(" "),n("p",[s._v("比如三角形，四边形，圆形都能计算周长和面积，我们能不能把它们当成“图形”来处理呢？")]),s._v(" "),n("p",[s._v("比如销售、行政、程序员都能计算月薪，我们能不能把他们当成“员工”来处理呢？")]),s._v(" "),n("p",[s._v("Go语言中为了解决类似上面的问题，就设计了接口这个概念。接口区别于我们之前所有的具体类型，接口是一种抽象的类型。当你看到一个接口类型的值时，你不知道它是什么，唯一知道的是通过它的方法能做什么。")]),s._v(" "),n("h3",{attrs:{id:"接口的定义"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#接口的定义"}},[s._v("#")]),s._v(" 接口的定义")]),s._v(" "),n("p",[s._v("Go语言提倡面向接口编程。")]),s._v(" "),n("p",[s._v("每个接口由数个方法组成，接口的定义格式如下：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("    type 接口类型名 interface{\n        方法名1( 参数列表1 ) 返回值列表1\n        方法名2( 参数列表2 ) 返回值列表2\n        …\n    }\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br")])]),n("p",[s._v("其中：")]),s._v(" "),n("ul",[n("li",[s._v("接口名：使用"),n("code",[s._v("type")]),s._v("将接口定义为自定义的类型名。Go语言的接口在命名时，一般会在单词后面添加"),n("code",[s._v("er")]),s._v("，如有写操作的接口叫"),n("code",[s._v("Writer")]),s._v("，有字符串功能的接口叫"),n("code",[s._v("Stringer")]),s._v("等。接口名最好要能突出该接口的类型含义。")]),s._v(" "),n("li",[s._v("方法名：当方法名首字母是大写且这个接口类型名首字母也是大写时，这个方法可以被接口所在的包（package）之外的代码访问。")]),s._v(" "),n("li",[s._v("参数列表、返回值列表：参数列表和返回值列表中的参数变量名可以省略。")])]),s._v(" "),n("p",[s._v("举个例子：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("    type writer interface{\n        Write([]byte) error\n    }\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br")])]),n("p",[s._v("当你看到这个接口类型的值时，你不知道它是什么，唯一知道的就是可以通过它的Write方法来做一些事情。")]),s._v(" "),n("h3",{attrs:{id:"实现接口的条件"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#实现接口的条件"}},[s._v("#")]),s._v(" 实现接口的条件")]),s._v(" "),n("p",[s._v("一个对象只要全部实现了接口中的方法，那么就实现了这个接口。换句话说，接口就是一个"),n("strong",[s._v("需要实现的方法列表")]),s._v("。")]),s._v(" "),n("p",[s._v("我们来定义一个"),n("code",[s._v("Sayer")]),s._v("接口：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("    // Sayer 接口\n    type Sayer interface {\n    \tsay()\n    }\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br")])]),n("p",[s._v("定义"),n("code",[s._v("dog")]),s._v("和"),n("code",[s._v("cat")]),s._v("两个结构体：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("    type dog struct {}\n    \n    type cat struct {}\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br")])]),n("p",[s._v("因为"),n("code",[s._v("Sayer")]),s._v("接口里只有一个"),n("code",[s._v("say")]),s._v("方法，所以我们只需要给"),n("code",[s._v("dog")]),s._v("和"),n("code",[s._v("cat")]),s._v(" 分别实现"),n("code",[s._v("say")]),s._v("方法就可以实现"),n("code",[s._v("Sayer")]),s._v("接口了。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('    // dog实现了Sayer接口\n    func (d dog) say() {\n    \tfmt.Println("汪汪汪")\n    }\n    \n    // cat实现了Sayer接口\n    func (c cat) say() {\n    \tfmt.Println("喵喵喵")\n    }\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br")])]),n("p",[s._v("接口的实现就是这么简单，只要实现了接口中的所有方法，就实现了这个接口。")]),s._v(" "),n("h3",{attrs:{id:"接口类型变量"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#接口类型变量"}},[s._v("#")]),s._v(" 接口类型变量")]),s._v(" "),n("p",[s._v("那实现了接口有什么用呢？")]),s._v(" "),n("p",[s._v("接口类型变量能够存储所有实现了该接口的实例。 例如上面的示例中，"),n("code",[s._v("Sayer")]),s._v("类型的变量能够存储"),n("code",[s._v("dog")]),s._v("和"),n("code",[s._v("cat")]),s._v("类型的变量。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("    func main() {\n    \tvar x Sayer // 声明一个Sayer类型的变量x\n    \ta := cat{}  // 实例化一个cat\n    \tb := dog{}  // 实例化一个dog\n    \tx = a       // 可以把cat实例直接赋值给x\n    \tx.say()     // 喵喵喵\n    \tx = b       // 可以把dog实例直接赋值给x\n    \tx.say()     // 汪汪汪\n    }\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br")])]),n("p",[n("strong",[s._v("Tips：")]),s._v(" 观察下面的代码，体味此处"),n("code",[s._v("_")]),s._v("的妙用")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("    // 摘自gin框架routergroup.go\n    type IRouter interface{ ... }\n    \n    type RouterGroup struct { ... }\n    \n    var _ IRouter = &RouterGroup{}  // 确保RouterGroup实现了接口IRouter\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br")])]),n("h3",{attrs:{id:"值接收者和指针接收者实现接口的区别"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#值接收者和指针接收者实现接口的区别"}},[s._v("#")]),s._v(" 值接收者和指针接收者实现接口的区别")]),s._v(" "),n("p",[s._v("使用值接收者实现接口和使用指针接收者实现接口有什么区别呢？接下来我们通过一个例子看一下其中的区别。")]),s._v(" "),n("p",[s._v("我们有一个"),n("code",[s._v("Mover")]),s._v("接口和一个"),n("code",[s._v("dog")]),s._v("结构体。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("    type Mover interface {\n    \tmove()\n    }\n    \n    type dog struct {}\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br")])]),n("h4",{attrs:{id:"值接收者实现接口"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#值接收者实现接口"}},[s._v("#")]),s._v(" 值接收者实现接口")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('    func (d dog) move() {\n    \tfmt.Println("狗会动")\n    }\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br")])]),n("p",[s._v("此时实现接口的是"),n("code",[s._v("dog")]),s._v("类型：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("    func main() {\n    \tvar x Mover\n    \tvar wangcai = dog{} // 旺财是dog类型\n    \tx = wangcai         // x可以接收dog类型\n    \tvar fugui = &dog{}  // 富贵是*dog类型\n    \tx = fugui           // x可以接收*dog类型\n    \tx.move()\n    }\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br")])]),n("p",[s._v("从上面的代码中我们可以发现，使用值接收者实现接口之后，不管是dog结构体还是结构体指针*dog类型的变量都可以赋值给该接口变量。因为Go语言中有对指针类型变量求值的语法糖，dog指针"),n("code",[s._v("fugui")]),s._v("内部会自动求值"),n("code",[s._v("*fugui")]),s._v("。")]),s._v(" "),n("h4",{attrs:{id:"指针接收者实现接口"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#指针接收者实现接口"}},[s._v("#")]),s._v(" 指针接收者实现接口")]),s._v(" "),n("p",[s._v("同样的代码我们再来测试一下使用指针接收者有什么区别：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('    func (d *dog) move() {\n    \tfmt.Println("狗会动")\n    }\n    func main() {\n    \tvar x Mover\n    \tvar wangcai = dog{} // 旺财是dog类型\n    \tx = wangcai         // x不可以接收dog类型\n    \tvar fugui = &dog{}  // 富贵是*dog类型\n    \tx = fugui           // x可以接收*dog类型\n    }\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br")])]),n("p",[s._v("此时实现"),n("code",[s._v("Mover")]),s._v("接口的是"),n("code",[s._v("*dog")]),s._v("类型，所以不能给"),n("code",[s._v("x")]),s._v("传入"),n("code",[s._v("dog")]),s._v("类型的wangcai，此时x只能存储"),n("code",[s._v("*dog")]),s._v("类型的值。")]),s._v(" "),n("h4",{attrs:{id:"面试题"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#面试题"}},[s._v("#")]),s._v(" 面试题")]),s._v(" "),n("p",[s._v("**注意：**这是一道你需要回答“能”或者“不能”的题！")]),s._v(" "),n("p",[s._v("首先请观察下面的这段代码，然后请回答这段代码能不能通过编译？")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('    type People interface {\n    \tSpeak(string) string\n    }\n    \n    type Student struct{}\n    \n    func (stu *Student) Speak(think string) (talk string) {\n    \tif think == "sb" {\n    \t\ttalk = "你是个大帅比"\n    \t} else {\n    \t\ttalk = "您好"\n    \t}\n    \treturn\n    }\n    \n    func main() {\n    \tvar peo People = Student{}\n    \tthink := "bitch"\n    \tfmt.Println(peo.Speak(think))\n    }\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br")])]),n("h3",{attrs:{id:"类型与接口的关系"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#类型与接口的关系"}},[s._v("#")]),s._v(" 类型与接口的关系")]),s._v(" "),n("h4",{attrs:{id:"一个类型实现多个接口"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#一个类型实现多个接口"}},[s._v("#")]),s._v(" 一个类型实现多个接口")]),s._v(" "),n("p",[s._v("一个类型可以同时实现多个接口，而接口间彼此独立，不知道对方的实现。 例如，狗可以叫，也可以动。我们就分别定义Sayer接口和Mover接口，如下： "),n("code",[s._v("Mover")]),s._v("接口。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("    // Sayer 接口\n    type Sayer interface {\n    \tsay()\n    }\n    \n    // Mover 接口\n    type Mover interface {\n    \tmove()\n    }\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br")])]),n("p",[s._v("dog既可以实现Sayer接口，也可以实现Mover接口。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('    type dog struct {\n    \tname string\n    }\n    \n    // 实现Sayer接口\n    func (d dog) say() {\n    \tfmt.Printf("%s会叫汪汪汪\\n", d.name)\n    }\n    \n    // 实现Mover接口\n    func (d dog) move() {\n    \tfmt.Printf("%s会动\\n", d.name)\n    }\n    \n    func main() {\n    \tvar x Sayer\n    \tvar y Mover\n    \n    \tvar a = dog{name: "旺财"}\n    \tx = a\n    \ty = a\n    \tx.say()\n    \ty.move()\n    }\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br"),n("span",{staticClass:"line-number"},[s._v("23")]),n("br"),n("span",{staticClass:"line-number"},[s._v("24")]),n("br")])]),n("h4",{attrs:{id:"多个类型实现同一接口"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#多个类型实现同一接口"}},[s._v("#")]),s._v(" 多个类型实现同一接口")]),s._v(" "),n("p",[s._v("Go语言中不同的类型还可以实现同一接口 首先我们定义一个"),n("code",[s._v("Mover")]),s._v("接口，它要求必须由一个"),n("code",[s._v("move")]),s._v("方法。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("    // Mover 接口\n    type Mover interface {\n    \tmove()\n    }\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br")])]),n("p",[s._v("例如狗可以动，汽车也可以动，可以使用如下代码实现这个关系：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('    type dog struct {\n    \tname string\n    }\n    \n    type car struct {\n    \tbrand string\n    }\n    \n    // dog类型实现Mover接口\n    func (d dog) move() {\n    \tfmt.Printf("%s会跑\\n", d.name)\n    }\n    \n    // car类型实现Mover接口\n    func (c car) move() {\n    \tfmt.Printf("%s速度70迈\\n", c.brand)\n    }\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br")])]),n("p",[s._v("这个时候我们在代码中就可以把狗和汽车当成一个会动的物体来处理了，不再需要关注它们具体是什么，只需要调用它们的"),n("code",[s._v("move")]),s._v("方法就可以了。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('    func main() {\n    \tvar x Mover\n    \tvar a = dog{name: "旺财"}\n    \tvar b = car{brand: "保时捷"}\n    \tx = a\n    \tx.move()\n    \tx = b\n    \tx.move()\n    }\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br")])]),n("p",[s._v("上面的代码执行结果如下：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("    旺财会跑\n    保时捷速度70迈\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br")])]),n("p",[s._v("并且一个接口的方法，不一定需要由一个类型完全实现，接口的方法可以通过在类型中嵌入其他类型或者结构体来实现。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('    // WashingMachine 洗衣机\n    type WashingMachine interface {\n    \twash()\n    \tdry()\n    }\n    \n    // 甩干器\n    type dryer struct{}\n    \n    // 实现WashingMachine接口的dry()方法\n    func (d dryer) dry() {\n    \tfmt.Println("甩一甩")\n    }\n    \n    // 海尔洗衣机\n    type haier struct {\n    \tdryer //嵌入甩干器\n    }\n    \n    // 实现WashingMachine接口的wash()方法\n    func (h haier) wash() {\n    \tfmt.Println("洗刷刷")\n    }\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br"),n("span",{staticClass:"line-number"},[s._v("23")]),n("br")])]),n("h3",{attrs:{id:"接口嵌套"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#接口嵌套"}},[s._v("#")]),s._v(" 接口嵌套")]),s._v(" "),n("p",[s._v("接口与接口间可以通过嵌套创造出新的接口。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("    // Sayer 接口\n    type Sayer interface {\n    \tsay()\n    }\n    \n    // Mover 接口\n    type Mover interface {\n    \tmove()\n    }\n    \n    // 接口嵌套\n    type animal interface {\n    \tSayer\n    \tMover\n    }\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br")])]),n("p",[s._v("嵌套得到的接口的使用与普通接口一样，这里我们让cat实现animal接口：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('    type cat struct {\n    \tname string\n    }\n    \n    func (c cat) say() {\n    \tfmt.Println("喵喵喵")\n    }\n    \n    func (c cat) move() {\n    \tfmt.Println("猫会动")\n    }\n    \n    func main() {\n    \tvar x animal\n    \tx = cat{name: "花花"}\n    \tx.move()\n    \tx.say()\n    }\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br")])]),n("h3",{attrs:{id:"空接口"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#空接口"}},[s._v("#")]),s._v(" 空接口")]),s._v(" "),n("h4",{attrs:{id:"空接口的定义"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#空接口的定义"}},[s._v("#")]),s._v(" 空接口的定义")]),s._v(" "),n("p",[s._v("空接口是指没有定义任何方法的接口。因此任何类型都实现了空接口。")]),s._v(" "),n("p",[s._v("空接口类型的变量可以存储任意类型的变量。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('    func main() {\n    \t// 定义一个空接口x\n    \tvar x interface{}\n    \ts := "Hello 沙河"\n    \tx = s\n    \tfmt.Printf("type:%T value:%v\\n", x, x)\n    \ti := 100\n    \tx = i\n    \tfmt.Printf("type:%T value:%v\\n", x, x)\n    \tb := true\n    \tx = b\n    \tfmt.Printf("type:%T value:%v\\n", x, x)\n    }\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br")])]),n("h4",{attrs:{id:"空接口的应用"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#空接口的应用"}},[s._v("#")]),s._v(" 空接口的应用")]),s._v(" "),n("h5",{attrs:{id:"空接口作为函数的参数"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#空接口作为函数的参数"}},[s._v("#")]),s._v(" 空接口作为函数的参数")]),s._v(" "),n("p",[s._v("使用空接口实现可以接收任意类型的函数参数。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('    // 空接口作为函数参数\n    func show(a interface{}) {\n    \tfmt.Printf("type:%T value:%v\\n", a, a)\n    }\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br")])]),n("h5",{attrs:{id:"空接口作为map的值"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#空接口作为map的值"}},[s._v("#")]),s._v(" 空接口作为map的值")]),s._v(" "),n("p",[s._v("使用空接口实现可以保存任意值的字典。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('    // 空接口作为map值\n    \tvar studentInfo = make(map[string]interface{})\n    \tstudentInfo["name"] = "沙河娜扎"\n    \tstudentInfo["age"] = 18\n    \tstudentInfo["married"] = false\n    \tfmt.Println(studentInfo)\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br")])]),n("h3",{attrs:{id:"类型断言"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#类型断言"}},[s._v("#")]),s._v(" 类型断言")]),s._v(" "),n("p",[s._v("空接口可以存储任意类型的值，那我们如何获取其存储的具体数据呢？")]),s._v(" "),n("h4",{attrs:{id:"接口值"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#接口值"}},[s._v("#")]),s._v(" 接口值")]),s._v(" "),n("p",[s._v("一个接口的值（简称接口值）是由"),n("code",[s._v("一个具体类型")]),s._v("和"),n("code",[s._v("具体类型的值")]),s._v("两部分组成的。这两部分分别称为接口的"),n("code",[s._v("动态类型")]),s._v("和"),n("code",[s._v("动态值")]),s._v("。")]),s._v(" "),n("p",[s._v("我们来看一个具体的例子：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("    var w io.Writer\n    w = os.Stdout\n    w = new(bytes.Buffer)\n    w = nil\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br")])]),n("p",[s._v("请看下图分解： "),n("img",{attrs:{src:"/go_img/interface.png",alt:"接口值图解"}})]),s._v(" "),n("p",[s._v("想要判断空接口中的值这个时候就可以使用类型断言，其语法格式：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("    x.(T)\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br")])]),n("p",[s._v("其中：")]),s._v(" "),n("ul",[n("li",[s._v("x：表示类型为"),n("code",[s._v("interface{}")]),s._v("的变量")]),s._v(" "),n("li",[s._v("T：表示断言"),n("code",[s._v("x")]),s._v("可能是的类型。")])]),s._v(" "),n("p",[s._v("该语法返回两个参数，第一个参数是"),n("code",[s._v("x")]),s._v("转化为"),n("code",[s._v("T")]),s._v("类型后的变量，第二个值是一个布尔值，若为"),n("code",[s._v("true")]),s._v("则表示断言成功，为"),n("code",[s._v("false")]),s._v("则表示断言失败。")]),s._v(" "),n("p",[s._v("举个例子：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('    func main() {\n    \tvar x interface{}\n    \tx = "Hello 沙河"\n    \tv, ok := x.(string)\n    \tif ok {\n    \t\tfmt.Println(v)\n    \t} else {\n    \t\tfmt.Println("类型断言失败")\n    \t}\n    }\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br")])]),n("p",[s._v("上面的示例中如果要断言多次就需要写多个"),n("code",[s._v("if")]),s._v("判断，这个时候我们可以使用"),n("code",[s._v("switch")]),s._v("语句来实现：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('    func justifyType(x interface{}) {\n    \tswitch v := x.(type) {\n    \tcase string:\n    \t\tfmt.Printf("x is a string，value is %v\\n", v)\n    \tcase int:\n    \t\tfmt.Printf("x is a int is %v\\n", v)\n    \tcase bool:\n    \t\tfmt.Printf("x is a bool is %v\\n", v)\n    \tdefault:\n    \t\tfmt.Println("unsupport type！")\n    \t}\n    }\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br")])]),n("p",[s._v("因为空接口可以存储任意类型值的特点，所以空接口在Go语言中的使用十分广泛。")]),s._v(" "),n("p",[s._v("关于接口需要注意的是，只有当有两个或两个以上的具体类型必须以相同的方式进行处理时才需要定义接口。不要为了接口而写接口，那样只会增加不必要的抽象，导致不必要的运行时损耗。")]),s._v(" "),n("h2",{attrs:{id:"练习题"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#练习题"}},[s._v("#")]),s._v(" 练习题")]),s._v(" "),n("p",[s._v("使用接口的方式实现一个既可以往终端写日志也可以往文件写日志的简易日志库。")])])}),[],!1,null,null,null);a.default=e.exports}}]);