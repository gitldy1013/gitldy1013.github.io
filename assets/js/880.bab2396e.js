(window.webpackJsonp=window.webpackJsonp||[]).push([[880],{1576:function(s,a,e){"use strict";e.r(a);var t=e(5),n=Object(t.a)({},(function(){var s=this,a=s.$createElement,e=s._self._c||a;return e("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[e("h1",{attrs:{id:"thymeleaf-常用语法"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#thymeleaf-常用语法"}},[s._v("#")]),s._v(" Thymeleaf 常用语法")]),s._v(" "),e("h2",{attrs:{id:"引入-thymeleaf"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#引入-thymeleaf"}},[s._v("#")]),s._v(" 引入 Thymeleaf")]),s._v(" "),e("p",[s._v("修改 html 标签用于引入 thymeleaf 引擎，这样才可以在其他标签里使用 "),e("code",[s._v("th:*")]),s._v(" 语法，这是下面语法的前提。")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v('    <!DOCTYPE html SYSTEM "http://www.thymeleaf.org/dtd/xhtml1-strict-thymeleaf-spring4-4.dtd">\n    <html xmlns="http://www.w3.org/1999/xhtml" xmlns:th="http://www.thymeleaf.org">\n')])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br")])]),e("h2",{attrs:{id:"获取变量值"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#获取变量值"}},[s._v("#")]),s._v(" 获取变量值")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("    <p th:text=\"'Hello！, ' + ${name} + '!'\" >name</p>\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br")])]),e("p",[s._v("可以看出获取变量值用 "),e("code",[s._v("$")]),s._v(" 符号,对于javaBean的话使用 "),e("code",[s._v("变量名.属性名")]),s._v(" 方式获取,这点和 "),e("code",[s._v("EL")]),s._v(" 表达式一样.")]),s._v(" "),e("p",[s._v("另外 "),e("code",[s._v("$")]),s._v(" 表达式只能写在th标签内部,不然不会生效,上面例子就是使用 "),e("code",[s._v("th:text")]),s._v(" 标签的值替换 "),e("code",[s._v("p")]),s._v(" 标签里面的值,至于 "),e("code",[s._v("p")]),s._v(" 里面的原有的值只是为了给前端开发时做展示用的.这样的话很好的做到了前后端分离.")]),s._v(" "),e("h2",{attrs:{id:"引入-url"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#引入-url"}},[s._v("#")]),s._v(" 引入 URL")]),s._v(" "),e("p",[s._v("Thymeleaf 对于 URL 的处理是通过语法 "),e("code",[s._v("@{…}")]),s._v(" 来处理的")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v('    <a th:href="@{http://www.baidu.com}">绝对路径</a>\n    <a th:href="@{/}">相对路径</a>\n    <a th:href="@{css/bootstrap.min.css}">Content路径,默认访问static下的css文件夹</a>\n')])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br")])]),e("p",[s._v("类似的标签有:"),e("code",[s._v("th:href")]),s._v(" 和 "),e("code",[s._v("th:src")])]),s._v(" "),e("h1",{attrs:{id:"字符串替换"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#字符串替换"}},[s._v("#")]),s._v(" 字符串替换")]),s._v(" "),e("p",[s._v("很多时候可能我们只需要对一大段文字中的某一处地方进行替换，可以通过字符串拼接操作完成：")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("    <span th:text=\"'Welcome to our application, ' + ${user.name} + '!'\">\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br")])]),e("p",[s._v("一种更简洁的方式是：")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v('    <span th:text="|Welcome to our application, ${user.name}!|">\n')])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br")])]),e("p",[s._v("当然这种形式限制比较多，|…|中只能包含变量表达式${…}，不能包含其他常量、条件表达式等。")]),s._v(" "),e("h2",{attrs:{id:"运算符"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#运算符"}},[s._v("#")]),s._v(" 运算符")]),s._v(" "),e("p",[s._v("在表达式中可以使用各类算术运算符，例如+, -, *, /, %")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v('    th:with="isEven=(${prodStat.count} % 2 == 0)"\n')])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br")])]),e("p",[s._v("逻辑运算符>, <, <=,>=，==,!=都可以使用，唯一需要注意的是使用<,>时需要用它的HTML转义符：")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("    th:if=\"${prodStat.count} &gt; 1\"\n    th:text=\"'Execution mode is ' + ( (${execMode} == 'dev')? 'Development' : 'Production')\"\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br")])]),e("h2",{attrs:{id:"条件"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#条件"}},[s._v("#")]),s._v(" 条件")]),s._v(" "),e("h3",{attrs:{id:"if-unless"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#if-unless"}},[s._v("#")]),s._v(" if/unless")]),s._v(" "),e("p",[s._v("Thymeleaf 中使用 "),e("code",[s._v("th:if")]),s._v(" 和 "),e("code",[s._v("th:unless")]),s._v(" 属性进行条件判断，下面的例子中，标签只有在 "),e("code",[s._v("th:if")]),s._v(" 中条件成立时才显示：")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v('    <a th:href="@{/login}" th:unless=${session.user != null}>Login</a>\n')])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br")])]),e("p",[e("code",[s._v("th:unless")]),s._v(" 于 "),e("code",[s._v("th:if")]),s._v(" 恰好相反，只有表达式中的条件不成立，才会显示其内容。")]),s._v(" "),e("h3",{attrs:{id:"switch"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#switch"}},[s._v("#")]),s._v(" switch")]),s._v(" "),e("p",[s._v("Thymeleaf 同样支持多路选择 Switch 结构：")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v('    <div th:switch="${user.role}">\n      <p th:case="\'admin\'">User is an administrator</p>\n      <p th:case="#{roles.manager}">User is a manager</p>\n    </div>\n')])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br")])]),e("p",[s._v("默认属性 default 可以用 * 表示：")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v('    <div th:switch="${user.role}">\n      <p th:case="\'admin\'">User is an administrator</p>\n      <p th:case="#{roles.manager}">User is a manager</p>\n      <p th:case="*">User is some other thing</p>\n    </div>\n')])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br")])]),e("h2",{attrs:{id:"循环"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#循环"}},[s._v("#")]),s._v(" 循环")]),s._v(" "),e("p",[s._v("渲染列表数据是一种非常常见的场景，例如现在有 n 条记录需要渲染成一个表格，该数据集合必须是可以遍历的，使用 "),e("code",[s._v("th:each")]),s._v(" 标签：")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v('    <body>\n      <h1>Product list</h1>\n    \n      <table>\n        <tr>\n          <th>NAME</th>\n          <th>PRICE</th>\n          <th>IN STOCK</th>\n        </tr>\n        <tr th:each="prod : ${prods}">\n          <td th:text="${prod.name}">Onions</td>\n          <td th:text="${prod.price}">2.41</td>\n          <td th:text="${prod.inStock}? #{true} : #{false}">yes</td>\n        </tr>\n      </table>\n    \n      <p>\n        <a href="../home.html" th:href="@{/}">Return to home</a>\n      </p>\n    </body>\n')])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br"),e("span",{staticClass:"line-number"},[s._v("16")]),e("br"),e("span",{staticClass:"line-number"},[s._v("17")]),e("br"),e("span",{staticClass:"line-number"},[s._v("18")]),e("br"),e("span",{staticClass:"line-number"},[s._v("19")]),e("br"),e("span",{staticClass:"line-number"},[s._v("20")]),e("br")])]),e("p",[s._v("可以看到，需要在被循环渲染的元素（这里是）中加入 "),e("code",[s._v("th:each")]),s._v(" 标签，其中 "),e("code",[s._v('th:each="prod : ${prods}"')]),s._v(" 意味着对集合变量 "),e("code",[s._v("prods")]),s._v(" 进行遍历，循环变量是 "),e("code",[s._v("prod")]),s._v(" 在循环体中可以通过表达式访问。")])])}),[],!1,null,null,null);a.default=n.exports}}]);