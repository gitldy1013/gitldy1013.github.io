(window.webpackJsonp=window.webpackJsonp||[]).push([[579],{1274:function(s,a,t){"use strict";t.r(a);var n=t(5),e=Object(n.a)({},(function(){var s=this,a=s.$createElement,t=s._self._c||a;return t("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[t("h1",{attrs:{id:"在工程化的go语言开发项目中-go语言的源码复用是建立在包-package-基础之上的。本文介绍了go语言中如何定义包、如何导出包的内容及如何导入其他包。"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#在工程化的go语言开发项目中-go语言的源码复用是建立在包-package-基础之上的。本文介绍了go语言中如何定义包、如何导出包的内容及如何导入其他包。"}},[s._v("#")]),s._v(" 在工程化的Go语言开发项目中，Go语言的源码复用是建立在包（package）基础之上的。本文介绍了Go语言中如何定义包、如何导出包的内容及如何导入其他包。")]),s._v(" "),t("h2",{attrs:{id:"go语言的包-package"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#go语言的包-package"}},[s._v("#")]),s._v(" Go语言的包（package）")]),s._v(" "),t("h3",{attrs:{id:"包介绍"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#包介绍"}},[s._v("#")]),s._v(" 包介绍")]),s._v(" "),t("p",[t("code",[s._v("包（package）")]),s._v("是多个Go源码的集合，是一种高级的代码复用方案，Go语言为我们提供了很多内置包，如"),t("code",[s._v("fmt")]),s._v("、"),t("code",[s._v("os")]),s._v("、"),t("code",[s._v("io")]),s._v("等。")]),s._v(" "),t("h3",{attrs:{id:"定义包"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#定义包"}},[s._v("#")]),s._v(" 定义包")]),s._v(" "),t("p",[s._v("我们还可以根据自己的需要创建自己的包。一个包可以简单理解为一个存放"),t("code",[s._v(".go")]),s._v("文件的文件夹。 该文件夹下面的所有go文件都要在代码的第一行添加如下代码，声明该文件归属的包。")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("    package 包名\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[s._v("注意事项：")]),s._v(" "),t("ul",[t("li",[s._v("一个文件夹下面直接包含的文件只能归属一个"),t("code",[s._v("package")]),s._v("，同样一个"),t("code",[s._v("package")]),s._v("的文件不能在多个文件夹下。")]),s._v(" "),t("li",[s._v("包名可以不和文件夹的名字一样，包名不能包含 "),t("code",[s._v("-")]),s._v(" 符号。")]),s._v(" "),t("li",[s._v("包名为"),t("code",[s._v("main")]),s._v("的包为应用程序的入口包，这种包编译后会得到一个可执行文件，而编译不包含"),t("code",[s._v("main")]),s._v("包的源代码则不会得到可执行文件。")])]),s._v(" "),t("h3",{attrs:{id:"可见性"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#可见性"}},[s._v("#")]),s._v(" 可见性")]),s._v(" "),t("p",[s._v("如果想在一个包中引用另外一个包里的标识符（如变量、常量、类型、函数等）时，该标识符必须是对外可见的（public）。在Go语言中只需要将标识符的首字母大写就可以让标识符对外可见了。")]),s._v(" "),t("p",[s._v("举个例子， 我们定义一个包名为"),t("code",[s._v("pkg2")]),s._v("的包，代码如下：")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v('    package pkg2\n    \n    import "fmt"\n    \n    // 包变量可见性\n    \n    var a = 100 // 首字母小写，外部包不可见，只能在当前包内使用\n    \n    // 首字母大写外部包可见，可在其他包中使用\n    const Mode = 1\n    \n    type person struct { // 首字母小写，外部包不可见，只能在当前包内使用\n    \tname string\n    }\n    \n    // 首字母大写，外部包可见，可在其他包中使用\n    func Add(x, y int) int {\n    \treturn x + y\n    }\n    \n    func age() { // 首字母小写，外部包不可见，只能在当前包内使用\n    \tvar Age = 18 // 函数局部变量，外部包不可见，只能在当前函数内使用\n    \tfmt.Println(Age)\n    }\n')])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br"),t("span",{staticClass:"line-number"},[s._v("19")]),t("br"),t("span",{staticClass:"line-number"},[s._v("20")]),t("br"),t("span",{staticClass:"line-number"},[s._v("21")]),t("br"),t("span",{staticClass:"line-number"},[s._v("22")]),t("br"),t("span",{staticClass:"line-number"},[s._v("23")]),t("br"),t("span",{staticClass:"line-number"},[s._v("24")]),t("br")])]),t("p",[s._v("结构体中的字段名和接口中的方法名如果首字母都是大写，外部包可以访问这些字段和方法。例如：")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("    type Student struct {\n    \tName  string //可在包外访问的方法\n    \tclass string //仅限包内访问的字段\n    }\n    \n    type Payer interface {\n    \tinit() //仅限包内访问的方法\n    \tPay()  //可在包外访问的方法\n    }\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br")])]),t("h3",{attrs:{id:"包的导入"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#包的导入"}},[s._v("#")]),s._v(" 包的导入")]),s._v(" "),t("p",[s._v("要在代码中引用其他包的内容，需要使用"),t("code",[s._v("import")]),s._v("关键字导入使用的包。具体语法如下:")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v('    import "包的路径"\n')])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[s._v("注意事项：")]),s._v(" "),t("ul",[t("li",[s._v("import导入语句通常放在文件开头包声明语句的下面。")]),s._v(" "),t("li",[s._v("导入的包名需要使用双引号包裹起来。")]),s._v(" "),t("li",[s._v("包名是从"),t("code",[s._v("$GOPATH/src/")]),s._v("后开始计算的，使用"),t("code",[s._v("/")]),s._v("进行路径分隔。")]),s._v(" "),t("li",[s._v("Go语言中禁止循环导入包。")])]),s._v(" "),t("h3",{attrs:{id:"单行导入"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#单行导入"}},[s._v("#")]),s._v(" 单行导入")]),s._v(" "),t("p",[s._v("单行导入的格式如下：")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v('    import "包1"\n    import "包2"\n')])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br")])]),t("h3",{attrs:{id:"多行导入"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#多行导入"}},[s._v("#")]),s._v(" 多行导入")]),s._v(" "),t("p",[s._v("多行导入的格式如下：")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v('    import (\n        "包1"\n        "包2"\n    )\n')])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br")])]),t("h3",{attrs:{id:"自定义包名"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#自定义包名"}},[s._v("#")]),s._v(" 自定义包名")]),s._v(" "),t("p",[s._v("在导入包名的时候，我们还可以为导入的包设置别名。通常用于导入的包名太长或者导入的包名冲突的情况。具体语法格式如下：")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v('    import 别名 "包的路径"\n')])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[s._v("单行导入方式定义别名：")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v('    import "fmt"\n    import m "github.com/Q1mi/studygo/pkg_test"\n    \n    func main() {\n    \tfmt.Println(m.Add(100, 200))\n    \tfmt.Println(m.Mode)\n    }\n')])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br")])]),t("p",[s._v("多行导入方式定义别名：")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v('    import (\n        "fmt"\n        m "github.com/Q1mi/studygo/pkg_test"\n     )\n    \n    func main() {\n    \tfmt.Println(m.Add(100, 200))\n    \tfmt.Println(m.Mode)\n    }\n')])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br")])]),t("h3",{attrs:{id:"匿名导入包"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#匿名导入包"}},[s._v("#")]),s._v(" 匿名导入包")]),s._v(" "),t("p",[s._v("如果只希望导入包，而不使用包内部的数据时，可以使用匿名导入包。具体的格式如下：")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v('    import _ "包的路径"\n')])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[s._v("匿名导入的包与其他方式导入的包一样都会被编译到可执行文件中。")]),s._v(" "),t("h3",{attrs:{id:"init-初始化函数"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#init-初始化函数"}},[s._v("#")]),s._v(" init()初始化函数")]),s._v(" "),t("h4",{attrs:{id:"init-函数介绍"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#init-函数介绍"}},[s._v("#")]),s._v(" init()函数介绍")]),s._v(" "),t("p",[s._v("在Go语言程序执行时导入包语句会自动触发包内部"),t("code",[s._v("init()")]),s._v("函数的调用。需要注意的是： "),t("code",[s._v("init()")]),s._v("函数没有参数也没有返回值。 "),t("code",[s._v("init()")]),s._v("函数在程序运行时自动被调用执行，不能在代码中主动调用它。")]),s._v(" "),t("p",[s._v("包初始化执行的顺序如下图所示： "),t("img",{attrs:{src:"/go_img/init01.png",alt:"包中的init()执行时机"}})]),s._v(" "),t("h4",{attrs:{id:"init-函数执行顺序"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#init-函数执行顺序"}},[s._v("#")]),s._v(" init()函数执行顺序")]),s._v(" "),t("p",[s._v("Go语言包会从"),t("code",[s._v("main")]),s._v("包开始检查其导入的所有包，每个包中又可能导入了其他的包。Go编译器由此构建出一个树状的包引用关系，再根据引用顺序决定编译顺序，依次编译这些包的代码。")]),s._v(" "),t("p",[s._v("在运行时，被最后导入的包会最先初始化并调用其"),t("code",[s._v("init()")]),s._v("函数， 如下图示： "),t("img",{attrs:{src:"/go_img/init02.png",alt:"包之间的init()执行顺序"}})]),s._v(" "),t("h2",{attrs:{id:"练习题"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#练习题"}},[s._v("#")]),s._v(" 练习题")]),s._v(" "),t("ol",[t("li",[s._v("编写一个"),t("code",[s._v("calc")]),s._v("包实现加减乘除四个功能函数，在"),t("code",[s._v("snow")]),s._v("这个包中导入并使用加减乘除四个函数实现数学运算。")])])])}),[],!1,null,null,null);a.default=e.exports}}]);