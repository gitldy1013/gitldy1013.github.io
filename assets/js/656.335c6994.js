(window.webpackJsonp=window.webpackJsonp||[]).push([[656],{1352:function(r,e,n){"use strict";n.r(e);var t=n(5),o=Object(t.a)({},(function(){var r=this,e=r.$createElement,n=r._self._c||e;return n("ContentSlotsDistributor",{attrs:{"slot-key":r.$parent.slotKey}},[n("h1",{attrs:{id:"spring-ioc-如何实现"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#spring-ioc-如何实现"}},[r._v("#")]),r._v(" Spring IOC 如何实现")]),r._v(" "),n("ul",[n("li",[r._v("Spring 中的 "),n("code",[r._v("org.springframework.beans")]),r._v(" 包和 "),n("code",[r._v("org.springframework.context")]),r._v(" 包构成了 Spring 框架 IoC 容器的基础。")]),r._v(" "),n("li",[r._v("BeanFactory 接口提供了一个先进的配置机制，使得任何类型的对象的配置成为可能。ApplicationContext 接口对 BeanFactory（是一个子接口）进行了扩展，在 BeanFactory 的基础上添加了其他功能，比如与 Spring 的 AOP 更容易集成，也提供了处理 message resource 的机制（用于国际化）、事件传播以及应用层的特别配置，比如针对 Web 应用的 WebApplicationContext。")]),r._v(" "),n("li",[n("code",[r._v("org.springframework.beans.factory.BeanFactory")]),r._v(" 是 Spring IoC 容器的具体实现，用来包装和管理前面提到的各种 bean。BeanFactory 接口是 Spring IoC 容器的核心接口。")])])])}),[],!1,null,null,null);e.default=o.exports}}]);