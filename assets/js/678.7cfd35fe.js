(window.webpackJsonp=window.webpackJsonp||[]).push([[678],{1375:function(t,e,s){"use strict";s.r(e);var n=s(5),r=Object(n.a)({},(function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"乐观锁的业务场景及实现方式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#乐观锁的业务场景及实现方式"}},[t._v("#")]),t._v(" 乐观锁的业务场景及实现方式")]),t._v(" "),s("p",[t._v("乐观锁（Optimistic Lock）：")]),t._v(" "),s("ul",[s("li",[t._v("每次获取数据的时候，都不会担心数据被修改，所以每次获取数据的时候都不会进行加锁，但是在更新数据的时候需要判断该数据是否被别人修改过。如果数据被其他线程修改，则不进行数据更新，如果数据没有被其他线程修改，则进行数据更新。由于数据没有进行加锁，期间该数据可以被其他线程进行读写操作。")]),t._v(" "),s("li",[t._v("比较适合读取操作比较频繁的场景，如果出现大量的写入操作，数据发生冲突的可能性就会增大，为了保证数据的一致性，应用层需要不断的重新获取数据，这样会增加大量的查询操作，降低了系统的吞吐量。")])])])}),[],!1,null,null,null);e.default=r.exports}}]);