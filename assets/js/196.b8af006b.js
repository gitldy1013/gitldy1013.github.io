(window.webpackJsonp=window.webpackJsonp||[]).push([[196],{893:function(s,e,n){"use strict";n.r(e);var r=n(5),a=Object(r.a)({},(function(){var s=this,e=s.$createElement,n=s._self._c||e;return n("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[n("h1",{attrs:{id:"使用axios拦截器携带token以及跳转错误页面"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#使用axios拦截器携带token以及跳转错误页面"}},[s._v("#")]),s._v(" 使用Axios拦截器携带token以及跳转错误页面")]),s._v(" "),n("h2",{attrs:{id:"前言"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#前言"}},[s._v("#")]),s._v(" 前言")]),s._v(" "),n("p",[s._v("Axios 是一个基于 promise 的 HTTP 库，可以用在浏览器和 node.js 中，在使用Axios时候，一般我们会进行一定的封装，Axios拦截器分为请求拦截器 和 相应拦截器，请求拦截器主要的作用是在请求后端接口前，携带Token信息，而响应拦截器的主要作用是对后端的状态码进行校验，跳转到对应的页面")]),s._v(" "),n("h2",{attrs:{id:"创建axios对象"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#创建axios对象"}},[s._v("#")]),s._v(" 创建Axios对象")]),s._v(" "),n("p",[s._v("这里主要就是填写baseURL 以及 超时时间 timeout")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("import axios from 'axios'\n\n// 创建axios实例\nconst service = axios.create({\n  baseURL: '', // api 的 base_url\n  timeout: 10000 // 请求超时时间 10秒\n})\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br")])]),n("h2",{attrs:{id:"request拦截器"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#request拦截器"}},[s._v("#")]),s._v(" Request拦截器")]),s._v(" "),n("p",[s._v("即请求拦截器，我们在请求后端接口的时候，将token放入请求头中")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('// request拦截器\nservice.interceptors.request.use(\n  config => {\n    if (getCookie("token") != undefined) {\n      config.headers.Authorization = getCookie("token") // 让每个请求携带自定义token 请根据实际情况自行修改\n    }\n    return config\n  },\n  error => {\n    // Do something with request error\n    console.log(error) // for debug\n    Promise.reject(error)\n  }\n)\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br")])]),n("h2",{attrs:{id:"response拦截器"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#response拦截器"}},[s._v("#")]),s._v(" Response拦截器")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("service.interceptors.response.use(\n  response => {\n    // return response.data\n    const res = response.data\n    if (res.code === 'success' || res.code === 'error') {\n      return res\n    } else if (res.code === 401 || res.code === 400) {\n      console.log('返回错误内容', res)\n      router.push('404')\n      return res\n    } else if (res.code === 500) {\n      return Promise.reject('error')\n    }\n  },\n  error => {\n    // 出现网络超时\n    router.push('401')\n    return Promise.reject(error)\n  }\n)\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br")])]),n("p",[s._v("在响应拦截器中，我们主要做的事就是对返回的状态码进行判别，如果出现 401, 400 等错误，那么我们将其跳转到我们编写的404页面，如果出现请求超时，那么就可以跳转到500错误页面")])])}),[],!1,null,null,null);e.default=a.exports}}]);