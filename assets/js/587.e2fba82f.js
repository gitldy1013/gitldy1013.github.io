(window.webpackJsonp=window.webpackJsonp||[]).push([[587],{1283:function(s,a,n){"use strict";n.r(a);var t=n(5),r=Object(t.a)({},(function(){var s=this,a=s.$createElement,n=s._self._c||a;return n("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[n("h1",{attrs:{id:"go语言基础之数组"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#go语言基础之数组"}},[s._v("#")]),s._v(" Go语言基础之数组")]),s._v(" "),n("blockquote",[n("ul",[n("li",[s._v("Go语言中数组（array）及它的基本使用。")])])]),s._v(" "),n("h2",{attrs:{id:"array-数组"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#array-数组"}},[s._v("#")]),s._v(" Array(数组)")]),s._v(" "),n("p",[s._v("数组是同一种数据类型元素的集合。 在Go语言中，数组从声明时就确定，使用时可以修改数组成员，但是数组大小不可变化。 基本语法：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("    // 定义一个长度为3元素类型为int的数组a\n    var a [3]int\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br")])]),n("h2",{attrs:{id:"数组定义"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#数组定义"}},[s._v("#")]),s._v(" 数组定义：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("    var 数组变量名 [元素数量]T\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br")])]),n("p",[s._v("比如："),n("code",[s._v("var a [5]int")]),s._v("， 数组的长度必须是常量，并且长度是数组类型的一部分。一旦定义，长度不能变。 "),n("code",[s._v("[5]int")]),s._v("和"),n("code",[s._v("[10]int")]),s._v("是不同的类型。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("    var a [3]int\n    var b [4]int\n    a = b //不可以这样做，因为此时a和b是不同的类型\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br")])]),n("p",[s._v("数组可以通过下标进行访问，下标是从"),n("code",[s._v("0")]),s._v("开始，最后一个元素下标是："),n("code",[s._v("len-1")]),s._v("，访问越界（下标在合法范围之外），则触发访问越界，会panic。")]),s._v(" "),n("h2",{attrs:{id:"数组的初始化"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#数组的初始化"}},[s._v("#")]),s._v(" 数组的初始化")]),s._v(" "),n("p",[s._v("数组的初始化也有很多方式。")]),s._v(" "),n("h3",{attrs:{id:"方法一"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#方法一"}},[s._v("#")]),s._v(" 方法一")]),s._v(" "),n("p",[s._v("初始化数组时可以使用初始化列表来设置数组元素的值。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('    func main() {\n    \tvar testArray [3]int                        //数组会初始化为int类型的零值\n    \tvar numArray = [3]int{1, 2}                 //使用指定的初始值完成初始化\n    \tvar cityArray = [3]string{"北京", "上海", "深圳"} //使用指定的初始值完成初始化\n    \tfmt.Println(testArray)                      //[0 0 0]\n    \tfmt.Println(numArray)                       //[1 2 0]\n    \tfmt.Println(cityArray)                      //[北京 上海 深圳]\n    }\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br")])]),n("h3",{attrs:{id:"方法二"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#方法二"}},[s._v("#")]),s._v(" 方法二")]),s._v(" "),n("p",[s._v("按照上面的方法每次都要确保提供的初始值和数组长度一致，一般情况下我们可以让编译器根据初始值的个数自行推断数组的长度，例如：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('    func main() {\n    \tvar testArray [3]int\n    \tvar numArray = [...]int{1, 2}\n    \tvar cityArray = [...]string{"北京", "上海", "深圳"}\n    \tfmt.Println(testArray)                          //[0 0 0]\n    \tfmt.Println(numArray)                           //[1 2]\n    \tfmt.Printf("type of numArray:%T\\n", numArray)   //type of numArray:[2]int\n    \tfmt.Println(cityArray)                          //[北京 上海 深圳]\n    \tfmt.Printf("type of cityArray:%T\\n", cityArray) //type of cityArray:[3]string\n    }\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br")])]),n("h3",{attrs:{id:"方法三"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#方法三"}},[s._v("#")]),s._v(" 方法三")]),s._v(" "),n("p",[s._v("我们还可以使用指定索引值的方式来初始化数组，例如:")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('    func main() {\n    \ta := [...]int{1: 1, 3: 5}\n    \tfmt.Println(a)                  // [0 1 0 5]\n    \tfmt.Printf("type of a:%T\\n", a) //type of a:[4]int\n    }\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br")])]),n("h2",{attrs:{id:"数组的遍历"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#数组的遍历"}},[s._v("#")]),s._v(" 数组的遍历")]),s._v(" "),n("p",[s._v("遍历数组a有以下两种方法：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('    func main() {\n    \tvar a = [...]string{"北京", "上海", "深圳"}\n    \t// 方法1：for循环遍历\n    \tfor i := 0; i < len(a); i++ {\n    \t\tfmt.Println(a[i])\n    \t}\n    \n    \t// 方法2：for range遍历\n    \tfor index, value := range a {\n    \t\tfmt.Println(index, value)\n    \t}\n    }\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br")])]),n("h2",{attrs:{id:"多维数组"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#多维数组"}},[s._v("#")]),s._v(" 多维数组")]),s._v(" "),n("p",[s._v("Go语言是支持多维数组的，我们这里以二维数组为例（数组中又嵌套数组）。")]),s._v(" "),n("h3",{attrs:{id:"二维数组的定义"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#二维数组的定义"}},[s._v("#")]),s._v(" 二维数组的定义")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('    func main() {\n    \ta := [3][2]string{\n    \t\t{"北京", "上海"},\n    \t\t{"广州", "深圳"},\n    \t\t{"成都", "重庆"},\n    \t}\n    \tfmt.Println(a) //[[北京 上海] [广州 深圳] [成都 重庆]]\n    \tfmt.Println(a[2][1]) //支持索引取值:重庆\n    }\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br")])]),n("h3",{attrs:{id:"二维数组的遍历"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#二维数组的遍历"}},[s._v("#")]),s._v(" 二维数组的遍历")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('    func main() {\n    \ta := [3][2]string{\n    \t\t{"北京", "上海"},\n    \t\t{"广州", "深圳"},\n    \t\t{"成都", "重庆"},\n    \t}\n    \tfor _, v1 := range a {\n    \t\tfor _, v2 := range v1 {\n    \t\t\tfmt.Printf("%s\\t", v2)\n    \t\t}\n    \t\tfmt.Println()\n    \t}\n    }\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br")])]),n("p",[s._v("输出：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("    北京\t上海\t\n    广州\t深圳\t\n    成都\t重庆\t\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br")])]),n("p",[n("strong",[s._v("注意：")]),s._v(" 多维数组"),n("strong",[s._v("只有第一层")]),s._v("可以使用"),n("code",[s._v("...")]),s._v("来让编译器推导数组长度。例如：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('    //支持的写法\n    a := [...][2]string{\n    \t{"北京", "上海"},\n    \t{"广州", "深圳"},\n    \t{"成都", "重庆"},\n    }\n    //不支持多维数组的内层使用...\n    b := [3][...]string{\n    \t{"北京", "上海"},\n    \t{"广州", "深圳"},\n    \t{"成都", "重庆"},\n    }\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br")])]),n("h2",{attrs:{id:"数组是值类型"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#数组是值类型"}},[s._v("#")]),s._v(" 数组是值类型")]),s._v(" "),n("p",[s._v("数组是值类型，赋值和传参会复制整个数组。因此改变副本的值，不会改变本身的值。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("    func modifyArray(x [3]int) {\n    \tx[0] = 100\n    }\n    \n    func modifyArray2(x [3][2]int) {\n    \tx[2][0] = 100\n    }\n    func main() {\n    \ta := [3]int{10, 20, 30}\n    \tmodifyArray(a) //在modify中修改的是a的副本x\n    \tfmt.Println(a) //[10 20 30]\n    \tb := [3][2]int{\n    \t\t{1, 1},\n    \t\t{1, 1},\n    \t\t{1, 1},\n    \t}\n    \tmodifyArray2(b) //在modify中修改的是b的副本x\n    \tfmt.Println(b)  //[[1 1] [1 1] [1 1]]\n    }\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br")])]),n("p",[n("strong",[s._v("注意：")])]),s._v(" "),n("ol",[n("li",[s._v("数组支持 “==“、”!=” 操作符，因为内存总是被初始化过的。")]),s._v(" "),n("li",[n("code",[s._v("[n]*T")]),s._v("表示指针数组，"),n("code",[s._v("*[n]T")]),s._v("表示数组指针 。")])]),s._v(" "),n("h2",{attrs:{id:"练习题"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#练习题"}},[s._v("#")]),s._v(" 练习题")]),s._v(" "),n("ol",[n("li",[s._v("求数组"),n("code",[s._v("[1, 3, 5, 7, 8]")]),s._v("所有元素的和")]),s._v(" "),n("li",[s._v("找出数组中和为指定值的两个元素的下标，比如从数组"),n("code",[s._v("[1, 3, 5, 7, 8]")]),s._v("中找出和为8的两个元素的下标分别为"),n("code",[s._v("(0,3)")]),s._v("和"),n("code",[s._v("(1,2)")]),s._v("。")])])])}),[],!1,null,null,null);a.default=r.exports}}]);