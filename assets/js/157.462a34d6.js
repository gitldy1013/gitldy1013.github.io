(window.webpackJsonp=window.webpackJsonp||[]).push([[157],{854:function(n,s,a){"use strict";a.r(s);var e=a(5),t=Object(e.a)({},(function(){var n=this,s=n.$createElement,a=n._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[a("h1",{attrs:{id:"bean的生命周期"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#bean的生命周期"}},[n._v("#")]),n._v(" Bean的生命周期")]),n._v(" "),a("h2",{attrs:{id:"前言"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#前言"}},[n._v("#")]),n._v(" 前言")]),n._v(" "),a("p",[n._v("在我们没有使用Spring框架之前，创建对象一般都是使用new关键字进行创建，当然除了new关键字外，还有")]),n._v(" "),a("ul",[a("li",[n._v("运用反射手段，使用Class类的newInstance方法 或者 Constructor类中的newInstance方法")]),n._v(" "),a("li",[n._v("使用clone方法")]),n._v(" "),a("li",[n._v("使用反序列化（ObjectInputStream）")])]),n._v(" "),a("p",[n._v("一旦对象不再被使用的时候，将有可能被JVM垃圾回收器进行回收。")]),n._v(" "),a("p",[n._v("但是在Spring通过IOC容器进行管理之后，Bean 的生命周期就变得更加复杂了，下图展示了Bean的构造过程")]),n._v(" "),a("p",[a("img",{attrs:{src:"/images/image-20200614155732584.png",alt:"image-20200614155732584"}})]),n._v(" "),a("h2",{attrs:{id:"bean的生命周期-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#bean的生命周期-2"}},[n._v("#")]),n._v(" Bean的生命周期")]),n._v(" "),a("p",[n._v("我们对上图的每个步骤进行文字说明")]),n._v(" "),a("ul",[a("li",[n._v("Spring启动，查找并加载需要被Spring管理的bean，进行Bean的实例化")]),n._v(" "),a("li",[n._v("Bean实例化后对将Bean的引入和值注入到Bean的属性中")]),n._v(" "),a("li",[n._v("如果Bean实现了BeanNameAware接口的话，Spring将Bean的Id传递给setBeanName()方法")]),n._v(" "),a("li",[n._v("如果Bean实现了BeanFactoryAware接口的话，Spring将调用setBeanFactory()方法，将BeanFactory容器实例传入")]),n._v(" "),a("li",[n._v("如果Bean实现了ApplicationContextAware接口的话，Spring将调用Bean的setApplicationContext()方法，将bean所在应用上下文引用传入进来。")]),n._v(" "),a("li",[n._v("如果Bean实现了BeanPostProcessor接口，Spring就将调用他们的postProcessBeforeInitialization()方法。")]),n._v(" "),a("li",[n._v("如果Bean 实现了InitializingBean接口，Spring将调用他们的afterPropertiesSet()方法。类似的，如果bean使用init-method声明了初始化方法，该方法也会被调用")]),n._v(" "),a("li",[n._v("如果Bean 实现了BeanPostProcessor接口，Spring就将调用他们的postProcessAfterInitialization()方法。")]),n._v(" "),a("li",[n._v("此时，Bean已经准备就绪，可以被应用程序使用了。他们将一直驻留在应用上下文中，直到应用上下文被销毁。")]),n._v(" "),a("li",[n._v("如果bean实现了DisposableBean接口，Spring将调用它的destory()接口方法，同样，如果bean使用了destory-method 声明销毁方法，该方法也会被调用。")])]),n._v(" "),a("h2",{attrs:{id:"接口方法的分类"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#接口方法的分类"}},[n._v("#")]),n._v(" 接口方法的分类")]),n._v(" "),a("p",[n._v("Bean的完整生命周期经历了各种方法的调用，这些方法可以分类一下三类")]),n._v(" "),a("h3",{attrs:{id:"bean自身的方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#bean自身的方法"}},[n._v("#")]),n._v(" Bean自身的方法：")]),n._v(" "),a("p",[n._v("这个包括了Bean本身调用的方法和通过配置文件中"),a("bean",[n._v("的init-method和destroy-method指定的方法")])],1),n._v(" "),a("h3",{attrs:{id:"bean级生命周期的方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#bean级生命周期的方法"}},[n._v("#")]),n._v(" Bean级生命周期的方法")]),n._v(" "),a("p",[n._v("这个包括了BeanNameAware、BeanFactoryAware、InitializingBean和DiposableBean这些接口的方法")]),n._v(" "),a("h3",{attrs:{id:"容器级生命周期的方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#容器级生命周期的方法"}},[n._v("#")]),n._v(" 容器级生命周期的方法")]),n._v(" "),a("p",[n._v("这个包括了InstantiationAwareBeanPostProcessor 和 BeanPostProcessor 这两个接口实现，一般称它们的实现类为“后处理器”。")]),n._v(" "),a("h3",{attrs:{id:"工程后处理器接口方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#工程后处理器接口方法"}},[n._v("#")]),n._v(" 工程后处理器接口方法")]),n._v(" "),a("p",[n._v("这个包括了AspectJWeavingEnabler, ConfigurationClassPostProcessor, CustomAutowireConfigurer等等非常有用的工厂后处理器　　接口的方法。工厂后处理器也是容器级的。在应用上下文装配配置文件之后立即调用。")]),n._v(" "),a("h2",{attrs:{id:"demo举例"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#demo举例"}},[n._v("#")]),n._v(" DEMO举例")]),n._v(" "),a("p",[n._v("我们用一个简单的Spring Bean来演示一下Spring Bean的生命周期。")]),n._v(" "),a("p",[n._v("首先是一个简单的Spring Bean，调用Bean自身的方法和Bean级生命周期接口方法，为了方便演示，它实现了BeanNameAware、BeanFactoryAware、InitializingBean和DiposableBean这4个接口，同时有2个方法，对应配置文件中"),a("bean",[n._v("的init-method和destroy-method。如下：")])],1),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v('package springBeanTest;\n\nimport org.springframework.beans.BeansException;\nimport org.springframework.beans.factory.BeanFactory;\nimport org.springframework.beans.factory.BeanFactoryAware;\nimport org.springframework.beans.factory.BeanNameAware;\nimport org.springframework.beans.factory.DisposableBean;\nimport org.springframework.beans.factory.InitializingBean;\n\npublic class Person implements BeanFactoryAware, BeanNameAware,\n        InitializingBean, DisposableBean {\n\n    private String name;\n    private String address;\n    private int phone;\n\n    private BeanFactory beanFactory;\n    private String beanName;\n\n    public Person() {\n        System.out.println("【构造器】调用Person的构造器实例化");\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    public void setName(String name) {\n        System.out.println("【注入属性】注入属性name");\n        this.name = name;\n    }\n\n    public String getAddress() {\n        return address;\n    }\n\n    public void setAddress(String address) {\n        System.out.println("【注入属性】注入属性address");\n        this.address = address;\n    }\n\n    public int getPhone() {\n        return phone;\n    }\n\n    public void setPhone(int phone) {\n        System.out.println("【注入属性】注入属性phone");\n        this.phone = phone;\n    }\n\n    @Override\n    public String toString() {\n        return "Person [address=" + address + ", name=" + name + ", phone="\n                + phone + "]";\n    }\n\n    // 这是BeanFactoryAware接口方法\n    @Override\n    public void setBeanFactory(BeanFactory arg0) throws BeansException {\n        System.out\n                .println("【BeanFactoryAware接口】调用BeanFactoryAware.setBeanFactory()");\n        this.beanFactory = arg0;\n    }\n\n    // 这是BeanNameAware接口方法\n    @Override\n    public void setBeanName(String arg0) {\n        System.out.println("【BeanNameAware接口】调用BeanNameAware.setBeanName()");\n        this.beanName = arg0;\n    }\n\n    // 这是InitializingBean接口方法\n    @Override\n    public void afterPropertiesSet() throws Exception {\n        System.out\n                .println("【InitializingBean接口】调用InitializingBean.afterPropertiesSet()");\n    }\n\n    // 这是DiposibleBean接口方法\n    @Override\n    public void destroy() throws Exception {\n        System.out.println("【DiposibleBean接口】调用DiposibleBean.destory()");\n    }\n\n    // 通过<bean>的init-method属性指定的初始化方法\n    public void myInit() {\n        System.out.println("【init-method】调用<bean>的init-method属性指定的初始化方法");\n    }\n\n    // 通过<bean>的destroy-method属性指定的初始化方法\n    public void myDestory() {\n        System.out.println("【destroy-method】调用<bean>的destroy-method属性指定的初始化方法");\n    }\n}\n')])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br"),a("span",{staticClass:"line-number"},[n._v("5")]),a("br"),a("span",{staticClass:"line-number"},[n._v("6")]),a("br"),a("span",{staticClass:"line-number"},[n._v("7")]),a("br"),a("span",{staticClass:"line-number"},[n._v("8")]),a("br"),a("span",{staticClass:"line-number"},[n._v("9")]),a("br"),a("span",{staticClass:"line-number"},[n._v("10")]),a("br"),a("span",{staticClass:"line-number"},[n._v("11")]),a("br"),a("span",{staticClass:"line-number"},[n._v("12")]),a("br"),a("span",{staticClass:"line-number"},[n._v("13")]),a("br"),a("span",{staticClass:"line-number"},[n._v("14")]),a("br"),a("span",{staticClass:"line-number"},[n._v("15")]),a("br"),a("span",{staticClass:"line-number"},[n._v("16")]),a("br"),a("span",{staticClass:"line-number"},[n._v("17")]),a("br"),a("span",{staticClass:"line-number"},[n._v("18")]),a("br"),a("span",{staticClass:"line-number"},[n._v("19")]),a("br"),a("span",{staticClass:"line-number"},[n._v("20")]),a("br"),a("span",{staticClass:"line-number"},[n._v("21")]),a("br"),a("span",{staticClass:"line-number"},[n._v("22")]),a("br"),a("span",{staticClass:"line-number"},[n._v("23")]),a("br"),a("span",{staticClass:"line-number"},[n._v("24")]),a("br"),a("span",{staticClass:"line-number"},[n._v("25")]),a("br"),a("span",{staticClass:"line-number"},[n._v("26")]),a("br"),a("span",{staticClass:"line-number"},[n._v("27")]),a("br"),a("span",{staticClass:"line-number"},[n._v("28")]),a("br"),a("span",{staticClass:"line-number"},[n._v("29")]),a("br"),a("span",{staticClass:"line-number"},[n._v("30")]),a("br"),a("span",{staticClass:"line-number"},[n._v("31")]),a("br"),a("span",{staticClass:"line-number"},[n._v("32")]),a("br"),a("span",{staticClass:"line-number"},[n._v("33")]),a("br"),a("span",{staticClass:"line-number"},[n._v("34")]),a("br"),a("span",{staticClass:"line-number"},[n._v("35")]),a("br"),a("span",{staticClass:"line-number"},[n._v("36")]),a("br"),a("span",{staticClass:"line-number"},[n._v("37")]),a("br"),a("span",{staticClass:"line-number"},[n._v("38")]),a("br"),a("span",{staticClass:"line-number"},[n._v("39")]),a("br"),a("span",{staticClass:"line-number"},[n._v("40")]),a("br"),a("span",{staticClass:"line-number"},[n._v("41")]),a("br"),a("span",{staticClass:"line-number"},[n._v("42")]),a("br"),a("span",{staticClass:"line-number"},[n._v("43")]),a("br"),a("span",{staticClass:"line-number"},[n._v("44")]),a("br"),a("span",{staticClass:"line-number"},[n._v("45")]),a("br"),a("span",{staticClass:"line-number"},[n._v("46")]),a("br"),a("span",{staticClass:"line-number"},[n._v("47")]),a("br"),a("span",{staticClass:"line-number"},[n._v("48")]),a("br"),a("span",{staticClass:"line-number"},[n._v("49")]),a("br"),a("span",{staticClass:"line-number"},[n._v("50")]),a("br"),a("span",{staticClass:"line-number"},[n._v("51")]),a("br"),a("span",{staticClass:"line-number"},[n._v("52")]),a("br"),a("span",{staticClass:"line-number"},[n._v("53")]),a("br"),a("span",{staticClass:"line-number"},[n._v("54")]),a("br"),a("span",{staticClass:"line-number"},[n._v("55")]),a("br"),a("span",{staticClass:"line-number"},[n._v("56")]),a("br"),a("span",{staticClass:"line-number"},[n._v("57")]),a("br"),a("span",{staticClass:"line-number"},[n._v("58")]),a("br"),a("span",{staticClass:"line-number"},[n._v("59")]),a("br"),a("span",{staticClass:"line-number"},[n._v("60")]),a("br"),a("span",{staticClass:"line-number"},[n._v("61")]),a("br"),a("span",{staticClass:"line-number"},[n._v("62")]),a("br"),a("span",{staticClass:"line-number"},[n._v("63")]),a("br"),a("span",{staticClass:"line-number"},[n._v("64")]),a("br"),a("span",{staticClass:"line-number"},[n._v("65")]),a("br"),a("span",{staticClass:"line-number"},[n._v("66")]),a("br"),a("span",{staticClass:"line-number"},[n._v("67")]),a("br"),a("span",{staticClass:"line-number"},[n._v("68")]),a("br"),a("span",{staticClass:"line-number"},[n._v("69")]),a("br"),a("span",{staticClass:"line-number"},[n._v("70")]),a("br"),a("span",{staticClass:"line-number"},[n._v("71")]),a("br"),a("span",{staticClass:"line-number"},[n._v("72")]),a("br"),a("span",{staticClass:"line-number"},[n._v("73")]),a("br"),a("span",{staticClass:"line-number"},[n._v("74")]),a("br"),a("span",{staticClass:"line-number"},[n._v("75")]),a("br"),a("span",{staticClass:"line-number"},[n._v("76")]),a("br"),a("span",{staticClass:"line-number"},[n._v("77")]),a("br"),a("span",{staticClass:"line-number"},[n._v("78")]),a("br"),a("span",{staticClass:"line-number"},[n._v("79")]),a("br"),a("span",{staticClass:"line-number"},[n._v("80")]),a("br"),a("span",{staticClass:"line-number"},[n._v("81")]),a("br"),a("span",{staticClass:"line-number"},[n._v("82")]),a("br"),a("span",{staticClass:"line-number"},[n._v("83")]),a("br"),a("span",{staticClass:"line-number"},[n._v("84")]),a("br"),a("span",{staticClass:"line-number"},[n._v("85")]),a("br"),a("span",{staticClass:"line-number"},[n._v("86")]),a("br"),a("span",{staticClass:"line-number"},[n._v("87")]),a("br"),a("span",{staticClass:"line-number"},[n._v("88")]),a("br"),a("span",{staticClass:"line-number"},[n._v("89")]),a("br"),a("span",{staticClass:"line-number"},[n._v("90")]),a("br"),a("span",{staticClass:"line-number"},[n._v("91")]),a("br"),a("span",{staticClass:"line-number"},[n._v("92")]),a("br"),a("span",{staticClass:"line-number"},[n._v("93")]),a("br"),a("span",{staticClass:"line-number"},[n._v("94")]),a("br")])]),a("p",[n._v("接下来是演示BeanPostProcessor接口的方法，如下：")]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v('package springBeanTest;\n\nimport org.springframework.beans.BeansException;\nimport org.springframework.beans.factory.config.BeanPostProcessor;\n\npublic class MyBeanPostProcessor implements BeanPostProcessor {\n\n    public MyBeanPostProcessor() {\n        super();\n        System.out.println("这是BeanPostProcessor实现类构造器！！");\n        // TODO Auto-generated constructor stub\n    }\n\n    @Override\n    public Object postProcessAfterInitialization(Object arg0, String arg1)\n            throws BeansException {\n        System.out\n        .println("BeanPostProcessor接口方法postProcessAfterInitialization对属性进行更改！");\n        return arg0;\n    }\n\n    @Override\n    public Object postProcessBeforeInitialization(Object arg0, String arg1)\n            throws BeansException {\n        System.out\n        .println("BeanPostProcessor接口方法postProcessBeforeInitialization对属性进行更改！");\n        return arg0;\n    }\n}\n')])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br"),a("span",{staticClass:"line-number"},[n._v("5")]),a("br"),a("span",{staticClass:"line-number"},[n._v("6")]),a("br"),a("span",{staticClass:"line-number"},[n._v("7")]),a("br"),a("span",{staticClass:"line-number"},[n._v("8")]),a("br"),a("span",{staticClass:"line-number"},[n._v("9")]),a("br"),a("span",{staticClass:"line-number"},[n._v("10")]),a("br"),a("span",{staticClass:"line-number"},[n._v("11")]),a("br"),a("span",{staticClass:"line-number"},[n._v("12")]),a("br"),a("span",{staticClass:"line-number"},[n._v("13")]),a("br"),a("span",{staticClass:"line-number"},[n._v("14")]),a("br"),a("span",{staticClass:"line-number"},[n._v("15")]),a("br"),a("span",{staticClass:"line-number"},[n._v("16")]),a("br"),a("span",{staticClass:"line-number"},[n._v("17")]),a("br"),a("span",{staticClass:"line-number"},[n._v("18")]),a("br"),a("span",{staticClass:"line-number"},[n._v("19")]),a("br"),a("span",{staticClass:"line-number"},[n._v("20")]),a("br"),a("span",{staticClass:"line-number"},[n._v("21")]),a("br"),a("span",{staticClass:"line-number"},[n._v("22")]),a("br"),a("span",{staticClass:"line-number"},[n._v("23")]),a("br"),a("span",{staticClass:"line-number"},[n._v("24")]),a("br"),a("span",{staticClass:"line-number"},[n._v("25")]),a("br"),a("span",{staticClass:"line-number"},[n._v("26")]),a("br"),a("span",{staticClass:"line-number"},[n._v("27")]),a("br"),a("span",{staticClass:"line-number"},[n._v("28")]),a("br"),a("span",{staticClass:"line-number"},[n._v("29")]),a("br")])]),a("p",[n._v("如上，BeanPostProcessor接口包括2个方法postProcessAfterInitialization和postProcessBeforeInitialization，这两个方法的第一个参数都是要处理的Bean对象，第二个参数都是Bean的name。返回值也都是要处理的Bean对象。这里要注意。")]),n._v(" "),a("p",[n._v("InstantiationAwareBeanPostProcessor 接口本质是BeanPostProcessor的子接口，一般我们继承Spring为其提供的适配器类InstantiationAwareBeanPostProcessor Adapter来使用它，如下：")]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v('package springBeanTest;\n\nimport java.beans.PropertyDescriptor;\n\nimport org.springframework.beans.BeansException;\nimport org.springframework.beans.PropertyValues;\nimport org.springframework.beans.factory.config.InstantiationAwareBeanPostProcessorAdapter;\n\npublic class MyInstantiationAwareBeanPostProcessor extends\n        InstantiationAwareBeanPostProcessorAdapter {\n\n    public MyInstantiationAwareBeanPostProcessor() {\n        super();\n        System.out\n                .println("这是InstantiationAwareBeanPostProcessorAdapter实现类构造器！！");\n    }\n\n    // 接口方法、实例化Bean之前调用\n    @Override\n    public Object postProcessBeforeInstantiation(Class beanClass,\n            String beanName) throws BeansException {\n        System.out\n                .println("InstantiationAwareBeanPostProcessor调用postProcessBeforeInstantiation方法");\n        return null;\n    }\n\n    // 接口方法、实例化Bean之后调用\n    @Override\n    public Object postProcessAfterInitialization(Object bean, String beanName)\n            throws BeansException {\n        System.out\n                .println("InstantiationAwareBeanPostProcessor调用postProcessAfterInitialization方法");\n        return bean;\n    }\n\n    // 接口方法、设置某个属性时调用\n    @Override\n    public PropertyValues postProcessPropertyValues(PropertyValues pvs,\n            PropertyDescriptor[] pds, Object bean, String beanName)\n            throws BeansException {\n        System.out\n                .println("InstantiationAwareBeanPostProcessor调用postProcessPropertyValues方法");\n        return pvs;\n    }\n}\n')])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br"),a("span",{staticClass:"line-number"},[n._v("5")]),a("br"),a("span",{staticClass:"line-number"},[n._v("6")]),a("br"),a("span",{staticClass:"line-number"},[n._v("7")]),a("br"),a("span",{staticClass:"line-number"},[n._v("8")]),a("br"),a("span",{staticClass:"line-number"},[n._v("9")]),a("br"),a("span",{staticClass:"line-number"},[n._v("10")]),a("br"),a("span",{staticClass:"line-number"},[n._v("11")]),a("br"),a("span",{staticClass:"line-number"},[n._v("12")]),a("br"),a("span",{staticClass:"line-number"},[n._v("13")]),a("br"),a("span",{staticClass:"line-number"},[n._v("14")]),a("br"),a("span",{staticClass:"line-number"},[n._v("15")]),a("br"),a("span",{staticClass:"line-number"},[n._v("16")]),a("br"),a("span",{staticClass:"line-number"},[n._v("17")]),a("br"),a("span",{staticClass:"line-number"},[n._v("18")]),a("br"),a("span",{staticClass:"line-number"},[n._v("19")]),a("br"),a("span",{staticClass:"line-number"},[n._v("20")]),a("br"),a("span",{staticClass:"line-number"},[n._v("21")]),a("br"),a("span",{staticClass:"line-number"},[n._v("22")]),a("br"),a("span",{staticClass:"line-number"},[n._v("23")]),a("br"),a("span",{staticClass:"line-number"},[n._v("24")]),a("br"),a("span",{staticClass:"line-number"},[n._v("25")]),a("br"),a("span",{staticClass:"line-number"},[n._v("26")]),a("br"),a("span",{staticClass:"line-number"},[n._v("27")]),a("br"),a("span",{staticClass:"line-number"},[n._v("28")]),a("br"),a("span",{staticClass:"line-number"},[n._v("29")]),a("br"),a("span",{staticClass:"line-number"},[n._v("30")]),a("br"),a("span",{staticClass:"line-number"},[n._v("31")]),a("br"),a("span",{staticClass:"line-number"},[n._v("32")]),a("br"),a("span",{staticClass:"line-number"},[n._v("33")]),a("br"),a("span",{staticClass:"line-number"},[n._v("34")]),a("br"),a("span",{staticClass:"line-number"},[n._v("35")]),a("br"),a("span",{staticClass:"line-number"},[n._v("36")]),a("br"),a("span",{staticClass:"line-number"},[n._v("37")]),a("br"),a("span",{staticClass:"line-number"},[n._v("38")]),a("br"),a("span",{staticClass:"line-number"},[n._v("39")]),a("br"),a("span",{staticClass:"line-number"},[n._v("40")]),a("br"),a("span",{staticClass:"line-number"},[n._v("41")]),a("br"),a("span",{staticClass:"line-number"},[n._v("42")]),a("br"),a("span",{staticClass:"line-number"},[n._v("43")]),a("br"),a("span",{staticClass:"line-number"},[n._v("44")]),a("br"),a("span",{staticClass:"line-number"},[n._v("45")]),a("br")])]),a("h2",{attrs:{id:"参考"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#参考"}},[n._v("#")]),n._v(" 参考")]),n._v(" "),a("p",[n._v("https://www.cnblogs.com/zrtqsk/p/3735273.html")]),n._v(" "),a("p",[n._v("https://www.cnblogs.com/javazhiyin/p/10905294.html")])])}),[],!1,null,null,null);s.default=t.exports}}]);