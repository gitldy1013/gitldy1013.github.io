(window.webpackJsonp=window.webpackJsonp||[]).push([[459],{1155:function(s,e,a){"use strict";a.r(e);var n=a(5),r=Object(n.a)({},(function(){var s=this,e=s.$createElement,a=s._self._c||e;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("h1",{attrs:{id:"docker-compose-实战-rails"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#docker-compose-实战-rails"}},[s._v("#")]),s._v(" Docker Compose 实战 Rails")]),s._v(" "),a("p",[s._v("本小节内容适合 "),a("code",[s._v("Ruby")]),s._v(" 开发人员阅读。")]),s._v(" "),a("p",[s._v("我们现在将使用 "),a("code",[s._v("Compose")]),s._v(" 配置并运行一个 "),a("code",[s._v("Rails/PostgreSQL")]),s._v(" 应用。")]),s._v(" "),a("p",[s._v("在一切工作开始前，需要先设置好三个必要的文件。")]),s._v(" "),a("p",[s._v("首先，因为应用将要运行在一个满足所有环境依赖的 Docker 容器里面，那么我们可以通过编辑 "),a("code",[s._v("Dockerfile")]),s._v(" 文件来指定 Docker 容器要安装内容。内容如下：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("    FROM ruby\n    RUN apt-get update -qq && apt-get install -y build-essential libpq-dev\n    RUN mkdir /myapp\n    WORKDIR /myapp\n    ADD Gemfile /myapp/Gemfile\n    RUN bundle install\n    ADD . /myapp\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br")])]),a("p",[s._v("以上内容指定应用将使用安装了 Ruby、Bundler 以及其依赖件的镜像。 下一步，我们需要一个引导加载 Rails 的文件 "),a("code",[s._v("Gemfile")]),s._v(" 。 等一会儿它还会被 "),a("code",[s._v("rails new")]),s._v(" 命令覆盖重写。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("    source 'https://rubygems.org'\n    gem 'rails', '4.0.2'\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("p",[s._v("最后，"),a("code",[s._v("docker-compose.yml")]),s._v(" 文件才是最神奇的地方。 "),a("code",[s._v("docker-compose.yml")]),s._v(" 文件将把所有的东西关联起来。它描述了应用的构成（一个 web 服务和一个数据库）、每个镜像的来源（数据库运行在使用预定义的 PostgreSQL 镜像，web 应用侧将从本地目录创建）、镜像之间的连接，以及服务开放的端口。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('    version: "3"\n    services:\n    \n      db:\n        image: postgres\n        ports:\n          - "5432"\n    \n      web:\n        build: .\n        command: bundle exec rackup -p 3000\n        volumes:\n          - .:/myapp\n        ports:\n          - "3000:3000"\n        links:\n          - db\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br")])]),a("p",[s._v("所有文件就绪后，我们就可以通过使用 "),a("code",[s._v("docker-compose run")]),s._v(" 命令生成应用的骨架了。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("    $ docker-compose run web rails new . --force --database=postgresql --skip-bundle\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[a("code",[s._v("Compose")]),s._v(" 会先使用 "),a("code",[s._v("Dockerfile")]),s._v(" 为 web 服务创建一个镜像，接着使用这个镜像在容器里运行 "),a("code",[s._v("rails new")]),s._v(" 和它之后的命令。一旦这个命令运行完后，应该就可以看一个崭新的应用已经生成了。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("    $ ls\n    Dockerfile   app          docker-compose.yml      tmp\n    Gemfile      bin          lib          vendor\n    Gemfile.lock condocker-compose       log\n    README.rdoc  condocker-compose.ru    public\n    Rakefile     db           test\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br")])]),a("p",[s._v("在新的 "),a("code",[s._v("Gemfile")]),s._v(" 文件去掉加载 "),a("code",[s._v("therubyracer")]),s._v(" 的行的注释，这样我们便可以使用 Javascript 运行环境：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("    gem 'therubyracer', platforms: :ruby\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("现在我们已经有一个新的 "),a("code",[s._v("Gemfile")]),s._v(" 文件，需要再重新创建镜像。（这个会步骤会改变 Dockerfile 文件本身，所以需要重建一次）。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("    $ docker-compose build\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("应用现在就可以启动了，但配置还未完成。Rails 默认读取的数据库目标是 "),a("code",[s._v("localhost")]),s._v(" ，我们需要手动指定容器的 "),a("code",[s._v("db")]),s._v(" 。同样的，还需要把用户名修改成和 postgres 镜像预定的一致。 打开最新生成的 "),a("code",[s._v("database.yml")]),s._v(" 文件。用以下内容替换：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("    development: &default\n      adapter: postgresql\n      encoding: unicode\n      database: postgres\n      pool: 5\n      username: postgres\n      password:\n      host: db\n    \n    test:\n      <<: *default\n      database: myapp_test\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br")])]),a("p",[s._v("现在就可以启动应用了。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("    $ docker-compose up\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("如果一切正常，你应该可以看到 PostgreSQL 的输出，几秒后可以看到这样的重复信息：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("    myapp_web_1 | [2014-01-17 17:16:29] INFO  WEBrick 1.3.1\n    myapp_web_1 | [2014-01-17 17:16:29] INFO  ruby 2.0.0 (2013-11-22) [x86_64-linux-gnu]\n    myapp_web_1 | [2014-01-17 17:16:29] INFO  WEBrick::HTTPServer#start: pid=1 port=3000\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("p",[s._v("最后， 我们需要做的是创建数据库，打开另一个终端，运行：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("    $ docker-compose run web rake db:create\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("这个 web 应用已经开始在你的 docker 守护进程里面监听着 3000 端口了。")])])}),[],!1,null,null,null);e.default=r.exports}}]);