(window.webpackJsonp=window.webpackJsonp||[]).push([[283],{979:function(s,a,t){"use strict";t.r(a);var n=t(5),r=Object(n.a)({},(function(){var s=this,a=s.$createElement,t=s._self._c||a;return t("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[t("h1",{attrs:{id:"jvm面试汇总"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#jvm面试汇总"}},[s._v("#")]),s._v(" JVM面试汇总")]),s._v(" "),t("h2",{attrs:{id:"jvm垃圾回收的时候如何确定垃圾-是否知道什么是gc-roots"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#jvm垃圾回收的时候如何确定垃圾-是否知道什么是gc-roots"}},[s._v("#")]),s._v(" JVM垃圾回收的时候如何确定垃圾？是否知道什么是GC Roots")]),s._v(" "),t("h3",{attrs:{id:"什么是垃圾"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#什么是垃圾"}},[s._v("#")]),s._v(" 什么是垃圾")]),s._v(" "),t("p",[s._v("简单来说就是内存中已经不再被使用的空间就是垃圾")]),s._v(" "),t("h3",{attrs:{id:"如何判断一个对象是否可以被回收"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#如何判断一个对象是否可以被回收"}},[s._v("#")]),s._v(" 如何判断一个对象是否可以被回收")]),s._v(" "),t("h4",{attrs:{id:"引用计数法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#引用计数法"}},[s._v("#")]),s._v(" 引用计数法")]),s._v(" "),t("p",[s._v("Java中，引用和对象是有关联的。如果要操作对象则必须用引用进行。")]),s._v(" "),t("p",[s._v("因此，很显然一个简单的办法就是通过引用计数来判断一个对象是否可以回收。简单说，给对象中添加一个引用计数器")]),s._v(" "),t("p",[s._v("每当有一个地方引用它，计数器值加1")]),s._v(" "),t("p",[s._v("每当有一个引用失效，计数器值减1")]),s._v(" "),t("p",[s._v("任何时刻计数器值为零的对象就是不可能再被使用的，那么这个对象就是可回收对象。")]),s._v(" "),t("p",[s._v("那么为什么主流的Java虚拟机里面都没有选用这个方法呢？其中最主要的原因是它很难解决对象之间相互循环引用的问题。")]),s._v(" "),t("p",[s._v("该算法存在但目前无人用了，解决不了循环引用的问题，了解即可。")]),s._v(" "),t("p",[t("img",{attrs:{src:"/images/image-20200318213301603.png",alt:"image-20200318213301603"}})]),s._v(" "),t("h4",{attrs:{id:"枚举根节点做可达性分析"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#枚举根节点做可达性分析"}},[s._v("#")]),s._v(" 枚举根节点做可达性分析")]),s._v(" "),t("p",[s._v("根搜索路径算法")]),s._v(" "),t("p",[s._v("为了解决引用计数法的循环引用个问题，Java使用了可达性分析的方法：")]),s._v(" "),t("p",[t("img",{attrs:{src:"/images/image-20200319113611244.png",alt:"image-20200319113611244"}})]),s._v(" "),t("p",[s._v("所谓 GC Roots 或者说 Tracing Roots的“根集合” 就是一组必须活跃的引用")]),s._v(" "),t("p",[s._v("基本思路就是通过一系列名为 GC Roots的对象作为起始点，从这个被称为GC Roots的对象开始向下搜索，如果一个对象到GC Roots没有任何引用链相连，则说明此对象不可用。也即给定一个集合的引用作为根出发，通过引用关系遍历对象图，能被遍历到的（可到达的）对象就被判定为存活，没有被遍历到的对象就被判定为死亡")]),s._v(" "),t("p",[t("img",{attrs:{src:"/images/image-20200319114526625.png",alt:"image-20200319114526625"}})]),s._v(" "),t("p",[s._v("必须从GC Roots对象开始，这个类似于linux的 /  也就是根目录")]),s._v(" "),t("p",[s._v("蓝色部分是从GC Roots出发，能够循环可达")]),s._v(" "),t("p",[s._v("而白色部分，从GC Roots出发，无法到达")]),s._v(" "),t("h4",{attrs:{id:"一句话理解gc-roots"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#一句话理解gc-roots"}},[s._v("#")]),s._v(" 一句话理解GC Roots")]),s._v(" "),t("p",[s._v("假设我们现在有三个实体，分别是 人，狗，毛衣")]),s._v(" "),t("p",[s._v("然后他们之间的关系是：人 牵着 狗，狗穿着毛衣，他们之间是强连接的关系")]),s._v(" "),t("p",[s._v("有一天人消失了，只剩下狗狗 和 毛衣，这个时候，把人想象成 GC Roots，因为 人 和 狗之间失去了绳子连接，")]),s._v(" "),t("p",[s._v("那么狗可能被回收，也就是被警察抓起来，被送到流浪狗寄养所")]),s._v(" "),t("p",[s._v("假设狗和人有强连接的时候，狗狗就不会被当成是流浪狗")]),s._v(" "),t("h4",{attrs:{id:"那些对象可以当做gc-roots"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#那些对象可以当做gc-roots"}},[s._v("#")]),s._v(" 那些对象可以当做GC Roots")]),s._v(" "),t("ul",[t("li",[s._v("虚拟机栈（栈帧中的局部变量区，也叫做局部变量表）中的引用对象")]),s._v(" "),t("li",[s._v("方法区中的类静态属性引用的对象")]),s._v(" "),t("li",[s._v("方法区中常量引用的对象")]),s._v(" "),t("li",[s._v("本地方法栈中的JNI（Native方法）的引用对象")])]),s._v(" "),t("h4",{attrs:{id:"代码说明"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#代码说明"}},[s._v("#")]),s._v(" 代码说明")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v('\n/**\n * 在Java中，可以作为GC Roots的对象有：\n * - 虚拟机栈（栈帧中的局部变量区，也叫做局部变量表）中的引用对象\n * - 方法区中的类静态属性引用的对象\n * - 方法区中常量引用的对象\n * - 本地方法栈中的JNI（Native方法）的引用对象\n * @author: 陌溪\n * @create: 2020-03-19-11:57\n */\npublic class GCRootDemo {\n\n\n    // 方法区中的类静态属性引用的对象\n    // private static GCRootDemo2 t2;\n\n    // 方法区中的常量引用，GC Roots 也会以这个为起点，进行遍历\n    // private static final GCRootDemo3 t3 = new GCRootDemo3(8);\n\n    public static void m1() {\n        // 第一种，虚拟机栈中的引用对象\n        GCRootDemo t1 = new GCRootDemo();\n        System.gc();\n        System.out.println("第一次GC完成");\n    }\n    public static void main(String[] args) {\n        m1();\n    }\n}\n')])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br"),t("span",{staticClass:"line-number"},[s._v("19")]),t("br"),t("span",{staticClass:"line-number"},[s._v("20")]),t("br"),t("span",{staticClass:"line-number"},[s._v("21")]),t("br"),t("span",{staticClass:"line-number"},[s._v("22")]),t("br"),t("span",{staticClass:"line-number"},[s._v("23")]),t("br"),t("span",{staticClass:"line-number"},[s._v("24")]),t("br"),t("span",{staticClass:"line-number"},[s._v("25")]),t("br"),t("span",{staticClass:"line-number"},[s._v("26")]),t("br"),t("span",{staticClass:"line-number"},[s._v("27")]),t("br"),t("span",{staticClass:"line-number"},[s._v("28")]),t("br"),t("span",{staticClass:"line-number"},[s._v("29")]),t("br")])])])}),[],!1,null,null,null);a.default=r.exports}}]);