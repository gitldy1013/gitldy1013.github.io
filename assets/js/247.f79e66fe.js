(window.webpackJsonp=window.webpackJsonp||[]).push([[247],{943:function(e,n,s){"use strict";s.r(n);var a=s(5),t=Object(a.a)({},(function(){var e=this,n=e.$createElement,s=e._self._c||n;return s("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[s("h1",{attrs:{id:"二叉搜索树的后序遍历序列"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#二叉搜索树的后序遍历序列"}},[e._v("#")]),e._v(" 二叉搜索树的后序遍历序列")]),e._v(" "),s("p",[e._v("https://www.nowcoder.com/practice/a861533d45854474ac791d90e447bafd")]),e._v(" "),s("h2",{attrs:{id:"题目"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#题目"}},[e._v("#")]),e._v(" 题目")]),e._v(" "),s("p",[e._v("输入一个整数数组，判断该数组是不是某二叉搜索树的后序遍历的结果。如果是则输出Yes,否则输出No。假设输入的数组的任意两个数字都互不相同。")]),e._v(" "),s("h2",{attrs:{id:"什么是二叉搜索树"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#什么是二叉搜索树"}},[e._v("#")]),e._v(" 什么是二叉搜索树")]),e._v(" "),s("p",[e._v("二叉查找树（Binary Search Tree），（又：二叉搜索树，二叉排序树）它或者是一棵空树，或者是具有下列性质的"),s("a",{attrs:{href:"https://baike.baidu.com/item/%E4%BA%8C%E5%8F%89%E6%A0%91/1602879",target:"_blank",rel:"noopener noreferrer"}},[e._v("二叉树"),s("OutboundLink")],1),e._v("： 若它的左子树不空，则左子树上所有结点的值均小于它的根结点的值； 若它的右子树不空，则右子树上所有结点的值均大于它的根结点的值； 它的左、右子树也分别为"),s("a",{attrs:{href:"https://baike.baidu.com/item/%E4%BA%8C%E5%8F%89%E6%8E%92%E5%BA%8F%E6%A0%91/10905079",target:"_blank",rel:"noopener noreferrer"}},[e._v("二叉排序树"),s("OutboundLink")],1),e._v("。二叉搜索树作为一种经典的数据结构，它既有链表的快速插入与删除操作的特点，又有数组快速查找的优势；所以应用十分广泛，例如在文件系统和数据库系统一般会采用这种数据结构进行高效率的排序与检索操作")]),e._v(" "),s("p",[s("img",{attrs:{src:"/images/image-20200531202449227.png",alt:"image-20200531202449227"}})]),e._v(" "),s("h2",{attrs:{id:"思路"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#思路"}},[e._v("#")]),e._v(" 思路")]),e._v(" "),s("p",[e._v("给定一个二叉树，后序遍历的结果如下所示")]),e._v(" "),s("p",[s("img",{attrs:{src:"/images/image-20200531203027879.png",alt:"image-20200531203027879"}})]),e._v(" "),s("p",[e._v("代码如下")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("class Solution:\n    def VerifySquenceOfBST(self, sequence):\n        if sequence == []:\n            return False\n\n        # 找ROOT节点，也就是最后一个\n        root = sequence[-1]\n        # 删除队列中的末尾节点\n        del sequence[-1]\n        # 寻找出划分的节点\n        index = None\n        for i in range(len(sequence)):\n            # 只寻找一次，就不进入了\n            if index == None and sequence[i] > root:\n                index = i\n            # 当我们找到一个大的数，然后往后又找到一个更小的数，那么就无法组成二叉搜索树\n            if index != None and sequence[i] < root:\n                return False\n\n        if sequence[:index] == []:\n            left = True\n        else:\n            # 寻找左子树和右子树\n            left = self.VerifySquenceOfBST(sequence[:index])\n        if sequence[index:] == []:\n            right = True\n        else:\n            right = self.VerifySquenceOfBST(sequence[index:])\n        # 返回结果\n        return left and right\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br"),s("span",{staticClass:"line-number"},[e._v("7")]),s("br"),s("span",{staticClass:"line-number"},[e._v("8")]),s("br"),s("span",{staticClass:"line-number"},[e._v("9")]),s("br"),s("span",{staticClass:"line-number"},[e._v("10")]),s("br"),s("span",{staticClass:"line-number"},[e._v("11")]),s("br"),s("span",{staticClass:"line-number"},[e._v("12")]),s("br"),s("span",{staticClass:"line-number"},[e._v("13")]),s("br"),s("span",{staticClass:"line-number"},[e._v("14")]),s("br"),s("span",{staticClass:"line-number"},[e._v("15")]),s("br"),s("span",{staticClass:"line-number"},[e._v("16")]),s("br"),s("span",{staticClass:"line-number"},[e._v("17")]),s("br"),s("span",{staticClass:"line-number"},[e._v("18")]),s("br"),s("span",{staticClass:"line-number"},[e._v("19")]),s("br"),s("span",{staticClass:"line-number"},[e._v("20")]),s("br"),s("span",{staticClass:"line-number"},[e._v("21")]),s("br"),s("span",{staticClass:"line-number"},[e._v("22")]),s("br"),s("span",{staticClass:"line-number"},[e._v("23")]),s("br"),s("span",{staticClass:"line-number"},[e._v("24")]),s("br"),s("span",{staticClass:"line-number"},[e._v("25")]),s("br"),s("span",{staticClass:"line-number"},[e._v("26")]),s("br"),s("span",{staticClass:"line-number"},[e._v("27")]),s("br"),s("span",{staticClass:"line-number"},[e._v("28")]),s("br"),s("span",{staticClass:"line-number"},[e._v("29")]),s("br"),s("span",{staticClass:"line-number"},[e._v("30")]),s("br")])])])}),[],!1,null,null,null);n.default=t.exports}}]);