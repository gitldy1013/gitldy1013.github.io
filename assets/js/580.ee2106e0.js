(window.webpackJsonp=window.webpackJsonp||[]).push([[580],{1277:function(s,t,n){"use strict";n.r(t);var e=n(5),a=Object(e.a)({},(function(){var s=this,t=s.$createElement,n=s._self._c||t;return n("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[n("h1",{attrs:{id:"不写测试的开发不是好程序员。我个人非常崇尚tdd-test-driven-development-的-然而可惜的是国内的程序员都不太关注测试这一部分。-介绍一下在go语言中如何做单元测试和基准测试。"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#不写测试的开发不是好程序员。我个人非常崇尚tdd-test-driven-development-的-然而可惜的是国内的程序员都不太关注测试这一部分。-介绍一下在go语言中如何做单元测试和基准测试。"}},[s._v("#")]),s._v(" 不写测试的开发不是好程序员。我个人非常崇尚TDD（Test Driven Development）的，然而可惜的是国内的程序员都不太关注测试这一部分。 介绍一下在Go语言中如何做单元测试和基准测试。")]),s._v(" "),n("h2",{attrs:{id:"go-test工具"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#go-test工具"}},[s._v("#")]),s._v(" go test工具")]),s._v(" "),n("p",[s._v("Go语言中的测试依赖"),n("code",[s._v("go test")]),s._v("命令。编写测试代码和编写普通的Go代码过程是类似的，并不需要学习新的语法、规则或工具。")]),s._v(" "),n("p",[s._v("go test命令是一个按照一定约定和组织的测试代码的驱动程序。在包目录内，所有以"),n("code",[s._v("_test.go")]),s._v("为后缀名的源代码文件都是"),n("code",[s._v("go test")]),s._v("测试的一部分，不会被"),n("code",[s._v("go build")]),s._v("编译到最终的可执行文件中。")]),s._v(" "),n("p",[s._v("在"),n("code",[s._v("*_test.go")]),s._v("文件中有三种类型的函数，单元测试函数、基准测试函数和示例函数。")]),s._v(" "),n("table",[n("thead",[n("tr",[n("th",[s._v("类型")]),s._v(" "),n("th",[s._v("格式")]),s._v(" "),n("th",[s._v("作用")])])]),s._v(" "),n("tbody",[n("tr",[n("td",[s._v("测试函数")]),s._v(" "),n("td",[s._v("函数名前缀为Test")]),s._v(" "),n("td",[s._v("测试程序的一些逻辑行为是否正确")])]),s._v(" "),n("tr",[n("td",[s._v("基准函数")]),s._v(" "),n("td",[s._v("函数名前缀为Benchmark")]),s._v(" "),n("td",[s._v("测试函数的性能")])]),s._v(" "),n("tr",[n("td",[s._v("示例函数")]),s._v(" "),n("td",[s._v("函数名前缀为Example")]),s._v(" "),n("td",[s._v("为文档提供示例文档")])])])]),s._v(" "),n("p",[n("code",[s._v("go test")]),s._v("命令会遍历所有的"),n("code",[s._v("*_test.go")]),s._v("文件中符合上述命名规则的函数，然后生成一个临时的main包用于调用相应的测试函数，然后构建并运行、报告测试结果，最后清理测试中生成的临时文件。")]),s._v(" "),n("h2",{attrs:{id:"测试函数"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#测试函数"}},[s._v("#")]),s._v(" 测试函数")]),s._v(" "),n("h3",{attrs:{id:"测试函数的格式"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#测试函数的格式"}},[s._v("#")]),s._v(" 测试函数的格式")]),s._v(" "),n("p",[s._v("每个测试函数必须导入"),n("code",[s._v("testing")]),s._v("包，测试函数的基本格式（签名）如下：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("    func TestName(t *testing.T){\n        // ...\n    }\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br")])]),n("p",[s._v("测试函数的名字必须以"),n("code",[s._v("Test")]),s._v("开头，可选的后缀名必须以大写字母开头，举几个例子：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("    func TestAdd(t *testing.T){ ... }\n    func TestSum(t *testing.T){ ... }\n    func TestLog(t *testing.T){ ... }\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br")])]),n("p",[s._v("其中参数"),n("code",[s._v("t")]),s._v("用于报告测试失败和附加的日志信息。 "),n("code",[s._v("testing.T")]),s._v("的拥有的方法如下：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("    func (c *T) Error(args ...interface{})\n    func (c *T) Errorf(format string, args ...interface{})\n    func (c *T) Fail()\n    func (c *T) FailNow()\n    func (c *T) Failed() bool\n    func (c *T) Fatal(args ...interface{})\n    func (c *T) Fatalf(format string, args ...interface{})\n    func (c *T) Log(args ...interface{})\n    func (c *T) Logf(format string, args ...interface{})\n    func (c *T) Name() string\n    func (t *T) Parallel()\n    func (t *T) Run(name string, f func(t *T)) bool\n    func (c *T) Skip(args ...interface{})\n    func (c *T) SkipNow()\n    func (c *T) Skipf(format string, args ...interface{})\n    func (c *T) Skipped() bool\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br")])]),n("h3",{attrs:{id:"测试函数示例"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#测试函数示例"}},[s._v("#")]),s._v(" 测试函数示例")]),s._v(" "),n("p",[s._v("就像细胞是构成我们身体的基本单位，一个软件程序也是由很多单元组件构成的。单元组件可以是函数、结构体、方法和最终用户可能依赖的任意东西。总之我们需要确保这些组件是能够正常运行的。单元测试是一些利用各种方法测试单元组件的程序，它会将结果与预期输出进行比较。")]),s._v(" "),n("p",[s._v("接下来，我们定义一个"),n("code",[s._v("split")]),s._v("的包，包中定义了一个"),n("code",[s._v("Split")]),s._v("函数，具体实现如下：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('    // split/split.go\n    \n    package split\n    \n    import "strings"\n    \n    // split package with a single split function.\n    \n    // Split slices s into all substrings separated by sep and\n    // returns a slice of the substrings between those separators.\n    func Split(s, sep string) (result []string) {\n    \ti := strings.Index(s, sep)\n    \n    \tfor i > -1 {\n    \t\tresult = append(result, s[:i])\n    \t\ts = s[i+1:]\n    \t\ti = strings.Index(s, sep)\n    \t}\n    \tresult = append(result, s)\n    \treturn\n    }\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br")])]),n("p",[s._v("在当前目录下，我们创建一个"),n("code",[s._v("split_test.go")]),s._v("的测试文件，并定义一个测试函数如下：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('    // split/split_test.go\n    \n    package split\n    \n    import (\n    \t"reflect"\n    \t"testing"\n    )\n    \n    func TestSplit(t *testing.T) { // 测试函数名必须以Test开头，必须接收一个*testing.T类型参数\n    \tgot := Split("a:b:c", ":")         // 程序输出的结果\n    \twant := []string{"a", "b", "c"}    // 期望的结果\n    \tif !reflect.DeepEqual(want, got) { // 因为slice不能比较直接，借助反射包中的方法比较\n    \t\tt.Errorf("excepted:%v, got:%v", want, got) // 测试失败输出错误提示\n    \t}\n    }\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br")])]),n("p",[s._v("此时"),n("code",[s._v("split")]),s._v("这个包中的文件如下：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("    split $ ls -l\n    total 16\n    -rw-r--r--  1 liwenzhou  staff  408  4 29 15:50 split.go\n    -rw-r--r--  1 liwenzhou  staff  466  4 29 16:04 split_test.go\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br")])]),n("p",[s._v("在"),n("code",[s._v("split")]),s._v("包路径下，执行"),n("code",[s._v("go test")]),s._v("命令，可以看到输出结果如下：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("    split $ go test\n    PASS\n    ok      github.com/Q1mi/studygo/code_demo/test_demo/split       0.005s\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br")])]),n("p",[s._v("一个测试用例有点单薄，我们再编写一个测试使用多个字符切割字符串的例子，在"),n("code",[s._v("split_test.go")]),s._v("中添加如下测试函数：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('    func TestMoreSplit(t *testing.T) {\n    \tgot := Split("abcd", "bc")\n    \twant := []string{"a", "d"}\n    \tif !reflect.DeepEqual(want, got) {\n    \t\tt.Errorf("excepted:%v, got:%v", want, got)\n    \t}\n    }\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br")])]),n("p",[s._v("再次运行"),n("code",[s._v("go test")]),s._v("命令，输出结果如下：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("    split $ go test\n    --- FAIL: TestMultiSplit (0.00s)\n        split_test.go:20: excepted:[a d], got:[a cd]\n    FAIL\n    exit status 1\n    FAIL    github.com/Q1mi/studygo/code_demo/test_demo/split       0.006s\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br")])]),n("p",[s._v("这一次，我们的测试失败了。我们可以为"),n("code",[s._v("go test")]),s._v("命令添加"),n("code",[s._v("-v")]),s._v("参数，查看测试函数名称和运行时间：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("    split $ go test -v\n    === RUN   TestSplit\n    --- PASS: TestSplit (0.00s)\n    === RUN   TestMoreSplit\n    --- FAIL: TestMoreSplit (0.00s)\n        split_test.go:21: excepted:[a d], got:[a cd]\n    FAIL\n    exit status 1\n    FAIL    github.com/Q1mi/studygo/code_demo/test_demo/split       0.005s\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br")])]),n("p",[s._v("这一次我们能清楚的看到是"),n("code",[s._v("TestMoreSplit")]),s._v("这个测试没有成功。 还可以在"),n("code",[s._v("go test")]),s._v("命令后添加"),n("code",[s._v("-run")]),s._v("参数，它对应一个正则表达式，只有函数名匹配上的测试函数才会被"),n("code",[s._v("go test")]),s._v("命令执行。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('    split $ go test -v -run="More"\n    === RUN   TestMoreSplit\n    --- FAIL: TestMoreSplit (0.00s)\n        split_test.go:21: excepted:[a d], got:[a cd]\n    FAIL\n    exit status 1\n    FAIL    github.com/Q1mi/studygo/code_demo/test_demo/split       0.006s\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br")])]),n("p",[s._v("现在我们回过头来解决我们程序中的问题。很显然我们最初的"),n("code",[s._v("split")]),s._v("函数并没有考虑到sep为多个字符的情况，我们来修复下这个Bug：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('    package split\n    \n    import "strings"\n    \n    // split package with a single split function.\n    \n    // Split slices s into all substrings separated by sep and\n    // returns a slice of the substrings between those separators.\n    func Split(s, sep string) (result []string) {\n    \ti := strings.Index(s, sep)\n    \n    \tfor i > -1 {\n    \t\tresult = append(result, s[:i])\n    \t\ts = s[i+len(sep):] // 这里使用len(sep)获取sep的长度\n    \t\ti = strings.Index(s, sep)\n    \t}\n    \tresult = append(result, s)\n    \treturn\n    }\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br")])]),n("p",[s._v("这一次我们再来测试一下，我们的程序。注意，当我们修改了我们的代码之后不要仅仅执行那些失败的测试函数，我们应该完整的运行所有的测试，保证不会因为修改代码而引入了新的问题。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("    split $ go test -v\n    === RUN   TestSplit\n    --- PASS: TestSplit (0.00s)\n    === RUN   TestMoreSplit\n    --- PASS: TestMoreSplit (0.00s)\n    PASS\n    ok      github.com/Q1mi/studygo/code_demo/test_demo/split       0.006s\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br")])]),n("p",[s._v("这一次我们的测试都通过了。")]),s._v(" "),n("h3",{attrs:{id:"测试组"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#测试组"}},[s._v("#")]),s._v(" 测试组")]),s._v(" "),n("p",[s._v("我们现在还想要测试一下"),n("code",[s._v("split")]),s._v("函数对中文字符串的支持，这个时候我们可以再编写一个"),n("code",[s._v("TestChineseSplit")]),s._v("测试函数，但是我们也可以使用如下更友好的一种方式来添加更多的测试用例。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('    func TestSplit(t *testing.T) {\n       // 定义一个测试用例类型\n    \ttype test struct {\n    \t\tinput string\n    \t\tsep   string\n    \t\twant  []string\n    \t}\n    \t// 定义一个存储测试用例的切片\n    \ttests := []test{\n    \t\t{input: "a:b:c", sep: ":", want: []string{"a", "b", "c"}},\n    \t\t{input: "a:b:c", sep: ",", want: []string{"a:b:c"}},\n    \t\t{input: "abcd", sep: "bc", want: []string{"a", "d"}},\n    \t\t{input: "沙河有沙又有河", sep: "沙", want: []string{"河有", "又有河"}},\n    \t}\n    \t// 遍历切片，逐一执行测试用例\n    \tfor _, tc := range tests {\n    \t\tgot := Split(tc.input, tc.sep)\n    \t\tif !reflect.DeepEqual(got, tc.want) {\n    \t\t\tt.Errorf("excepted:%v, got:%v", tc.want, got)\n    \t\t}\n    \t}\n    }\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br")])]),n("p",[s._v("我们通过上面的代码把多个测试用例合到一起，再次执行"),n("code",[s._v("go test")]),s._v("命令。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("    split $ go test -v\n    === RUN   TestSplit\n    --- FAIL: TestSplit (0.00s)\n        split_test.go:42: excepted:[河有 又有河], got:[ 河有 又有河]\n    FAIL\n    exit status 1\n    FAIL    github.com/Q1mi/studygo/code_demo/test_demo/split       0.006s\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br")])]),n("p",[s._v("我们的测试出现了问题，仔细看打印的测试失败提示信息："),n("code",[s._v("excepted:[河有 又有河], got:[ 河有 又有河]")]),s._v("，你会发现"),n("code",[s._v("[ 河有 又有河]")]),s._v("中有个不明显的空串，这种情况下十分推荐使用"),n("code",[s._v("%#v")]),s._v("的格式化方式。")]),s._v(" "),n("p",[s._v("我们修改下测试用例的格式化输出错误提示部分：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('    func TestSplit(t *testing.T) {\n       ...\n       \n    \tfor _, tc := range tests {\n    \t\tgot := Split(tc.input, tc.sep)\n    \t\tif !reflect.DeepEqual(got, tc.want) {\n    \t\t\tt.Errorf("excepted:%#v, got:%#v", tc.want, got)\n    \t\t}\n    \t}\n    }\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br")])]),n("p",[s._v("此时运行"),n("code",[s._v("go test")]),s._v("命令后就能看到比较明显的提示信息了：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('    split $ go test -v\n    === RUN   TestSplit\n    --- FAIL: TestSplit (0.00s)\n        split_test.go:42: excepted:[]string{"河有", "又有河"}, got:[]string{"", "河有", "又有河"}\n    FAIL\n    exit status 1\n    FAIL    github.com/Q1mi/studygo/code_demo/test_demo/split       0.006s\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br")])]),n("h3",{attrs:{id:"子测试"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#子测试"}},[s._v("#")]),s._v(" 子测试")]),s._v(" "),n("p",[s._v("看起来都挺不错的，但是如果测试用例比较多的时候，我们是没办法一眼看出来具体是哪个测试用例失败了。我们可能会想到下面的解决办法：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('    func TestSplit(t *testing.T) {\n    \ttype test struct { // 定义test结构体\n    \t\tinput string\n    \t\tsep   string\n    \t\twant  []string\n    \t}\n    \ttests := map[string]test{ // 测试用例使用map存储\n    \t\t"simple":      {input: "a:b:c", sep: ":", want: []string{"a", "b", "c"}},\n    \t\t"wrong sep":   {input: "a:b:c", sep: ",", want: []string{"a:b:c"}},\n    \t\t"more sep":    {input: "abcd", sep: "bc", want: []string{"a", "d"}},\n    \t\t"leading sep": {input: "沙河有沙又有河", sep: "沙", want: []string{"河有", "又有河"}},\n    \t}\n    \tfor name, tc := range tests {\n    \t\tgot := Split(tc.input, tc.sep)\n    \t\tif !reflect.DeepEqual(got, tc.want) {\n    \t\t\tt.Errorf("name:%s excepted:%#v, got:%#v", name, tc.want, got) // 将测试用例的name格式化输出\n    \t\t}\n    \t}\n    }\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br")])]),n("p",[s._v("上面的做法是能够解决问题的。同时Go1.7+中新增了子测试，我们可以按照如下方式使用"),n("code",[s._v("t.Run")]),s._v("执行子测试：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('    func TestSplit(t *testing.T) {\n    \ttype test struct { // 定义test结构体\n    \t\tinput string\n    \t\tsep   string\n    \t\twant  []string\n    \t}\n    \ttests := map[string]test{ // 测试用例使用map存储\n    \t\t"simple":      {input: "a:b:c", sep: ":", want: []string{"a", "b", "c"}},\n    \t\t"wrong sep":   {input: "a:b:c", sep: ",", want: []string{"a:b:c"}},\n    \t\t"more sep":    {input: "abcd", sep: "bc", want: []string{"a", "d"}},\n    \t\t"leading sep": {input: "沙河有沙又有河", sep: "沙", want: []string{"河有", "又有河"}},\n    \t}\n    \tfor name, tc := range tests {\n    \t\tt.Run(name, func(t *testing.T) { // 使用t.Run()执行子测试\n    \t\t\tgot := Split(tc.input, tc.sep)\n    \t\t\tif !reflect.DeepEqual(got, tc.want) {\n    \t\t\t\tt.Errorf("excepted:%#v, got:%#v", tc.want, got)\n    \t\t\t}\n    \t\t})\n    \t}\n    }\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br")])]),n("p",[s._v("此时我们再执行"),n("code",[s._v("go test")]),s._v("命令就能够看到更清晰的输出内容了：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('    split $ go test -v\n    === RUN   TestSplit\n    === RUN   TestSplit/leading_sep\n    === RUN   TestSplit/simple\n    === RUN   TestSplit/wrong_sep\n    === RUN   TestSplit/more_sep\n    --- FAIL: TestSplit (0.00s)\n        --- FAIL: TestSplit/leading_sep (0.00s)\n            split_test.go:83: excepted:[]string{"河有", "又有河"}, got:[]string{"", "河有", "又有河"}\n        --- PASS: TestSplit/simple (0.00s)\n        --- PASS: TestSplit/wrong_sep (0.00s)\n        --- PASS: TestSplit/more_sep (0.00s)\n    FAIL\n    exit status 1\n    FAIL    github.com/Q1mi/studygo/code_demo/test_demo/split       0.006s\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br")])]),n("p",[s._v("这个时候我们要把测试用例中的错误修改回来：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('    func TestSplit(t *testing.T) {\n    \t...\n    \ttests := map[string]test{ // 测试用例使用map存储\n    \t\t"simple":      {input: "a:b:c", sep: ":", want: []string{"a", "b", "c"}},\n    \t\t"wrong sep":   {input: "a:b:c", sep: ",", want: []string{"a:b:c"}},\n    \t\t"more sep":    {input: "abcd", sep: "bc", want: []string{"a", "d"}},\n    \t\t"leading sep": {input: "沙河有沙又有河", sep: "沙", want: []string{"", "河有", "又有河"}},\n    \t}\n    \t...\n    }\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br")])]),n("p",[s._v("我们都知道可以通过"),n("code",[s._v("-run=RegExp")]),s._v("来指定运行的测试用例，还可以通过"),n("code",[s._v("/")]),s._v("来指定要运行的子测试用例，例如："),n("code",[s._v("go test -v -run=Split/simple")]),s._v("只会运行"),n("code",[s._v("simple")]),s._v("对应的子测试用例。")]),s._v(" "),n("h3",{attrs:{id:"测试覆盖率"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#测试覆盖率"}},[s._v("#")]),s._v(" 测试覆盖率")]),s._v(" "),n("p",[s._v("测试覆盖率是你的代码被测试套件覆盖的百分比。通常我们使用的都是语句的覆盖率，也就是在测试中至少被运行一次的代码占总代码的比例。")]),s._v(" "),n("p",[s._v("Go提供内置功能来检查你的代码覆盖率。我们可以使用"),n("code",[s._v("go test -cover")]),s._v("来查看测试覆盖率。例如：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("    split $ go test -cover\n    PASS\n    coverage: 100.0% of statements\n    ok      github.com/Q1mi/studygo/code_demo/test_demo/split       0.005s\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br")])]),n("p",[s._v("从上面的结果可以看到我们的测试用例覆盖了100%的代码。")]),s._v(" "),n("p",[s._v("Go还提供了一个额外的"),n("code",[s._v("-coverprofile")]),s._v("参数，用来将覆盖率相关的记录信息输出到一个文件。例如：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("    split $ go test -cover -coverprofile=c.out\n    PASS\n    coverage: 100.0% of statements\n    ok      github.com/Q1mi/studygo/code_demo/test_demo/split       0.005s\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br")])]),n("p",[s._v("上面的命令会将覆盖率相关的信息输出到当前文件夹下面的"),n("code",[s._v("c.out")]),s._v("文件中，然后我们执行"),n("code",[s._v("go tool cover -html=c.out")]),s._v("，使用"),n("code",[s._v("cover")]),s._v("工具来处理生成的记录信息，该命令会打开本地的浏览器窗口生成一个HTML报告。 "),n("img",{attrs:{src:"/go_img/cover.png",alt:"Go test cover"}}),s._v(" 上图中每个用绿色标记的语句块表示被覆盖了，而红色的表示没有被覆盖。")]),s._v(" "),n("h2",{attrs:{id:"基准测试"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#基准测试"}},[s._v("#")]),s._v(" 基准测试")]),s._v(" "),n("h3",{attrs:{id:"基准测试函数格式"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#基准测试函数格式"}},[s._v("#")]),s._v(" 基准测试函数格式")]),s._v(" "),n("p",[s._v("基准测试就是在一定的工作负载之下检测程序性能的一种方法。基准测试的基本格式如下：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("    func BenchmarkName(b *testing.B){\n        // ...\n    }\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br")])]),n("p",[s._v("基准测试以"),n("code",[s._v("Benchmark")]),s._v("为前缀，需要一个"),n("code",[s._v("*testing.B")]),s._v("类型的参数b，基准测试必须要执行"),n("code",[s._v("b.N")]),s._v("次，这样的测试才有对照性，"),n("code",[s._v("b.N")]),s._v("的值是系统根据实际情况去调整的，从而保证测试的稳定性。 "),n("code",[s._v("testing.B")]),s._v("拥有的方法如下：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("    func (c *B) Error(args ...interface{})\n    func (c *B) Errorf(format string, args ...interface{})\n    func (c *B) Fail()\n    func (c *B) FailNow()\n    func (c *B) Failed() bool\n    func (c *B) Fatal(args ...interface{})\n    func (c *B) Fatalf(format string, args ...interface{})\n    func (c *B) Log(args ...interface{})\n    func (c *B) Logf(format string, args ...interface{})\n    func (c *B) Name() string\n    func (b *B) ReportAllocs()\n    func (b *B) ResetTimer()\n    func (b *B) Run(name string, f func(b *B)) bool\n    func (b *B) RunParallel(body func(*PB))\n    func (b *B) SetBytes(n int64)\n    func (b *B) SetParallelism(p int)\n    func (c *B) Skip(args ...interface{})\n    func (c *B) SkipNow()\n    func (c *B) Skipf(format string, args ...interface{})\n    func (c *B) Skipped() bool\n    func (b *B) StartTimer()\n    func (b *B) StopTimer()\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br")])]),n("h3",{attrs:{id:"基准测试示例"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#基准测试示例"}},[s._v("#")]),s._v(" 基准测试示例")]),s._v(" "),n("p",[s._v("我们为split包中的"),n("code",[s._v("Split")]),s._v("函数编写基准测试如下：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('    func BenchmarkSplit(b *testing.B) {\n    \tfor i := 0; i < b.N; i++ {\n    \t\tSplit("沙河有沙又有河", "沙")\n    \t}\n    }\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br")])]),n("p",[s._v("基准测试并不会默认执行，需要增加"),n("code",[s._v("-bench")]),s._v("参数，所以我们通过执行"),n("code",[s._v("go test -bench=Split")]),s._v("命令执行基准测试，输出结果如下：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("    split $ go test -bench=Split\n    goos: darwin\n    goarch: amd64\n    pkg: github.com/Q1mi/studygo/code_demo/test_demo/split\n    BenchmarkSplit-8        10000000               203 ns/op\n    PASS\n    ok      github.com/Q1mi/studygo/code_demo/test_demo/split       2.255s\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br")])]),n("p",[s._v("其中"),n("code",[s._v("BenchmarkSplit-8")]),s._v("表示对Split函数进行基准测试，数字"),n("code",[s._v("8")]),s._v("表示"),n("code",[s._v("GOMAXPROCS")]),s._v("的值，这个对于并发基准测试很重要。"),n("code",[s._v("10000000")]),s._v("和"),n("code",[s._v("203ns/op")]),s._v("表示每次调用"),n("code",[s._v("Split")]),s._v("函数耗时"),n("code",[s._v("203ns")]),s._v("，这个结果是"),n("code",[s._v("10000000")]),s._v("次调用的平均值。")]),s._v(" "),n("p",[s._v("我们还可以为基准测试添加"),n("code",[s._v("-benchmem")]),s._v("参数，来获得内存分配的统计数据。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("    split $ go test -bench=Split -benchmem\n    goos: darwin\n    goarch: amd64\n    pkg: github.com/Q1mi/studygo/code_demo/test_demo/split\n    BenchmarkSplit-8        10000000               215 ns/op             112 B/op          3 allocs/op\n    PASS\n    ok      github.com/Q1mi/studygo/code_demo/test_demo/split       2.394s\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br")])]),n("p",[s._v("其中，"),n("code",[s._v("112 B/op")]),s._v("表示每次操作内存分配了112字节，"),n("code",[s._v("3 allocs/op")]),s._v("则表示每次操作进行了3次内存分配。 我们将我们的"),n("code",[s._v("Split")]),s._v("函数优化如下：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("    func Split(s, sep string) (result []string) {\n    \tresult = make([]string, 0, strings.Count(s, sep)+1)\n    \ti := strings.Index(s, sep)\n    \tfor i > -1 {\n    \t\tresult = append(result, s[:i])\n    \t\ts = s[i+len(sep):] // 这里使用len(sep)获取sep的长度\n    \t\ti = strings.Index(s, sep)\n    \t}\n    \tresult = append(result, s)\n    \treturn\n    }\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br")])]),n("p",[s._v("这一次我们提前使用make函数将result初始化为一个容量足够大的切片，而不再像之前一样通过调用append函数来追加。我们来看一下这个改进会带来多大的性能提升：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("    split $ go test -bench=Split -benchmem\n    goos: darwin\n    goarch: amd64\n    pkg: github.com/Q1mi/studygo/code_demo/test_demo/split\n    BenchmarkSplit-8        10000000               127 ns/op              48 B/op          1 allocs/op\n    PASS\n    ok      github.com/Q1mi/studygo/code_demo/test_demo/split       1.423s\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br")])]),n("p",[s._v("这个使用make函数提前分配内存的改动，减少了2/3的内存分配次数，并且减少了一半的内存分配。")]),s._v(" "),n("h3",{attrs:{id:"性能比较函数"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#性能比较函数"}},[s._v("#")]),s._v(" 性能比较函数")]),s._v(" "),n("p",[s._v("上面的基准测试只能得到给定操作的绝对耗时，但是在很多性能问题是发生在两个不同操作之间的相对耗时，比如同一个函数处理1000个元素的耗时与处理1万甚至100万个元素的耗时的差别是多少？再或者对于同一个任务究竟使用哪种算法性能最佳？我们通常需要对两个不同算法的实现使用相同的输入来进行基准比较测试。")]),s._v(" "),n("p",[s._v("性能比较函数通常是一个带有参数的函数，被多个不同的Benchmark函数传入不同的值来调用。举个例子如下：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("    func benchmark(b *testing.B, size int){/* ... */}\n    func Benchmark10(b *testing.B){ benchmark(b, 10) }\n    func Benchmark100(b *testing.B){ benchmark(b, 100) }\n    func Benchmark1000(b *testing.B){ benchmark(b, 1000) }\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br")])]),n("p",[s._v("例如我们编写了一个计算斐波那契数列的函数如下：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("    // fib.go\n    \n    // Fib 是一个计算第n个斐波那契数的函数\n    func Fib(n int) int {\n    \tif n < 2 {\n    \t\treturn n\n    \t}\n    \treturn Fib(n-1) + Fib(n-2)\n    }\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br")])]),n("p",[s._v("我们编写的性能比较函数如下：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("    // fib_test.go\n    \n    func benchmarkFib(b *testing.B, n int) {\n    \tfor i := 0; i < b.N; i++ {\n    \t\tFib(n)\n    \t}\n    }\n    \n    func BenchmarkFib1(b *testing.B)  { benchmarkFib(b, 1) }\n    func BenchmarkFib2(b *testing.B)  { benchmarkFib(b, 2) }\n    func BenchmarkFib3(b *testing.B)  { benchmarkFib(b, 3) }\n    func BenchmarkFib10(b *testing.B) { benchmarkFib(b, 10) }\n    func BenchmarkFib20(b *testing.B) { benchmarkFib(b, 20) }\n    func BenchmarkFib40(b *testing.B) { benchmarkFib(b, 40) }\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br")])]),n("p",[s._v("运行基准测试：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("    split $ go test -bench=.\n    goos: darwin\n    goarch: amd64\n    pkg: github.com/Q1mi/studygo/code_demo/test_demo/fib\n    BenchmarkFib1-8         1000000000               2.03 ns/op\n    BenchmarkFib2-8         300000000                5.39 ns/op\n    BenchmarkFib3-8         200000000                9.71 ns/op\n    BenchmarkFib10-8         5000000               325 ns/op\n    BenchmarkFib20-8           30000             42460 ns/op\n    BenchmarkFib40-8               2         638524980 ns/op\n    PASS\n    ok      github.com/Q1mi/studygo/code_demo/test_demo/fib 12.944s\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br")])]),n("p",[s._v("这里需要注意的是，默认情况下，每个基准测试至少运行1秒。如果在Benchmark函数返回时没有到1秒，则b.N的值会按1,2,5,10,20,50，…增加，并且函数再次运行。")]),s._v(" "),n("p",[s._v("最终的BenchmarkFib40只运行了两次，每次运行的平均值只有不到一秒。像这种情况下我们应该可以使用"),n("code",[s._v("-benchtime")]),s._v("标志增加最小基准时间，以产生更准确的结果。例如：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("    split $ go test -bench=Fib40 -benchtime=20s\n    goos: darwin\n    goarch: amd64\n    pkg: github.com/Q1mi/studygo/code_demo/test_demo/fib\n    BenchmarkFib40-8              50         663205114 ns/op\n    PASS\n    ok      github.com/Q1mi/studygo/code_demo/test_demo/fib 33.849s\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br")])]),n("p",[s._v("这一次"),n("code",[s._v("BenchmarkFib40")]),s._v("函数运行了50次，结果就会更准确一些了。")]),s._v(" "),n("p",[s._v("使用性能比较函数做测试的时候一个容易犯的错误就是把"),n("code",[s._v("b.N")]),s._v("作为输入的大小，例如以下两个例子都是错误的示范：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("    // 错误示范1\n    func BenchmarkFibWrong(b *testing.B) {\n    \tfor n := 0; n < b.N; n++ {\n    \t\tFib(n)\n    \t}\n    }\n    \n    // 错误示范2\n    func BenchmarkFibWrong2(b *testing.B) {\n    \tFib(b.N)\n    }\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br")])]),n("h3",{attrs:{id:"重置时间"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#重置时间"}},[s._v("#")]),s._v(" 重置时间")]),s._v(" "),n("p",[n("code",[s._v("b.ResetTimer")]),s._v("之前的处理不会放到执行时间里，也不会输出到报告中，所以可以在之前做一些不计划作为测试报告的操作。例如：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('    func BenchmarkSplit(b *testing.B) {\n    \ttime.Sleep(5 * time.Second) // 假设需要做一些耗时的无关操作\n    \tb.ResetTimer()              // 重置计时器\n    \tfor i := 0; i < b.N; i++ {\n    \t\tSplit("沙河有沙又有河", "沙")\n    \t}\n    }\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br")])]),n("h3",{attrs:{id:"并行测试"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#并行测试"}},[s._v("#")]),s._v(" 并行测试")]),s._v(" "),n("p",[n("code",[s._v("func (b *B) RunParallel(body func(*PB))")]),s._v("会以并行的方式执行给定的基准测试。")]),s._v(" "),n("p",[n("code",[s._v("RunParallel")]),s._v("会创建出多个"),n("code",[s._v("goroutine")]),s._v("，并将"),n("code",[s._v("b.N")]),s._v("分配给这些"),n("code",[s._v("goroutine")]),s._v("执行， 其中"),n("code",[s._v("goroutine")]),s._v("数量的默认值为"),n("code",[s._v("GOMAXPROCS")]),s._v("。用户如果想要增加非CPU受限（non-CPU-bound）基准测试的并行性， 那么可以在"),n("code",[s._v("RunParallel")]),s._v("之前调用"),n("code",[s._v("SetParallelism")]),s._v(" 。"),n("code",[s._v("RunParallel")]),s._v("通常会与"),n("code",[s._v("-cpu")]),s._v("标志一同使用。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('    func BenchmarkSplitParallel(b *testing.B) {\n    \t// b.SetParallelism(1) // 设置使用的CPU数\n    \tb.RunParallel(func(pb *testing.PB) {\n    \t\tfor pb.Next() {\n    \t\t\tSplit("沙河有沙又有河", "沙")\n    \t\t}\n    \t})\n    }\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br")])]),n("p",[s._v("执行一下基准测试：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("    split $ go test -bench=.\n    goos: darwin\n    goarch: amd64\n    pkg: github.com/Q1mi/studygo/code_demo/test_demo/split\n    BenchmarkSplit-8                10000000               131 ns/op\n    BenchmarkSplitParallel-8        50000000                36.1 ns/op\n    PASS\n    ok      github.com/Q1mi/studygo/code_demo/test_demo/split       3.308s\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br")])]),n("p",[s._v("还可以通过在测试命令后添加"),n("code",[s._v("-cpu")]),s._v("参数如"),n("code",[s._v("go test -bench=. -cpu 1")]),s._v("来指定使用的CPU数量。")]),s._v(" "),n("h2",{attrs:{id:"setup与teardown"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#setup与teardown"}},[s._v("#")]),s._v(" Setup与TearDown")]),s._v(" "),n("p",[s._v("测试程序有时需要在测试之前进行额外的设置（setup）或在测试之后进行拆卸（teardown）。")]),s._v(" "),n("h3",{attrs:{id:"testmain"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#testmain"}},[s._v("#")]),s._v(" TestMain")]),s._v(" "),n("p",[s._v("通过在"),n("code",[s._v("*_test.go")]),s._v("文件中定义"),n("code",[s._v("TestMain")]),s._v("函数来可以在测试之前进行额外的设置（setup）或在测试之后进行拆卸（teardown）操作。")]),s._v(" "),n("p",[s._v("如果测试文件包含函数:"),n("code",[s._v("func TestMain(m *testing.M)")]),s._v("那么生成的测试会先调用 TestMain(m)，然后再运行具体测试。"),n("code",[s._v("TestMain")]),s._v("运行在主"),n("code",[s._v("goroutine")]),s._v("中, 可以在调用 "),n("code",[s._v("m.Run")]),s._v("前后做任何设置（setup）和拆卸（teardown）。退出测试的时候应该使用"),n("code",[s._v("m.Run")]),s._v("的返回值作为参数调用"),n("code",[s._v("os.Exit")]),s._v("。")]),s._v(" "),n("p",[s._v("一个使用"),n("code",[s._v("TestMain")]),s._v("来设置Setup和TearDown的示例如下：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('    func TestMain(m *testing.M) {\n    \tfmt.Println("write setup code here...") // 测试之前的做一些设置\n    \t// 如果 TestMain 使用了 flags，这里应该加上flag.Parse()\n    \tretCode := m.Run()                         // 执行测试\n    \tfmt.Println("write teardown code here...") // 测试之后做一些拆卸工作\n    \tos.Exit(retCode)                           // 退出测试\n    }\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br")])]),n("p",[s._v("需要注意的是：在调用"),n("code",[s._v("TestMain")]),s._v("时, "),n("code",[s._v("flag.Parse")]),s._v("并没有被调用。所以如果"),n("code",[s._v("TestMain")]),s._v(" 依赖于command-line标志 (包括 testing 包的标记), 则应该显示的调用"),n("code",[s._v("flag.Parse")]),s._v("。")]),s._v(" "),n("h3",{attrs:{id:"子测试的setup与teardown"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#子测试的setup与teardown"}},[s._v("#")]),s._v(" 子测试的Setup与Teardown")]),s._v(" "),n("p",[s._v("有时候我们可能需要为每个测试集设置Setup与Teardown，也有可能需要为每个子测试设置Setup与Teardown。下面我们定义两个函数工具函数如下：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('    // 测试集的Setup与Teardown\n    func setupTestCase(t *testing.T) func(t *testing.T) {\n    \tt.Log("如有需要在此执行:测试之前的setup")\n    \treturn func(t *testing.T) {\n    \t\tt.Log("如有需要在此执行:测试之后的teardown")\n    \t}\n    }\n    \n    // 子测试的Setup与Teardown\n    func setupSubTest(t *testing.T) func(t *testing.T) {\n    \tt.Log("如有需要在此执行:子测试之前的setup")\n    \treturn func(t *testing.T) {\n    \t\tt.Log("如有需要在此执行:子测试之后的teardown")\n    \t}\n    }\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br")])]),n("p",[s._v("使用方式如下：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('    func TestSplit(t *testing.T) {\n    \ttype test struct { // 定义test结构体\n    \t\tinput string\n    \t\tsep   string\n    \t\twant  []string\n    \t}\n    \ttests := map[string]test{ // 测试用例使用map存储\n    \t\t"simple":      {input: "a:b:c", sep: ":", want: []string{"a", "b", "c"}},\n    \t\t"wrong sep":   {input: "a:b:c", sep: ",", want: []string{"a:b:c"}},\n    \t\t"more sep":    {input: "abcd", sep: "bc", want: []string{"a", "d"}},\n    \t\t"leading sep": {input: "沙河有沙又有河", sep: "沙", want: []string{"", "河有", "又有河"}},\n    \t}\n    \tteardownTestCase := setupTestCase(t) // 测试之前执行setup操作\n    \tdefer teardownTestCase(t)            // 测试之后执行testdoen操作\n    \n    \tfor name, tc := range tests {\n    \t\tt.Run(name, func(t *testing.T) { // 使用t.Run()执行子测试\n    \t\t\tteardownSubTest := setupSubTest(t) // 子测试之前执行setup操作\n    \t\t\tdefer teardownSubTest(t)           // 测试之后执行testdoen操作\n    \t\t\tgot := Split(tc.input, tc.sep)\n    \t\t\tif !reflect.DeepEqual(got, tc.want) {\n    \t\t\t\tt.Errorf("excepted:%#v, got:%#v", tc.want, got)\n    \t\t\t}\n    \t\t})\n    \t}\n    }\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br"),n("span",{staticClass:"line-number"},[s._v("23")]),n("br"),n("span",{staticClass:"line-number"},[s._v("24")]),n("br"),n("span",{staticClass:"line-number"},[s._v("25")]),n("br"),n("span",{staticClass:"line-number"},[s._v("26")]),n("br")])]),n("p",[s._v("测试结果如下：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("    split $ go test -v\n    === RUN   TestSplit\n    === RUN   TestSplit/simple\n    === RUN   TestSplit/wrong_sep\n    === RUN   TestSplit/more_sep\n    === RUN   TestSplit/leading_sep\n    --- PASS: TestSplit (0.00s)\n        split_test.go:71: 如有需要在此执行:测试之前的setup\n        --- PASS: TestSplit/simple (0.00s)\n            split_test.go:79: 如有需要在此执行:子测试之前的setup\n            split_test.go:81: 如有需要在此执行:子测试之后的teardown\n        --- PASS: TestSplit/wrong_sep (0.00s)\n            split_test.go:79: 如有需要在此执行:子测试之前的setup\n            split_test.go:81: 如有需要在此执行:子测试之后的teardown\n        --- PASS: TestSplit/more_sep (0.00s)\n            split_test.go:79: 如有需要在此执行:子测试之前的setup\n            split_test.go:81: 如有需要在此执行:子测试之后的teardown\n        --- PASS: TestSplit/leading_sep (0.00s)\n            split_test.go:79: 如有需要在此执行:子测试之前的setup\n            split_test.go:81: 如有需要在此执行:子测试之后的teardown\n        split_test.go:73: 如有需要在此执行:测试之后的teardown\n    === RUN   ExampleSplit\n    --- PASS: ExampleSplit (0.00s)\n    PASS\n    ok      github.com/Q1mi/studygo/code_demo/test_demo/split       0.006s\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br"),n("span",{staticClass:"line-number"},[s._v("23")]),n("br"),n("span",{staticClass:"line-number"},[s._v("24")]),n("br"),n("span",{staticClass:"line-number"},[s._v("25")]),n("br")])]),n("h2",{attrs:{id:"示例函数"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#示例函数"}},[s._v("#")]),s._v(" 示例函数")]),s._v(" "),n("h3",{attrs:{id:"示例函数的格式"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#示例函数的格式"}},[s._v("#")]),s._v(" 示例函数的格式")]),s._v(" "),n("p",[s._v("被"),n("code",[s._v("go test")]),s._v("特殊对待的第三种函数就是示例函数，它们的函数名以"),n("code",[s._v("Example")]),s._v("为前缀。它们既没有参数也没有返回值。标准格式如下：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("    func ExampleName() {\n        // ...\n    }\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br")])]),n("h3",{attrs:{id:"示例函数示例"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#示例函数示例"}},[s._v("#")]),s._v(" 示例函数示例")]),s._v(" "),n("p",[s._v("下面的代码是我们为"),n("code",[s._v("Split")]),s._v("函数编写的一个示例函数：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('    func ExampleSplit() {\n    \tfmt.Println(split.Split("a:b:c", ":"))\n    \tfmt.Println(split.Split("沙河有沙又有河", "沙"))\n    \t// Output:\n    \t// [a b c]\n    \t// [ 河有 又有河]\n    }\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br")])]),n("p",[s._v("为你的代码编写示例代码有如下三个用处：")]),s._v(" "),n("ol",[n("li",[n("p",[s._v("示例函数能够作为文档直接使用，例如基于web的godoc中能把示例函数与对应的函数或包相关联。")])]),s._v(" "),n("li",[n("p",[s._v("示例函数只要包含了"),n("code",[s._v("// Output:")]),s._v("也是可以通过"),n("code",[s._v("go test")]),s._v("运行的可执行测试。")]),s._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[s._v("split $ go test -run Example\nPASS\nok      github.com/Q1mi/studygo/code_demo/test_demo/split       0.006s\n")])])])]),s._v(" "),n("li",[n("p",[s._v("示例函数提供了可以直接运行的示例代码，可以直接在"),n("code",[s._v("golang.org")]),s._v("的"),n("code",[s._v("godoc")]),s._v("文档服务器上使用"),n("code",[s._v("Go Playground")]),s._v("运行示例代码。下图为"),n("code",[s._v("strings.ToUpper")]),s._v("函数在Playground的示例函数效果。 "),n("img",{attrs:{src:"/go_img/example.png",alt:"Go Playground"}})])])]),s._v(" "),n("h2",{attrs:{id:"练习题"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#练习题"}},[s._v("#")]),s._v(" 练习题")]),s._v(" "),n("ol",[n("li",[s._v("编写一个回文检测函数，并为其编写单元测试和基准测试，根据测试的结果逐步对其进行优化。（回文：一个字符串正序和逆序一样，如“Madam,I’mAdam”、“油灯少灯油”等。）")])])])}),[],!1,null,null,null);t.default=a.exports}}]);