(window.webpackJsonp=window.webpackJsonp||[]).push([[167],{867:function(n,e,t){"use strict";t.r(e);var i=t(5),a=Object(i.a)({},(function(){var n=this,e=n.$createElement,t=n._self._c||e;return t("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[t("h2",{attrs:{id:"前言"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#前言"}},[n._v("#")]),n._v(" 前言")]),n._v(" "),t("p",[n._v("最开始蘑菇博客收集用户访问日志，是直接在请求接口里面进行编写的，比如像下面这样")]),n._v(" "),t("p",[t("img",{attrs:{src:"http://image.moguit.cn/f3b9e96ea8334a9ea534c9b61aa7bee8",alt:""}})]),n._v(" "),t("p",[n._v("很显然这种方法是非常笨的一种方法，因为它直接侵入了我们的业务代码，引入无关的操作，因此这次主要就是通过spring aop + 自定义接口，来收集用户的访问日志")]),n._v(" "),t("h2",{attrs:{id:"编写自定义接口"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#编写自定义接口"}},[n._v("#")]),n._v(" 编写自定义接口")]),n._v(" "),t("p",[n._v("首先我们需要创建一个自定义接口")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[n._v('package com.moxi.mogublog.web.log;\n\nimport com.moxi.mougblog.base.enums.EBehavior;\nimport com.moxi.mougblog.base.enums.PlatformEnum;\n\nimport java.lang.annotation.ElementType;\nimport java.lang.annotation.Retention;\nimport java.lang.annotation.RetentionPolicy;\nimport java.lang.annotation.Target;\n\n/**\n * 日志记录、自定义注解\n *\n * @author 陌溪\n * @date 2020年2月27日08:55:02\n */\n@Target(ElementType.METHOD)\n@Retention(RetentionPolicy.RUNTIME)\npublic @interface BussinessLog {\n\n    /**\n     * 业务名称\n     *\n     * @return\n     */\n    String value() default "";\n\n    /**\n     * 用户行为\n     *\n     * @return\n     */\n    EBehavior behavior();\n\n    /**\n     * 平台，默认为WEB端\n     */\n    PlatformEnum platform() default PlatformEnum.WEB;\n\n    /**\n     * 是否将当前日志记录到数据库中\n     */\n    boolean save() default true;\n}\n')])])]),t("p",[n._v("这里的用户行为使用了枚举类，方便扩展，目前共有15中行为")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[n._v('package com.moxi.mougblog.base.enums;\n\nimport com.moxi.mogublog.utils.JsonUtils;\nimport com.moxi.mougblog.base.global.BaseSysConf;\n\nimport java.util.HashMap;\nimport java.util.Map;\n\npublic enum EBehavior {\n\n    BLOG_TAG("点击标签", "blog_tag"),\n    BLOG_SORT("点击博客分类", "blog_sort"),\n    BLOG_CONTNET("点击博客", "blog_content"),\n    BLOG_PRAISE("点赞", "blog_praise"),\n    FRIENDSHIP_LINK("点击友情链接", "friendship_link"),\n    BLOG_SEARCH("点击搜索", "blog_search"),\n    STUDY_VIDEO("点击学习视频", "study_video"),\n    VISIT_PAGE("访问页面", "visit_page"),\n    VISIT_SORT("点击归档", "visit_sort"),\n    BLOG_AUTHOR("点击作者", "blog_author"),\n    PUBLISH_COMMENT("发表评论", "publish_comment"),\n    DELETE_COMMENT("删除评论", "delete_comment"),\n    REPORT_COMMENT("举报评论", "report_comment"),\n    VISIT_CLASSIFY("点击分类", "visit_classify");\n\n\n    private String content;\n    private String behavior;\n\n    private EBehavior(String content, String behavior) {\n        this.content = content;\n        this.behavior = behavior;\n    }\n\n    /**\n     * 根据value返回枚举类型，主要在switch中使用\n     * @param value\n     * @return\n     */\n    public static EBehavior getByValue(String value) {\n        for(EBehavior behavior: values()) {\n            if(behavior.getBehavior() == value) {\n                return behavior;\n            }\n        }\n        return null;\n    }\n\n    public static Map<String, String> getModuleAndOtherData(EBehavior behavior, Map<String, Object> nameAndArgsMap, String bussinessName) {\n        String otherData = "";\n        String moduleUid = "";\n        switch (behavior) {\n            case BLOG_AUTHOR: {\n                // 判断是否是点击作者\n                if(nameAndArgsMap.get(BaseSysConf.AUTHOR) != null) {\n                    otherData = nameAndArgsMap.get(BaseSysConf.AUTHOR).toString();\n                }\n            };break;\n            case BLOG_SORT: {\n                // 判断是否点击博客分类\n                if(nameAndArgsMap.get(BaseSysConf.BLOG_SORT_UID) != null) {\n                    moduleUid = nameAndArgsMap.get(BaseSysConf.BLOG_SORT_UID).toString();\n                }\n            };break;\n            case BLOG_TAG: {\n                // 判断是否点击博客标签\n                if(nameAndArgsMap.get(BaseSysConf.TAG_UID) != null) {\n                    moduleUid = nameAndArgsMap.get(BaseSysConf.TAG_UID).toString();\n                }\n            };break;\n            case BLOG_SEARCH: {\n                // 判断是否进行搜索\n                if(nameAndArgsMap.get(BaseSysConf.KEYWORDS) != null) {\n                    otherData = nameAndArgsMap.get(BaseSysConf.KEYWORDS).toString();\n                }\n            };break;\n            case VISIT_CLASSIFY: {\n                // 判断是否点击分类\n                if(nameAndArgsMap.get(BaseSysConf.BLOG_SORT_UID) != null) {\n                    moduleUid = nameAndArgsMap.get(BaseSysConf.BLOG_SORT_UID).toString();\n                }\n            };break;\n            case VISIT_SORT: {\n                // 判断是否点击归档\n                if(nameAndArgsMap.get(BaseSysConf.MONTH_DATE) != null) {\n                    otherData = nameAndArgsMap.get(BaseSysConf.MONTH_DATE).toString();\n                }\n            };break;\n            case BLOG_CONTNET: {\n                // 判断是否博客详情\n                if(nameAndArgsMap.get(BaseSysConf.UID) != null) {\n                    moduleUid = nameAndArgsMap.get(BaseSysConf.UID).toString();\n                }\n            };break;\n            case BLOG_PRAISE: {\n                // 判断是否给博客点赞\n                if(nameAndArgsMap.get(BaseSysConf.UID) != null) {\n                    moduleUid = nameAndArgsMap.get(BaseSysConf.UID).toString();\n                }\n            };break;\n            case VISIT_PAGE: {\n                // 访问页面\n                otherData = bussinessName;\n            };break;\n            case PUBLISH_COMMENT: {\n                Object object = nameAndArgsMap.get(BaseSysConf.COMMENT_VO);\n                Map<String, Object> map = JsonUtils.objectToMap(object);\n                if(map.get(BaseSysConf.CONTENT) != null) {\n                    otherData = map.get(BaseSysConf.CONTENT).toString();\n                }\n            };break;\n            case REPORT_COMMENT: {\n                // 举报评论\n                Object object = nameAndArgsMap.get(BaseSysConf.COMMENT_VO);\n                Map<String, Object> map = JsonUtils.objectToMap(object);\n                if(map.get(BaseSysConf.CONTENT) != null) {\n                    otherData = map.get(BaseSysConf.CONTENT).toString();\n                }\n            };break;\n            case DELETE_COMMENT: {\n                // 删除评论\n                Object object = nameAndArgsMap.get(BaseSysConf.COMMENT_VO);\n                Map<String, Object> map = JsonUtils.objectToMap(object);\n                if(map.get(BaseSysConf.CONTENT) != null) {\n                    otherData = map.get(BaseSysConf.CONTENT).toString();\n                }\n            };break;\n        }\n        Map<String, String> result = new HashMap<>();\n        result.put(BaseSysConf.MODULE_UID, moduleUid);\n        result.put(BaseSysConf.OTHER_DATA, otherData);\n        return result;\n    }\n\n    public String getContent() {\n        return content;\n    }\n\n    public void setContent(String content) {\n        this.content = content;\n    }\n\n    public String getBehavior() {\n        return behavior;\n    }\n\n    public void setBehavior(String behavior) {\n        this.behavior = behavior;\n    }\n\n\n}\n')])])]),t("h2",{attrs:{id:"编写aop代码"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#编写aop代码"}},[n._v("#")]),n._v(" 编写AOP代码")]),n._v(" "),t("p",[n._v("在AOP中，我们使用环绕通知的方式，来收集用户的访问日志")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[n._v('package com.moxi.mogublog.web.log;\n\nimport com.moxi.mogublog.utils.AopUtils;\nimport com.moxi.mogublog.utils.AspectUtil;\nimport com.moxi.mogublog.utils.IpUtils;\nimport com.moxi.mogublog.web.global.SysConf;\nimport com.moxi.mogublog.xo.entity.ExceptionLog;\nimport com.moxi.mogublog.xo.entity.SysLog;\nimport com.moxi.mogublog.xo.service.WebVisitService;\nimport com.moxi.mougblog.base.enums.EBehavior;\nimport com.moxi.mougblog.base.holder.RequestHolder;\nimport com.moxi.mougblog.base.util.RequestUtil;\nimport lombok.extern.slf4j.Slf4j;\nimport org.aspectj.lang.ProceedingJoinPoint;\nimport org.aspectj.lang.annotation.Around;\nimport org.aspectj.lang.annotation.Aspect;\nimport org.aspectj.lang.annotation.Pointcut;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Component;\n\nimport javax.servlet.http.HttpServletRequest;\nimport java.lang.reflect.Method;\nimport java.util.Map;\n\n/**\n * 日志切面\n */\n@Aspect\n@Component\n@Slf4j\npublic class LoggerAspect {\n\n    private SysLog sysLog;\n\n    private ExceptionLog exceptionLog;\n\n    @Autowired\n    private WebVisitService webVisitService;\n\n\n    @Pointcut(value = "@annotation(bussinessLog)")\n    public void pointcut(BussinessLog bussinessLog) {\n\n    }\n\n    @Around(value = "pointcut(bussinessLog)")\n    public Object doAround(ProceedingJoinPoint joinPoint, BussinessLog bussinessLog) throws Throwable {\n\n        //先执行业务\n        Object result = joinPoint.proceed();\n\n        try {\n            // 日志收集\n            handle(joinPoint);\n        } catch (Exception e) {\n            log.error("日志记录出错!", e);\n        }\n\n        return result;\n    }\n\n    private void handle(ProceedingJoinPoint point) throws Exception {\n\n        HttpServletRequest request = RequestHolder.getRequest();\n\n        Method currentMethod = AspectUtil.INSTANCE.getMethod(point);\n        //获取操作名称\n        BussinessLog annotation = currentMethod.getAnnotation(BussinessLog.class);\n\n        boolean save = annotation.save();\n\n        EBehavior behavior = annotation.behavior();\n\n        String bussinessName = AspectUtil.INSTANCE.parseParams(point.getArgs(), annotation.value());\n\n        String ua = RequestUtil.getUa();\n\n        log.info("{} | {} - {} {} - {}", bussinessName, IpUtils.getIpAddr(request), RequestUtil.getMethod(), RequestUtil.getRequestUrl(), ua);\n        if (!save) {\n            return;\n        }\n\n        // 获取参数名称和值\n        Map<String, Object> nameAndArgsMap = AopUtils.getFieldsName(point);\n\n        Map<String, String> result = EBehavior.getModuleAndOtherData(behavior, nameAndArgsMap, bussinessName);\n\n        AopUtils.getFieldsName(point);\n\n        if (result != null) {\n            String userUid = "";\n            if (request.getAttribute(SysConf.USER_UID) != null) {\n                userUid = request.getAttribute(SysConf.USER_UID).toString();\n            }\n            webVisitService.addWebVisit(userUid, request, behavior.getBehavior(), result.get(SysConf.MODULE_UID), result.get(SysConf.OTHER_DATA));\n        }\n    }\n}\n')])])]),t("p",[n._v("这里使用了一个AspectUtils工具类")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[n._v('package com.moxi.mogublog.utils;\n\nimport com.alibaba.fastjson.JSON;\nimport org.aspectj.lang.JoinPoint;\nimport org.aspectj.lang.Signature;\nimport org.aspectj.lang.reflect.MethodSignature;\nimport org.springframework.util.StringUtils;\n\nimport java.lang.reflect.Method;\nimport java.util.List;\n\n/**\n * AOP相关的工具\n * @author 陌溪\n * @date 2020年2月27日08:44:28\n */\npublic enum AspectUtil {\n\n    INSTANCE;\n\n    /**\n     * 获取以类路径为前缀的键\n     *\n     * @param point 当前切面执行的方法\n     */\n    public String getKey(JoinPoint point, String prefix) {\n        String keyPrefix = "";\n        if (!StringUtils.isEmpty(prefix)) {\n            keyPrefix += prefix;\n        }\n        keyPrefix += getClassName(point);\n        return keyPrefix;\n    }\n\n    /**\n     * 获取当前切面执行的方法所在的class\n     *\n     * @param point 当前切面执行的方法\n     */\n    public String getClassName(JoinPoint point) {\n        return point.getTarget().getClass().getName().replaceAll("\\\\.", "_");\n    }\n\n    /**\n     * 获取当前切面执行的方法的方法名\n     *\n     * @param point 当前切面执行的方法\n     */\n    public Method getMethod(JoinPoint point) throws NoSuchMethodException {\n        Signature sig = point.getSignature();\n        MethodSignature msig = (MethodSignature) sig;\n        Object target = point.getTarget();\n        return target.getClass().getMethod(msig.getName(), msig.getParameterTypes());\n    }\n\n    public String parseParams(Object[] params, String bussinessName) {\n        if (bussinessName.contains("{") && bussinessName.contains("}")) {\n            List<String> result = RegexUtils.match(bussinessName, "(?<=\\\\{)(\\\\d+)");\n            for (String s : result) {\n                int index = Integer.parseInt(s);\n                bussinessName = bussinessName.replaceAll("\\\\{" + index + "}", JSON.toJSONString(params[index - 1]));\n            }\n        }\n        return bussinessName;\n    }\n}\n')])])]),t("p",[n._v("以及AOPUtils")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[n._v("package com.moxi.mogublog.utils;\n\nimport com.alibaba.fastjson.JSON;\nimport lombok.extern.slf4j.Slf4j;\nimport org.apache.ibatis.javassist.*;\nimport org.apache.ibatis.javassist.bytecode.CodeAttribute;\nimport org.apache.ibatis.javassist.bytecode.LocalVariableAttribute;\nimport org.apache.ibatis.javassist.bytecode.MethodInfo;\nimport org.aspectj.lang.JoinPoint;\nimport org.aspectj.lang.ProceedingJoinPoint;\nimport org.aspectj.lang.Signature;\nimport org.aspectj.lang.reflect.MethodSignature;\nimport org.springframework.core.DefaultParameterNameDiscoverer;\nimport org.springframework.core.ParameterNameDiscoverer;\nimport org.springframework.web.multipart.MultipartFile;\n\nimport javax.servlet.ServletRequest;\nimport javax.servlet.ServletResponse;\nimport java.lang.reflect.Method;\nimport java.util.HashMap;\nimport java.util.Map;\n\n/**\n * 切面相关工具类\n *\n * @author: 陌溪\n * @create: 2020-01-21-12:34\n */\n@Slf4j\npublic class AopUtils {\n\n    /**\n     * 获取参数名和值\n     * @param joinPoint\n     * @return\n     */\n    public static Map getFieldsName(ProceedingJoinPoint joinPoint) throws ClassNotFoundException, NoSuchMethodException {\n        // 参数值\n        Object[] args = joinPoint.getArgs();\n\n        Signature signature = joinPoint.getSignature();\n        MethodSignature methodSignature = (MethodSignature) signature;\n        String[] parameterNames = methodSignature.getParameterNames();\n\n        // 通过map封装参数和参数值\n        HashMap<String, Object> paramMap = new HashMap();\n        for (int i = 0; i < parameterNames.length; i++) {\n            paramMap.put(parameterNames[i], args[i]);\n        }\n        return paramMap;\n    }\n}\n")])])]),t("p",[n._v("需要注意的是，我们在进行日志收集的时候，采用的是@Async注解修饰，也就是异步调用")]),n._v(" "),t("blockquote",[t("p",[n._v("在Spring中，基于@Async标注的方法，称之为异步方法；这些方法将在执行的时候，将会在独立的线程中被执行，调用者无需等待它的完成，即可继续其他的操作。")])]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[n._v('    @Async\n    @Override\n    public void addWebVisit(String userUid, HttpServletRequest request, String behavior, String moduleUid, String otherData) {\n\n        //增加记录（可以考虑使用AOP）\n        Map<String, String> map = IpUtils.getOsAndBrowserInfo(request);\n        String os = map.get("OS");\n        String browser = map.get("BROWSER");\n        WebVisit webVisit = new WebVisit();\n        String ip = IpUtils.getIpAddr(request);\n        webVisit.setIp(ip);\n\n        //从Redis中获取IP来源\n        String jsonResult = stringRedisTemplate.opsForValue().get("IP_SOURCE:" + ip);\n        if (StringUtils.isEmpty(jsonResult)) {\n            String addresses = IpUtils.getAddresses("ip=" + ip, "utf-8");\n            if (StringUtils.isNotEmpty(addresses)) {\n                webVisit.setIpSource(addresses);\n                stringRedisTemplate.opsForValue().set("IP_SOURCE" + BaseSysConf.REDIS_SEGMENTATION + ip, addresses, 24, TimeUnit.HOURS);\n            }\n        } else {\n            webVisit.setIpSource(jsonResult);\n        }\n        webVisit.setOs(os);\n        webVisit.setBrowser(browser);\n        webVisit.setUserUid(userUid);\n        webVisit.setBehavior(behavior);\n        webVisit.setModuleUid(moduleUid);\n        webVisit.setOtherData(otherData);\n        webVisit.insert();\n    }\n')])])]),t("p",[n._v("tip：在使用@Async注解时候，需要在启动类中加入  @EnableAsync  才能够开启异步功能")]),n._v(" "),t("h2",{attrs:{id:"指定接口进行收集"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#指定接口进行收集"}},[n._v("#")]),n._v(" 指定接口进行收集")]),n._v(" "),t("p",[n._v("最后我们使用  @BussinessLog 在我们需要收集的日志出进行标记，标记后AOP的环绕通知 就会获取该接口的相关参数，将其实例化到数据库中")]),n._v(" "),t("p",[n._v("示例代码如下：")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[n._v('    @BussinessLog(value = "发表评论", behavior = EBehavior.PUBLISH_COMMENT)\n    @ApiOperation(value = "增加评论", notes = "增加评论")\n    @PostMapping("/add")\n    public String add(@Validated({Insert.class}) @RequestBody CommentVO commentVO, BindingResult result) {\n\n        QueryWrapper<WebConfig> queryWrapper = new QueryWrapper<>();\n        queryWrapper.eq(SysConf.STATUS, EStatus.ENABLE);\n        WebConfig webConfig = webConfigService.getOne(queryWrapper);\n        if (SysConf.CAN_NOT_COMMENT.equals(webConfig.getStartComment())) {\n            return ResultUtil.result(SysConf.ERROR, MessageConf.NO_COMMENTS_OPEN);\n        }\n        ThrowableUtils.checkParamArgument(result);\n\n        if (commentVO.getContent().length() > SysConf.TWO_TWO_FIVE) {\n            return ResultUtil.result(SysConf.ERROR, MessageConf.COMMENT_CAN_NOT_MORE_THAN_225);\n        }\n        Comment comment = new Comment();\n        comment.setSource(commentVO.getSource());\n        comment.setBlogUid(commentVO.getBlogUid());\n        comment.setContent(commentVO.getContent());\n        comment.setUserUid(commentVO.getUserUid());\n        comment.setToUid(commentVO.getToUid());\n        comment.setToUserUid(commentVO.getToUserUid());\n        comment.setStatus(EStatus.ENABLE);\n        comment.insert();\n\n        User user = userService.getById(commentVO.getUserUid());\n\n        //获取图片\n        if (StringUtils.isNotEmpty(user.getAvatar())) {\n            String pictureList = this.pictureFeignClient.getPicture(user.getAvatar(), SysConf.FILE_SEGMENTATION);\n            if (webUtils.getPicture(pictureList).size() > 0) {\n                user.setPhotoUrl(webUtils.getPicture(pictureList).get(0));\n            }\n        }\n        comment.setUser(user);\n\n        return ResultUtil.result(SysConf.SUCCESS, comment);\n    }\n')])])]),t("p",[n._v("最后用户的日志记录也能够成功记录下来了")]),n._v(" "),t("p",[t("img",{attrs:{src:"http://image.moguit.cn/6211208ae36e4523ae620cd9cf0e180d",alt:""}})])])}),[],!1,null,null,null);e.default=a.exports}}]);