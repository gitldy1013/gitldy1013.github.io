(window.webpackJsonp=window.webpackJsonp||[]).push([[584],{1287:function(n,s,a){"use strict";a.r(s);var t=a(5),e=Object(t.a)({},(function(){var n=this,s=n.$createElement,a=n._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[a("h1",{attrs:{id:"并发是编程里面一个非常重要的概念-go语言在语言层面天生支持并发-这也是go语言流行的一个很重要的原因。"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#并发是编程里面一个非常重要的概念-go语言在语言层面天生支持并发-这也是go语言流行的一个很重要的原因。"}},[n._v("#")]),n._v(" 并发是编程里面一个非常重要的概念，Go语言在语言层面天生支持并发，这也是Go语言流行的一个很重要的原因。")]),n._v(" "),a("h2",{attrs:{id:"go语言中的并发编程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#go语言中的并发编程"}},[n._v("#")]),n._v(" Go语言中的并发编程")]),n._v(" "),a("h3",{attrs:{id:"并发与并行"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#并发与并行"}},[n._v("#")]),n._v(" 并发与并行")]),n._v(" "),a("p",[n._v("并发：同一时间段内执行多个任务（你在用微信和两个女朋友聊天）。")]),n._v(" "),a("p",[n._v("并行：同一时刻执行多个任务（你和你朋友都在用微信和女朋友聊天）。")]),n._v(" "),a("p",[n._v("Go语言的并发通过"),a("code",[n._v("goroutine")]),n._v("实现。"),a("code",[n._v("goroutine")]),n._v("类似于线程，属于用户态的线程，我们可以根据需要创建成千上万个"),a("code",[n._v("goroutine")]),n._v("并发工作。"),a("code",[n._v("goroutine")]),n._v("是由Go语言的运行时（runtime）调度完成，而线程是由操作系统调度完成。")]),n._v(" "),a("p",[n._v("Go语言还提供"),a("code",[n._v("channel")]),n._v("在多个"),a("code",[n._v("goroutine")]),n._v("间进行通信。"),a("code",[n._v("goroutine")]),n._v("和"),a("code",[n._v("channel")]),n._v("是 Go 语言秉承的 CSP（Communicating Sequential Process）并发模式的重要实现基础。")]),n._v(" "),a("h3",{attrs:{id:"goroutine"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#goroutine"}},[n._v("#")]),n._v(" goroutine")]),n._v(" "),a("p",[n._v("在java/c++中我们要实现并发编程的时候，我们通常需要自己维护一个线程池，并且需要自己去包装一个又一个的任务，同时需要自己去调度线程执行任务并维护上下文切换，这一切通常会耗费程序员大量的心智。那么能不能有一种机制，程序员只需要定义很多个任务，让系统去帮助我们把这些任务分配到CPU上实现并发执行呢？")]),n._v(" "),a("p",[n._v("Go语言中的"),a("code",[n._v("goroutine")]),n._v("就是这样一种机制，"),a("code",[n._v("goroutine")]),n._v("的概念类似于线程，但 "),a("code",[n._v("goroutine")]),n._v("是由Go的运行时（runtime）调度和管理的。Go程序会智能地将 goroutine 中的任务合理地分配给每个CPU。Go语言之所以被称为现代化的编程语言，就是因为它在语言层面已经内置了调度和上下文切换的机制。")]),n._v(" "),a("p",[n._v("在Go语言编程中你不需要去自己写进程、线程、协程，你的技能包里只有一个技能–"),a("code",[n._v("goroutine")]),n._v("，当你需要让某个任务并发执行的时候，你只需要把这个任务包装成一个函数，开启一个"),a("code",[n._v("goroutine")]),n._v("去执行这个函数就可以了，就是这么简单粗暴。")]),n._v(" "),a("h4",{attrs:{id:"使用goroutine"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#使用goroutine"}},[n._v("#")]),n._v(" 使用goroutine")]),n._v(" "),a("p",[n._v("Go语言中使用"),a("code",[n._v("goroutine")]),n._v("非常简单，只需要在调用函数的时候在前面加上"),a("code",[n._v("go")]),n._v("关键字，就可以为一个函数创建一个"),a("code",[n._v("goroutine")]),n._v("。")]),n._v(" "),a("p",[n._v("一个"),a("code",[n._v("goroutine")]),n._v("必定对应一个函数，可以创建多个"),a("code",[n._v("goroutine")]),n._v("去执行相同的函数。")]),n._v(" "),a("h4",{attrs:{id:"启动单个goroutine"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#启动单个goroutine"}},[n._v("#")]),n._v(" 启动单个goroutine")]),n._v(" "),a("p",[n._v("启动goroutine的方式非常简单，只需要在调用的函数（普通函数和匿名函数）前面加上一个"),a("code",[n._v("go")]),n._v("关键字。")]),n._v(" "),a("p",[n._v("举个例子如下：")]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v('    func hello() {\n    \tfmt.Println("Hello Goroutine!")\n    }\n    func main() {\n    \thello()\n    \tfmt.Println("main goroutine done!")\n    }\n')])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br"),a("span",{staticClass:"line-number"},[n._v("5")]),a("br"),a("span",{staticClass:"line-number"},[n._v("6")]),a("br"),a("span",{staticClass:"line-number"},[n._v("7")]),a("br")])]),a("p",[n._v("这个示例中hello函数和下面的语句是串行的，执行的结果是打印完"),a("code",[n._v("Hello Goroutine!")]),n._v("后打印"),a("code",[n._v("main goroutine done!")]),n._v("。")]),n._v(" "),a("p",[n._v("接下来我们在调用hello函数前面加上关键字"),a("code",[n._v("go")]),n._v("，也就是启动一个goroutine去执行hello这个函数。")]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v('    func main() {\n    \tgo hello() // 启动另外一个goroutine去执行hello函数\n    \tfmt.Println("main goroutine done!")\n    }\n')])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br")])]),a("p",[n._v("这一次的执行结果只打印了"),a("code",[n._v("main goroutine done!")]),n._v("，并没有打印"),a("code",[n._v("Hello Goroutine!")]),n._v("。为什么呢？")]),n._v(" "),a("p",[n._v("在程序启动时，Go程序就会为"),a("code",[n._v("main()")]),n._v("函数创建一个默认的"),a("code",[n._v("goroutine")]),n._v("。")]),n._v(" "),a("p",[n._v("当main()函数返回的时候该"),a("code",[n._v("goroutine")]),n._v("就结束了，所有在"),a("code",[n._v("main()")]),n._v("函数中启动的"),a("code",[n._v("goroutine")]),n._v("会一同结束，"),a("code",[n._v("main")]),n._v("函数所在的"),a("code",[n._v("goroutine")]),n._v("就像是权利的游戏中的夜王，其他的"),a("code",[n._v("goroutine")]),n._v("都是异鬼，夜王一死它转化的那些异鬼也就全部GG了。")]),n._v(" "),a("p",[n._v("所以我们要想办法让main函数等一等hello函数，最简单粗暴的方式就是"),a("code",[n._v("time.Sleep")]),n._v("了。")]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v('    func main() {\n    \tgo hello() // 启动另外一个goroutine去执行hello函数\n    \tfmt.Println("main goroutine done!")\n    \ttime.Sleep(time.Second)\n    }\n')])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br"),a("span",{staticClass:"line-number"},[n._v("5")]),a("br")])]),a("p",[n._v("执行上面的代码你会发现，这一次先打印"),a("code",[n._v("main goroutine done!")]),n._v("，然后紧接着打印"),a("code",[n._v("Hello Goroutine!")]),n._v("。")]),n._v(" "),a("p",[n._v("首先为什么会先打印"),a("code",[n._v("main goroutine done!")]),n._v("是因为我们在创建新的goroutine的时候需要花费一些时间，而此时main函数所在的"),a("code",[n._v("goroutine")]),n._v("是继续执行的。")]),n._v(" "),a("h4",{attrs:{id:"启动多个goroutine"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#启动多个goroutine"}},[n._v("#")]),n._v(" 启动多个goroutine")]),n._v(" "),a("p",[n._v("在Go语言中实现并发就是这样简单，我们还可以启动多个"),a("code",[n._v("goroutine")]),n._v("。让我们再来一个例子： （这里使用了"),a("code",[n._v("sync.WaitGroup")]),n._v("来实现goroutine的同步）")]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v('    var wg sync.WaitGroup\n    \n    func hello(i int) {\n    \tdefer wg.Done() // goroutine结束就登记-1\n    \tfmt.Println("Hello Goroutine!", i)\n    }\n    func main() {\n    \n    \tfor i := 0; i < 10; i++ {\n    \t\twg.Add(1) // 启动一个goroutine就登记+1\n    \t\tgo hello(i)\n    \t}\n    \twg.Wait() // 等待所有登记的goroutine都结束\n    }\n')])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br"),a("span",{staticClass:"line-number"},[n._v("5")]),a("br"),a("span",{staticClass:"line-number"},[n._v("6")]),a("br"),a("span",{staticClass:"line-number"},[n._v("7")]),a("br"),a("span",{staticClass:"line-number"},[n._v("8")]),a("br"),a("span",{staticClass:"line-number"},[n._v("9")]),a("br"),a("span",{staticClass:"line-number"},[n._v("10")]),a("br"),a("span",{staticClass:"line-number"},[n._v("11")]),a("br"),a("span",{staticClass:"line-number"},[n._v("12")]),a("br"),a("span",{staticClass:"line-number"},[n._v("13")]),a("br"),a("span",{staticClass:"line-number"},[n._v("14")]),a("br")])]),a("p",[n._v("多次执行上面的代码，会发现每次打印的数字的顺序都不一致。这是因为10个"),a("code",[n._v("goroutine")]),n._v("是并发执行的，而"),a("code",[n._v("goroutine")]),n._v("的调度是随机的。")]),n._v(" "),a("h3",{attrs:{id:"goroutine与线程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#goroutine与线程"}},[n._v("#")]),n._v(" goroutine与线程")]),n._v(" "),a("h4",{attrs:{id:"可增长的栈"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#可增长的栈"}},[n._v("#")]),n._v(" 可增长的栈")]),n._v(" "),a("p",[n._v("OS线程（操作系统线程）一般都有固定的栈内存（通常为2MB）,一个"),a("code",[n._v("goroutine")]),n._v("的栈在其生命周期开始时只有很小的栈（典型情况下2KB），"),a("code",[n._v("goroutine")]),n._v("的栈不是固定的，他可以按需增大和缩小，"),a("code",[n._v("goroutine")]),n._v("的栈大小限制可以达到1GB，虽然极少会用到这个大。所以在Go语言中一次创建十万左右的"),a("code",[n._v("goroutine")]),n._v("也是可以的。")]),n._v(" "),a("h4",{attrs:{id:"goroutine调度"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#goroutine调度"}},[n._v("#")]),n._v(" goroutine调度")]),n._v(" "),a("p",[a("code",[n._v("GPM")]),n._v("是Go语言运行时（runtime）层面的实现，是go语言自己实现的一套调度系统。区别于操作系统调度OS线程。")]),n._v(" "),a("ul",[a("li",[a("code",[n._v("G")]),n._v("很好理解，就是个goroutine的，里面除了存放本goroutine信息外 还有与所在P的绑定等信息。")]),n._v(" "),a("li",[a("code",[n._v("P")]),n._v("管理着一组goroutine队列，P里面会存储当前goroutine运行的上下文环境（函数指针，堆栈地址及地址边界），P会对自己管理的goroutine队列做一些调度（比如把占用CPU时间较长的goroutine暂停、运行后续的goroutine等等）当自己的队列消费完了就去全局队列里取，如果全局队列里也消费完了会去其他P的队列里抢任务。")]),n._v(" "),a("li",[a("code",[n._v("M（machine）")]),n._v("是Go运行时（runtime）对操作系统内核线程的虚拟， M与内核线程一般是一一映射的关系， 一个groutine最终是要放到M上执行的；")])]),n._v(" "),a("p",[n._v("P与M一般也是一一对应的。他们关系是： P管理着一组G挂载在M上运行。当一个G长久阻塞在一个M上时，runtime会新建一个M，阻塞G所在的P会把其他的G 挂载在新建的M上。当旧的G阻塞完成或者认为其已经死掉时 回收旧的M。")]),n._v(" "),a("p",[n._v("P的个数是通过"),a("code",[n._v("runtime.GOMAXPROCS")]),n._v("设定（最大256），Go1.5版本之后默认为物理线程数。 在并发量大的时候会增加一些P和M，但不会太多，切换太频繁的话得不偿失。")]),n._v(" "),a("p",[n._v("单从线程调度讲，Go语言相比起其他语言的优势在于OS线程是由OS内核来调度的，"),a("code",[n._v("goroutine")]),n._v("则是由Go运行时（runtime）自己的调度器调度的，这个调度器使用一个称为m:n调度的技术（复用/调度m个goroutine到n个OS线程）。 其一大特点是goroutine的调度是在用户态下完成的， 不涉及内核态与用户态之间的频繁切换，包括内存的分配与释放，都是在用户态维护着一块大的内存池， 不直接调用系统的malloc函数（除非内存池需要改变），成本比调度OS线程低很多。 另一方面充分利用了多核的硬件资源，近似的把若干goroutine均分在物理线程上， 再加上本身goroutine的超轻量，以上种种保证了go调度方面的性能。")]),n._v(" "),a("p",[a("a",{attrs:{href:"https://www.cnblogs.com/sunsky303/p/9705727.html",target:"_blank",rel:"noopener noreferrer"}},[n._v("点我了解更多"),a("OutboundLink")],1)]),n._v(" "),a("h4",{attrs:{id:"gomaxprocs"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#gomaxprocs"}},[n._v("#")]),n._v(" GOMAXPROCS")]),n._v(" "),a("p",[n._v("Go运行时的调度器使用"),a("code",[n._v("GOMAXPROCS")]),n._v("参数来确定需要使用多少个OS线程来同时执行Go代码。默认值是机器上的CPU核心数。例如在一个8核心的机器上，调度器会把Go代码同时调度到8个OS线程上（GOMAXPROCS是m:n调度中的n）。")]),n._v(" "),a("p",[n._v("Go语言中可以通过"),a("code",[n._v("runtime.GOMAXPROCS()")]),n._v("函数设置当前程序并发时占用的CPU逻辑核心数。")]),n._v(" "),a("p",[n._v("Go1.5版本之前，默认使用的是单核心执行。Go1.5版本之后，默认使用全部的CPU逻辑核心数。")]),n._v(" "),a("p",[n._v("我们可以通过将任务分配到不同的CPU逻辑核心上实现并行的效果，这里举个例子：")]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v('    func a() {\n    \tfor i := 1; i < 10; i++ {\n    \t\tfmt.Println("A:", i)\n    \t}\n    }\n    \n    func b() {\n    \tfor i := 1; i < 10; i++ {\n    \t\tfmt.Println("B:", i)\n    \t}\n    }\n    \n    func main() {\n    \truntime.GOMAXPROCS(1)\n    \tgo a()\n    \tgo b()\n    \ttime.Sleep(time.Second)\n    }\n')])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br"),a("span",{staticClass:"line-number"},[n._v("5")]),a("br"),a("span",{staticClass:"line-number"},[n._v("6")]),a("br"),a("span",{staticClass:"line-number"},[n._v("7")]),a("br"),a("span",{staticClass:"line-number"},[n._v("8")]),a("br"),a("span",{staticClass:"line-number"},[n._v("9")]),a("br"),a("span",{staticClass:"line-number"},[n._v("10")]),a("br"),a("span",{staticClass:"line-number"},[n._v("11")]),a("br"),a("span",{staticClass:"line-number"},[n._v("12")]),a("br"),a("span",{staticClass:"line-number"},[n._v("13")]),a("br"),a("span",{staticClass:"line-number"},[n._v("14")]),a("br"),a("span",{staticClass:"line-number"},[n._v("15")]),a("br"),a("span",{staticClass:"line-number"},[n._v("16")]),a("br"),a("span",{staticClass:"line-number"},[n._v("17")]),a("br"),a("span",{staticClass:"line-number"},[n._v("18")]),a("br")])]),a("p",[n._v("两个任务只有一个逻辑核心，此时是做完一个任务再做另一个任务。 将逻辑核心数设为2，此时两个任务并行执行，代码如下。")]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v('    func a() {\n    \tfor i := 1; i < 10; i++ {\n    \t\tfmt.Println("A:", i)\n    \t}\n    }\n    \n    func b() {\n    \tfor i := 1; i < 10; i++ {\n    \t\tfmt.Println("B:", i)\n    \t}\n    }\n    \n    func main() {\n    \truntime.GOMAXPROCS(2)\n    \tgo a()\n    \tgo b()\n    \ttime.Sleep(time.Second)\n    }\n')])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br"),a("span",{staticClass:"line-number"},[n._v("5")]),a("br"),a("span",{staticClass:"line-number"},[n._v("6")]),a("br"),a("span",{staticClass:"line-number"},[n._v("7")]),a("br"),a("span",{staticClass:"line-number"},[n._v("8")]),a("br"),a("span",{staticClass:"line-number"},[n._v("9")]),a("br"),a("span",{staticClass:"line-number"},[n._v("10")]),a("br"),a("span",{staticClass:"line-number"},[n._v("11")]),a("br"),a("span",{staticClass:"line-number"},[n._v("12")]),a("br"),a("span",{staticClass:"line-number"},[n._v("13")]),a("br"),a("span",{staticClass:"line-number"},[n._v("14")]),a("br"),a("span",{staticClass:"line-number"},[n._v("15")]),a("br"),a("span",{staticClass:"line-number"},[n._v("16")]),a("br"),a("span",{staticClass:"line-number"},[n._v("17")]),a("br"),a("span",{staticClass:"line-number"},[n._v("18")]),a("br")])]),a("p",[n._v("Go语言中的操作系统线程和goroutine的关系：")]),n._v(" "),a("ol",[a("li",[n._v("一个操作系统线程对应用户态多个goroutine。")]),n._v(" "),a("li",[n._v("go程序可以同时使用多个操作系统线程。")]),n._v(" "),a("li",[n._v("goroutine和OS线程是多对多的关系，即m:n。")])]),n._v(" "),a("h3",{attrs:{id:"channel"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#channel"}},[n._v("#")]),n._v(" channel")]),n._v(" "),a("p",[n._v("单纯地将函数并发执行是没有意义的。函数与函数间需要交换数据才能体现并发执行函数的意义。")]),n._v(" "),a("p",[n._v("虽然可以使用共享内存进行数据交换，但是共享内存在不同的"),a("code",[n._v("goroutine")]),n._v("中容易发生竞态问题。为了保证数据交换的正确性，必须使用互斥量对内存进行加锁，这种做法势必造成性能问题。")]),n._v(" "),a("p",[n._v("Go语言的并发模型是"),a("code",[n._v("CSP（Communicating Sequential Processes）")]),n._v("，提倡"),a("strong",[n._v("通过通信共享内存")]),n._v("而不是"),a("strong",[n._v("通过共享内存而实现通信")]),n._v("。")]),n._v(" "),a("p",[n._v("如果说"),a("code",[n._v("goroutine")]),n._v("是Go程序并发的执行体，"),a("code",[n._v("channel")]),n._v("就是它们之间的连接。"),a("code",[n._v("channel")]),n._v("是可以让一个"),a("code",[n._v("goroutine")]),n._v("发送特定值到另一个"),a("code",[n._v("goroutine")]),n._v("的通信机制。")]),n._v(" "),a("p",[n._v("Go 语言中的通道（channel）是一种特殊的类型。通道像一个传送带或者队列，总是遵循先入先出（First In First Out）的规则，保证收发数据的顺序。每一个通道都是一个具体类型的导管，也就是声明channel的时候需要为其指定元素类型。")]),n._v(" "),a("h4",{attrs:{id:"channel类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#channel类型"}},[n._v("#")]),n._v(" channel类型")]),n._v(" "),a("p",[a("code",[n._v("channel")]),n._v("是一种类型，一种引用类型。声明通道类型的格式如下：")]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("    var 变量 chan 元素类型\n")])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br")])]),a("p",[n._v("举几个例子：")]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("    var ch1 chan int   // 声明一个传递整型的通道\n    var ch2 chan bool  // 声明一个传递布尔型的通道\n    var ch3 chan []int // 声明一个传递int切片的通道\n")])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br")])]),a("h4",{attrs:{id:"创建channel"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#创建channel"}},[n._v("#")]),n._v(" 创建channel")]),n._v(" "),a("p",[n._v("通道是引用类型，通道类型的空值是"),a("code",[n._v("nil")]),n._v("。")]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("    var ch chan int\n    fmt.Println(ch) // <nil>\n")])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br")])]),a("p",[n._v("声明的通道后需要使用"),a("code",[n._v("make")]),n._v("函数初始化之后才能使用。")]),n._v(" "),a("p",[n._v("创建channel的格式如下：")]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("    make(chan 元素类型, [缓冲大小])\n")])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br")])]),a("p",[n._v("channel的缓冲大小是可选的。")]),n._v(" "),a("p",[n._v("举几个例子：")]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("    ch4 := make(chan int)\n    ch5 := make(chan bool)\n    ch6 := make(chan []int)\n")])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br")])]),a("h4",{attrs:{id:"channel操作"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#channel操作"}},[n._v("#")]),n._v(" channel操作")]),n._v(" "),a("p",[n._v("通道有发送（send）、接收(receive）和关闭（close）三种操作。")]),n._v(" "),a("p",[n._v("发送和接收都使用"),a("code",[n._v("<-")]),n._v("符号。")]),n._v(" "),a("p",[n._v("现在我们先使用以下语句定义一个通道：")]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("    ch := make(chan int)\n")])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br")])]),a("h5",{attrs:{id:"发送"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#发送"}},[n._v("#")]),n._v(" 发送")]),n._v(" "),a("p",[n._v("将一个值发送到通道中。")]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("    ch <- 10 // 把10发送到ch中\n")])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br")])]),a("h5",{attrs:{id:"接收"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#接收"}},[n._v("#")]),n._v(" 接收")]),n._v(" "),a("p",[n._v("从一个通道中接收值。")]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("    x := <- ch // 从ch中接收值并赋值给变量x\n    <-ch       // 从ch中接收值，忽略结果\n")])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br")])]),a("h5",{attrs:{id:"关闭"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#关闭"}},[n._v("#")]),n._v(" 关闭")]),n._v(" "),a("p",[n._v("我们通过调用内置的"),a("code",[n._v("close")]),n._v("函数来关闭通道。")]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("    close(ch)\n")])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br")])]),a("p",[n._v("关于关闭通道需要注意的事情是，只有在通知接收方goroutine所有的数据都发送完毕的时候才需要关闭通道。通道是可以被垃圾回收机制回收的，它和关闭文件是不一样的，在结束操作之后关闭文件是必须要做的，但关闭通道不是必须的。")]),n._v(" "),a("p",[n._v("关闭后的通道有以下特点：")]),n._v(" "),a("ol",[a("li",[n._v("对一个关闭的通道再发送值就会导致panic。")]),n._v(" "),a("li",[n._v("对一个关闭的通道进行接收会一直获取值直到通道为空。")]),n._v(" "),a("li",[n._v("对一个关闭的并且没有值的通道执行接收操作会得到对应类型的零值。")]),n._v(" "),a("li",[n._v("关闭一个已经关闭的通道会导致panic。")])]),n._v(" "),a("h4",{attrs:{id:"无缓冲的通道"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#无缓冲的通道"}},[n._v("#")]),n._v(" 无缓冲的通道")]),n._v(" "),a("p",[n._v("无缓冲的通道又称为阻塞的通道。我们来看一下下面的代码：")]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v('    func main() {\n    \tch := make(chan int)\n    \tch <- 10\n    \tfmt.Println("发送成功")\n    }\n')])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br"),a("span",{staticClass:"line-number"},[n._v("5")]),a("br")])]),a("p",[n._v("上面这段代码能够通过编译，但是执行的时候会出现以下错误：")]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("    fatal error: all goroutines are asleep - deadlock!\n    \n    goroutine 1 [chan send]:\n    main.main()\n            .../src/github.com/Q1mi/studygo/day06/channel02/main.go:8 +0x54\n")])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br"),a("span",{staticClass:"line-number"},[n._v("5")]),a("br")])]),a("p",[n._v("为什么会出现"),a("code",[n._v("deadlock")]),n._v("错误呢？")]),n._v(" "),a("p",[n._v("因为我们使用"),a("code",[n._v("ch := make(chan int)")]),n._v("创建的是无缓冲的通道，无缓冲的通道只有在有人接收值的时候才能发送值。就像你住的小区没有快递柜和代收点，快递员给你打电话必须要把这个物品送到你的手中，简单来说就是无缓冲的通道必须有接收才能发送。")]),n._v(" "),a("p",[n._v("上面的代码会阻塞在"),a("code",[n._v("ch <- 10")]),n._v("这一行代码形成死锁，那如何解决这个问题呢？")]),n._v(" "),a("p",[n._v("一种方法是启用一个"),a("code",[n._v("goroutine")]),n._v("去接收值，例如：")]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v('    func recv(c chan int) {\n    \tret := <-c\n    \tfmt.Println("接收成功", ret)\n    }\n    func main() {\n    \tch := make(chan int)\n    \tgo recv(ch) // 启用goroutine从通道接收值\n    \tch <- 10\n    \tfmt.Println("发送成功")\n    }\n')])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br"),a("span",{staticClass:"line-number"},[n._v("5")]),a("br"),a("span",{staticClass:"line-number"},[n._v("6")]),a("br"),a("span",{staticClass:"line-number"},[n._v("7")]),a("br"),a("span",{staticClass:"line-number"},[n._v("8")]),a("br"),a("span",{staticClass:"line-number"},[n._v("9")]),a("br"),a("span",{staticClass:"line-number"},[n._v("10")]),a("br")])]),a("p",[n._v("无缓冲通道上的发送操作会阻塞，直到另一个"),a("code",[n._v("goroutine")]),n._v("在该通道上执行接收操作，这时值才能发送成功，两个"),a("code",[n._v("goroutine")]),n._v("将继续执行。相反，如果接收操作先执行，接收方的goroutine将阻塞，直到另一个"),a("code",[n._v("goroutine")]),n._v("在该通道上发送一个值。")]),n._v(" "),a("p",[n._v("使用无缓冲通道进行通信将导致发送和接收的"),a("code",[n._v("goroutine")]),n._v("同步化。因此，无缓冲通道也被称为"),a("code",[n._v("同步通道")]),n._v("。")]),n._v(" "),a("h4",{attrs:{id:"有缓冲的通道"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#有缓冲的通道"}},[n._v("#")]),n._v(" 有缓冲的通道")]),n._v(" "),a("p",[n._v("解决上面问题的方法还有一种就是使用有缓冲区的通道。我们可以在使用make函数初始化通道的时候为其指定通道的容量，例如：")]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v('    func main() {\n    \tch := make(chan int, 1) // 创建一个容量为1的有缓冲区通道\n    \tch <- 10\n    \tfmt.Println("发送成功")\n    }\n')])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br"),a("span",{staticClass:"line-number"},[n._v("5")]),a("br")])]),a("p",[n._v("只要通道的容量大于零，那么该通道就是有缓冲的通道，通道的容量表示通道中能存放元素的数量。就像你小区的快递柜只有那么个多格子，格子满了就装不下了，就阻塞了，等到别人取走一个快递员就能往里面放一个。")]),n._v(" "),a("p",[n._v("我们可以使用内置的"),a("code",[n._v("len")]),n._v("函数获取通道内元素的数量，使用"),a("code",[n._v("cap")]),n._v("函数获取通道的容量，虽然我们很少会这么做。")]),n._v(" "),a("h4",{attrs:{id:"for-range从通道循环取值"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#for-range从通道循环取值"}},[n._v("#")]),n._v(" for range从通道循环取值")]),n._v(" "),a("p",[n._v("当向通道中发送完数据时，我们可以通过"),a("code",[n._v("close")]),n._v("函数来关闭通道。")]),n._v(" "),a("p",[n._v("当通道被关闭时，再往该通道发送值会引发"),a("code",[n._v("panic")]),n._v("，从该通道取值的操作会先取完通道中的值，再然后取到的值一直都是对应类型的零值。那如何判断一个通道是否被关闭了呢？")]),n._v(" "),a("p",[n._v("我们来看下面这个例子：")]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("    // channel 练习\n    func main() {\n    \tch1 := make(chan int)\n    \tch2 := make(chan int)\n    \t// 开启goroutine将0~100的数发送到ch1中\n    \tgo func() {\n    \t\tfor i := 0; i < 100; i++ {\n    \t\t\tch1 <- i\n    \t\t}\n    \t\tclose(ch1)\n    \t}()\n    \t// 开启goroutine从ch1中接收值，并将该值的平方发送到ch2中\n    \tgo func() {\n    \t\tfor {\n    \t\t\ti, ok := <-ch1 // 通道关闭后再取值ok=false\n    \t\t\tif !ok {\n    \t\t\t\tbreak\n    \t\t\t}\n    \t\t\tch2 <- i * i\n    \t\t}\n    \t\tclose(ch2)\n    \t}()\n    \t// 在主goroutine中从ch2中接收值打印\n    \tfor i := range ch2 { // 通道关闭后会退出for range循环\n    \t\tfmt.Println(i)\n    \t}\n    }\n")])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br"),a("span",{staticClass:"line-number"},[n._v("5")]),a("br"),a("span",{staticClass:"line-number"},[n._v("6")]),a("br"),a("span",{staticClass:"line-number"},[n._v("7")]),a("br"),a("span",{staticClass:"line-number"},[n._v("8")]),a("br"),a("span",{staticClass:"line-number"},[n._v("9")]),a("br"),a("span",{staticClass:"line-number"},[n._v("10")]),a("br"),a("span",{staticClass:"line-number"},[n._v("11")]),a("br"),a("span",{staticClass:"line-number"},[n._v("12")]),a("br"),a("span",{staticClass:"line-number"},[n._v("13")]),a("br"),a("span",{staticClass:"line-number"},[n._v("14")]),a("br"),a("span",{staticClass:"line-number"},[n._v("15")]),a("br"),a("span",{staticClass:"line-number"},[n._v("16")]),a("br"),a("span",{staticClass:"line-number"},[n._v("17")]),a("br"),a("span",{staticClass:"line-number"},[n._v("18")]),a("br"),a("span",{staticClass:"line-number"},[n._v("19")]),a("br"),a("span",{staticClass:"line-number"},[n._v("20")]),a("br"),a("span",{staticClass:"line-number"},[n._v("21")]),a("br"),a("span",{staticClass:"line-number"},[n._v("22")]),a("br"),a("span",{staticClass:"line-number"},[n._v("23")]),a("br"),a("span",{staticClass:"line-number"},[n._v("24")]),a("br"),a("span",{staticClass:"line-number"},[n._v("25")]),a("br"),a("span",{staticClass:"line-number"},[n._v("26")]),a("br"),a("span",{staticClass:"line-number"},[n._v("27")]),a("br")])]),a("p",[n._v("从上面的例子中我们看到有两种方式在接收值的时候判断该通道是否被关闭，不过我们通常使用的是"),a("code",[n._v("for range")]),n._v("的方式。使用"),a("code",[n._v("for range")]),n._v("遍历通道，当通道被关闭的时候就会退出"),a("code",[n._v("for range")]),n._v("。")]),n._v(" "),a("h4",{attrs:{id:"单向通道"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#单向通道"}},[n._v("#")]),n._v(" 单向通道")]),n._v(" "),a("p",[n._v("有的时候我们会将通道作为参数在多个任务函数间传递，很多时候我们在不同的任务函数中使用通道都会对其进行限制，比如限制通道在函数中只能发送或只能接收。")]),n._v(" "),a("p",[n._v("Go语言中提供了"),a("strong",[n._v("单向通道")]),n._v("来处理这种情况。例如，我们把上面的例子改造如下：")]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("    func counter(out chan<- int) {\n    \tfor i := 0; i < 100; i++ {\n    \t\tout <- i\n    \t}\n    \tclose(out)\n    }\n    \n    func squarer(out chan<- int, in <-chan int) {\n    \tfor i := range in {\n    \t\tout <- i * i\n    \t}\n    \tclose(out)\n    }\n    func printer(in <-chan int) {\n    \tfor i := range in {\n    \t\tfmt.Println(i)\n    \t}\n    }\n    \n    func main() {\n    \tch1 := make(chan int)\n    \tch2 := make(chan int)\n    \tgo counter(ch1)\n    \tgo squarer(ch2, ch1)\n    \tprinter(ch2)\n    }\n")])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br"),a("span",{staticClass:"line-number"},[n._v("5")]),a("br"),a("span",{staticClass:"line-number"},[n._v("6")]),a("br"),a("span",{staticClass:"line-number"},[n._v("7")]),a("br"),a("span",{staticClass:"line-number"},[n._v("8")]),a("br"),a("span",{staticClass:"line-number"},[n._v("9")]),a("br"),a("span",{staticClass:"line-number"},[n._v("10")]),a("br"),a("span",{staticClass:"line-number"},[n._v("11")]),a("br"),a("span",{staticClass:"line-number"},[n._v("12")]),a("br"),a("span",{staticClass:"line-number"},[n._v("13")]),a("br"),a("span",{staticClass:"line-number"},[n._v("14")]),a("br"),a("span",{staticClass:"line-number"},[n._v("15")]),a("br"),a("span",{staticClass:"line-number"},[n._v("16")]),a("br"),a("span",{staticClass:"line-number"},[n._v("17")]),a("br"),a("span",{staticClass:"line-number"},[n._v("18")]),a("br"),a("span",{staticClass:"line-number"},[n._v("19")]),a("br"),a("span",{staticClass:"line-number"},[n._v("20")]),a("br"),a("span",{staticClass:"line-number"},[n._v("21")]),a("br"),a("span",{staticClass:"line-number"},[n._v("22")]),a("br"),a("span",{staticClass:"line-number"},[n._v("23")]),a("br"),a("span",{staticClass:"line-number"},[n._v("24")]),a("br"),a("span",{staticClass:"line-number"},[n._v("25")]),a("br"),a("span",{staticClass:"line-number"},[n._v("26")]),a("br")])]),a("p",[n._v("其中，")]),n._v(" "),a("ul",[a("li",[a("code",[n._v("chan<- int")]),n._v("是一个只写单向通道（只能对其写入int类型值），可以对其执行发送操作但是不能执行接收操作；")]),n._v(" "),a("li",[a("code",[n._v("<-chan int")]),n._v("是一个只读单向通道（只能从其读取int类型值），可以对其执行接收操作但是不能执行发送操作。")])]),n._v(" "),a("p",[n._v("在函数传参及任何赋值操作中可以将双向通道转换为单向通道，但反过来是不可以的。")]),n._v(" "),a("h4",{attrs:{id:"通道总结"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#通道总结"}},[n._v("#")]),n._v(" 通道总结")]),n._v(" "),a("p",[a("code",[n._v("channel")]),n._v("常见的异常总结，如下图： "),a("img",{attrs:{src:"/go_img/channel01.png",alt:"channel异常总结"}})]),n._v(" "),a("p",[n._v("关闭已经关闭的"),a("code",[n._v("channel")]),n._v("也会引发"),a("code",[n._v("panic")]),n._v("。")]),n._v(" "),a("h3",{attrs:{id:"worker-pool-goroutine池"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#worker-pool-goroutine池"}},[n._v("#")]),n._v(" worker pool（goroutine池）")]),n._v(" "),a("p",[n._v("在工作中我们通常会使用可以指定启动的goroutine数量–"),a("code",[n._v("worker pool")]),n._v("模式，控制"),a("code",[n._v("goroutine")]),n._v("的数量，防止"),a("code",[n._v("goroutine")]),n._v("泄漏和暴涨。")]),n._v(" "),a("p",[n._v("一个简易的"),a("code",[n._v("work pool")]),n._v("示例代码如下：")]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v('    func worker(id int, jobs <-chan int, results chan<- int) {\n    \tfor j := range jobs {\n    \t\tfmt.Printf("worker:%d start job:%d\\n", id, j)\n    \t\ttime.Sleep(time.Second)\n    \t\tfmt.Printf("worker:%d end job:%d\\n", id, j)\n    \t\tresults <- j * 2\n    \t}\n    }\n    \n    \n    func main() {\n    \tjobs := make(chan int, 100)\n    \tresults := make(chan int, 100)\n    \t// 开启3个goroutine\n    \tfor w := 1; w <= 3; w++ {\n    \t\tgo worker(w, jobs, results)\n    \t}\n    \t// 5个任务\n    \tfor j := 1; j <= 5; j++ {\n    \t\tjobs <- j\n    \t}\n    \tclose(jobs)\n    \t// 输出结果\n    \tfor a := 1; a <= 5; a++ {\n    \t\t<-results\n    \t}\n    }\n')])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br"),a("span",{staticClass:"line-number"},[n._v("5")]),a("br"),a("span",{staticClass:"line-number"},[n._v("6")]),a("br"),a("span",{staticClass:"line-number"},[n._v("7")]),a("br"),a("span",{staticClass:"line-number"},[n._v("8")]),a("br"),a("span",{staticClass:"line-number"},[n._v("9")]),a("br"),a("span",{staticClass:"line-number"},[n._v("10")]),a("br"),a("span",{staticClass:"line-number"},[n._v("11")]),a("br"),a("span",{staticClass:"line-number"},[n._v("12")]),a("br"),a("span",{staticClass:"line-number"},[n._v("13")]),a("br"),a("span",{staticClass:"line-number"},[n._v("14")]),a("br"),a("span",{staticClass:"line-number"},[n._v("15")]),a("br"),a("span",{staticClass:"line-number"},[n._v("16")]),a("br"),a("span",{staticClass:"line-number"},[n._v("17")]),a("br"),a("span",{staticClass:"line-number"},[n._v("18")]),a("br"),a("span",{staticClass:"line-number"},[n._v("19")]),a("br"),a("span",{staticClass:"line-number"},[n._v("20")]),a("br"),a("span",{staticClass:"line-number"},[n._v("21")]),a("br"),a("span",{staticClass:"line-number"},[n._v("22")]),a("br"),a("span",{staticClass:"line-number"},[n._v("23")]),a("br"),a("span",{staticClass:"line-number"},[n._v("24")]),a("br"),a("span",{staticClass:"line-number"},[n._v("25")]),a("br"),a("span",{staticClass:"line-number"},[n._v("26")]),a("br"),a("span",{staticClass:"line-number"},[n._v("27")]),a("br")])]),a("h3",{attrs:{id:"select多路复用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#select多路复用"}},[n._v("#")]),n._v(" select多路复用")]),n._v(" "),a("p",[n._v("在某些场景下我们需要同时从多个通道接收数据。通道在接收数据时，如果没有数据可以接收将会发生阻塞。你也许会写出如下代码使用遍历的方式来实现：")]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("    for{\n        // 尝试从ch1接收值\n        data, ok := <-ch1\n        // 尝试从ch2接收值\n        data, ok := <-ch2\n        …\n    }\n")])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br"),a("span",{staticClass:"line-number"},[n._v("5")]),a("br"),a("span",{staticClass:"line-number"},[n._v("6")]),a("br"),a("span",{staticClass:"line-number"},[n._v("7")]),a("br")])]),a("p",[n._v("这种方式虽然可以实现从多个通道接收值的需求，但是运行性能会差很多。为了应对这种场景，Go内置了"),a("code",[n._v("select")]),n._v("关键字，可以同时响应多个通道的操作。")]),n._v(" "),a("p",[a("code",[n._v("select")]),n._v("的使用类似于switch语句，它有一系列case分支和一个默认的分支。每个case会对应一个通道的通信（接收或发送）过程。"),a("code",[n._v("select")]),n._v("会一直等待，直到某个"),a("code",[n._v("case")]),n._v("的通信操作完成时，就会执行"),a("code",[n._v("case")]),n._v("分支对应的语句。具体格式如下：")]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("    select{\n        case <-ch1:\n            ...\n        case data := <-ch2:\n            ...\n        case ch3<-data:\n            ...\n        default:\n            默认操作\n    }\n")])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br"),a("span",{staticClass:"line-number"},[n._v("5")]),a("br"),a("span",{staticClass:"line-number"},[n._v("6")]),a("br"),a("span",{staticClass:"line-number"},[n._v("7")]),a("br"),a("span",{staticClass:"line-number"},[n._v("8")]),a("br"),a("span",{staticClass:"line-number"},[n._v("9")]),a("br"),a("span",{staticClass:"line-number"},[n._v("10")]),a("br")])]),a("p",[n._v("举个小例子来演示下"),a("code",[n._v("select")]),n._v("的使用：")]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("    func main() {\n    \tch := make(chan int, 1)\n    \tfor i := 0; i < 10; i++ {\n    \t\tselect {\n    \t\tcase x := <-ch:\n    \t\t\tfmt.Println(x)\n    \t\tcase ch <- i:\n    \t\t}\n    \t}\n    }\n")])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br"),a("span",{staticClass:"line-number"},[n._v("5")]),a("br"),a("span",{staticClass:"line-number"},[n._v("6")]),a("br"),a("span",{staticClass:"line-number"},[n._v("7")]),a("br"),a("span",{staticClass:"line-number"},[n._v("8")]),a("br"),a("span",{staticClass:"line-number"},[n._v("9")]),a("br"),a("span",{staticClass:"line-number"},[n._v("10")]),a("br")])]),a("p",[n._v("使用"),a("code",[n._v("select")]),n._v("语句能提高代码的可读性。")]),n._v(" "),a("ul",[a("li",[n._v("可处理一个或多个channel的发送/接收操作。")]),n._v(" "),a("li",[n._v("如果多个"),a("code",[n._v("case")]),n._v("同时满足，"),a("code",[n._v("select")]),n._v("会随机选择一个。")]),n._v(" "),a("li",[n._v("对于没有"),a("code",[n._v("case")]),n._v("的"),a("code",[n._v("select{}")]),n._v("会一直等待，可用于阻塞main函数。")])]),n._v(" "),a("h2",{attrs:{id:"并发安全和锁"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#并发安全和锁"}},[n._v("#")]),n._v(" 并发安全和锁")]),n._v(" "),a("p",[n._v("有时候在Go代码中可能会存在多个"),a("code",[n._v("goroutine")]),n._v("同时操作一个资源（临界区），这种情况会发生"),a("code",[n._v("竞态问题")]),n._v("（数据竞态）。类比现实生活中的例子有十字路口被各个方向的的汽车竞争；还有火车上的卫生间被车厢里的人竞争。")]),n._v(" "),a("p",[n._v("举个例子：")]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("    var x int64\n    var wg sync.WaitGroup\n    \n    func add() {\n    \tfor i := 0; i < 5000; i++ {\n    \t\tx = x + 1\n    \t}\n    \twg.Done()\n    }\n    func main() {\n    \twg.Add(2)\n    \tgo add()\n    \tgo add()\n    \twg.Wait()\n    \tfmt.Println(x)\n    }\n")])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br"),a("span",{staticClass:"line-number"},[n._v("5")]),a("br"),a("span",{staticClass:"line-number"},[n._v("6")]),a("br"),a("span",{staticClass:"line-number"},[n._v("7")]),a("br"),a("span",{staticClass:"line-number"},[n._v("8")]),a("br"),a("span",{staticClass:"line-number"},[n._v("9")]),a("br"),a("span",{staticClass:"line-number"},[n._v("10")]),a("br"),a("span",{staticClass:"line-number"},[n._v("11")]),a("br"),a("span",{staticClass:"line-number"},[n._v("12")]),a("br"),a("span",{staticClass:"line-number"},[n._v("13")]),a("br"),a("span",{staticClass:"line-number"},[n._v("14")]),a("br"),a("span",{staticClass:"line-number"},[n._v("15")]),a("br"),a("span",{staticClass:"line-number"},[n._v("16")]),a("br")])]),a("p",[n._v("上面的代码中我们开启了两个"),a("code",[n._v("goroutine")]),n._v("去累加变量x的值，这两个"),a("code",[n._v("goroutine")]),n._v("在访问和修改"),a("code",[n._v("x")]),n._v("变量的时候就会存在数据竞争，导致最后的结果与期待的不符。")]),n._v(" "),a("h4",{attrs:{id:"互斥锁"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#互斥锁"}},[n._v("#")]),n._v(" 互斥锁")]),n._v(" "),a("p",[n._v("互斥锁是一种常用的控制共享资源访问的方法，它能够保证同时只有一个"),a("code",[n._v("goroutine")]),n._v("可以访问共享资源。Go语言中使用"),a("code",[n._v("sync")]),n._v("包的"),a("code",[n._v("Mutex")]),n._v("类型来实现互斥锁。 使用互斥锁来修复上面代码的问题：")]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("    var x int64\n    var wg sync.WaitGroup\n    var lock sync.Mutex\n    \n    func add() {\n    \tfor i := 0; i < 5000; i++ {\n    \t\tlock.Lock() // 加锁\n    \t\tx = x + 1\n    \t\tlock.Unlock() // 解锁\n    \t}\n    \twg.Done()\n    }\n    func main() {\n    \twg.Add(2)\n    \tgo add()\n    \tgo add()\n    \twg.Wait()\n    \tfmt.Println(x)\n    }\n")])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br"),a("span",{staticClass:"line-number"},[n._v("5")]),a("br"),a("span",{staticClass:"line-number"},[n._v("6")]),a("br"),a("span",{staticClass:"line-number"},[n._v("7")]),a("br"),a("span",{staticClass:"line-number"},[n._v("8")]),a("br"),a("span",{staticClass:"line-number"},[n._v("9")]),a("br"),a("span",{staticClass:"line-number"},[n._v("10")]),a("br"),a("span",{staticClass:"line-number"},[n._v("11")]),a("br"),a("span",{staticClass:"line-number"},[n._v("12")]),a("br"),a("span",{staticClass:"line-number"},[n._v("13")]),a("br"),a("span",{staticClass:"line-number"},[n._v("14")]),a("br"),a("span",{staticClass:"line-number"},[n._v("15")]),a("br"),a("span",{staticClass:"line-number"},[n._v("16")]),a("br"),a("span",{staticClass:"line-number"},[n._v("17")]),a("br"),a("span",{staticClass:"line-number"},[n._v("18")]),a("br"),a("span",{staticClass:"line-number"},[n._v("19")]),a("br")])]),a("p",[n._v("使用互斥锁能够保证同一时间有且只有一个"),a("code",[n._v("goroutine")]),n._v("进入临界区，其他的"),a("code",[n._v("goroutine")]),n._v("则在等待锁；当互斥锁释放后，等待的"),a("code",[n._v("goroutine")]),n._v("才可以获取锁进入临界区，多个"),a("code",[n._v("goroutine")]),n._v("同时等待一个锁时，唤醒的策略是随机的。")]),n._v(" "),a("h4",{attrs:{id:"读写互斥锁"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#读写互斥锁"}},[n._v("#")]),n._v(" 读写互斥锁")]),n._v(" "),a("p",[n._v("互斥锁是完全互斥的，但是有很多实际的场景下是读多写少的，当我们并发的去读取一个资源不涉及资源修改的时候是没有必要加锁的，这种场景下使用读写锁是更好的一种选择。读写锁在Go语言中使用"),a("code",[n._v("sync")]),n._v("包中的"),a("code",[n._v("RWMutex")]),n._v("类型。")]),n._v(" "),a("p",[n._v("读写锁分为两种：读锁和写锁。当一个goroutine获取读锁之后，其他的"),a("code",[n._v("goroutine")]),n._v("如果是获取读锁会继续获得锁，如果是获取写锁就会等待；当一个"),a("code",[n._v("goroutine")]),n._v("获取写锁之后，其他的"),a("code",[n._v("goroutine")]),n._v("无论是获取读锁还是写锁都会等待。")]),n._v(" "),a("p",[n._v("读写锁示例：")]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("    var (\n    \tx      int64\n    \twg     sync.WaitGroup\n    \tlock   sync.Mutex\n    \trwlock sync.RWMutex\n    )\n    \n    func write() {\n    \t// lock.Lock()   // 加互斥锁\n    \trwlock.Lock() // 加写锁\n    \tx = x + 1\n    \ttime.Sleep(10 * time.Millisecond) // 假设读操作耗时10毫秒\n    \trwlock.Unlock()                   // 解写锁\n    \t// lock.Unlock()                     // 解互斥锁\n    \twg.Done()\n    }\n    \n    func read() {\n    \t// lock.Lock()                  // 加互斥锁\n    \trwlock.RLock()               // 加读锁\n    \ttime.Sleep(time.Millisecond) // 假设读操作耗时1毫秒\n    \trwlock.RUnlock()             // 解读锁\n    \t// lock.Unlock()                // 解互斥锁\n    \twg.Done()\n    }\n    \n    func main() {\n    \tstart := time.Now()\n    \tfor i := 0; i < 10; i++ {\n    \t\twg.Add(1)\n    \t\tgo write()\n    \t}\n    \n    \tfor i := 0; i < 1000; i++ {\n    \t\twg.Add(1)\n    \t\tgo read()\n    \t}\n    \n    \twg.Wait()\n    \tend := time.Now()\n    \tfmt.Println(end.Sub(start))\n    }\n")])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br"),a("span",{staticClass:"line-number"},[n._v("5")]),a("br"),a("span",{staticClass:"line-number"},[n._v("6")]),a("br"),a("span",{staticClass:"line-number"},[n._v("7")]),a("br"),a("span",{staticClass:"line-number"},[n._v("8")]),a("br"),a("span",{staticClass:"line-number"},[n._v("9")]),a("br"),a("span",{staticClass:"line-number"},[n._v("10")]),a("br"),a("span",{staticClass:"line-number"},[n._v("11")]),a("br"),a("span",{staticClass:"line-number"},[n._v("12")]),a("br"),a("span",{staticClass:"line-number"},[n._v("13")]),a("br"),a("span",{staticClass:"line-number"},[n._v("14")]),a("br"),a("span",{staticClass:"line-number"},[n._v("15")]),a("br"),a("span",{staticClass:"line-number"},[n._v("16")]),a("br"),a("span",{staticClass:"line-number"},[n._v("17")]),a("br"),a("span",{staticClass:"line-number"},[n._v("18")]),a("br"),a("span",{staticClass:"line-number"},[n._v("19")]),a("br"),a("span",{staticClass:"line-number"},[n._v("20")]),a("br"),a("span",{staticClass:"line-number"},[n._v("21")]),a("br"),a("span",{staticClass:"line-number"},[n._v("22")]),a("br"),a("span",{staticClass:"line-number"},[n._v("23")]),a("br"),a("span",{staticClass:"line-number"},[n._v("24")]),a("br"),a("span",{staticClass:"line-number"},[n._v("25")]),a("br"),a("span",{staticClass:"line-number"},[n._v("26")]),a("br"),a("span",{staticClass:"line-number"},[n._v("27")]),a("br"),a("span",{staticClass:"line-number"},[n._v("28")]),a("br"),a("span",{staticClass:"line-number"},[n._v("29")]),a("br"),a("span",{staticClass:"line-number"},[n._v("30")]),a("br"),a("span",{staticClass:"line-number"},[n._v("31")]),a("br"),a("span",{staticClass:"line-number"},[n._v("32")]),a("br"),a("span",{staticClass:"line-number"},[n._v("33")]),a("br"),a("span",{staticClass:"line-number"},[n._v("34")]),a("br"),a("span",{staticClass:"line-number"},[n._v("35")]),a("br"),a("span",{staticClass:"line-number"},[n._v("36")]),a("br"),a("span",{staticClass:"line-number"},[n._v("37")]),a("br"),a("span",{staticClass:"line-number"},[n._v("38")]),a("br"),a("span",{staticClass:"line-number"},[n._v("39")]),a("br"),a("span",{staticClass:"line-number"},[n._v("40")]),a("br"),a("span",{staticClass:"line-number"},[n._v("41")]),a("br"),a("span",{staticClass:"line-number"},[n._v("42")]),a("br")])]),a("p",[n._v("需要注意的是读写锁非常适合读多写少的场景，如果读和写的操作差别不大，读写锁的优势就发挥不出来。")]),n._v(" "),a("h4",{attrs:{id:"sync-waitgroup"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#sync-waitgroup"}},[n._v("#")]),n._v(" sync.WaitGroup")]),n._v(" "),a("p",[n._v("在代码中生硬的使用"),a("code",[n._v("time.Sleep")]),n._v("肯定是不合适的，Go语言中可以使用"),a("code",[n._v("sync.WaitGroup")]),n._v("来实现并发任务的同步。 "),a("code",[n._v("sync.WaitGroup")]),n._v("有以下几个方法：")]),n._v(" "),a("table",[a("thead",[a("tr",[a("th",[n._v("方法名")]),n._v(" "),a("th",[n._v("功能")])])]),n._v(" "),a("tbody",[a("tr",[a("td",[n._v("(wg * WaitGroup) Add(delta int)")]),n._v(" "),a("td",[n._v("计数器+delta")])]),n._v(" "),a("tr",[a("td",[n._v("(wg *WaitGroup) Done()")]),n._v(" "),a("td",[n._v("计数器-1")])]),n._v(" "),a("tr",[a("td",[n._v("(wg *WaitGroup) Wait()")]),n._v(" "),a("td",[n._v("阻塞直到计数器变为0")])])])]),n._v(" "),a("p",[a("code",[n._v("sync.WaitGroup")]),n._v("内部维护着一个计数器，计数器的值可以增加和减少。例如当我们启动了N 个并发任务时，就将计数器值增加N。每个任务完成时通过调用Done()方法将计数器减1。通过调用Wait()来等待并发任务执行完，当计数器值为0时，表示所有并发任务已经完成。")]),n._v(" "),a("p",[n._v("我们利用"),a("code",[n._v("sync.WaitGroup")]),n._v("将上面的代码优化一下：")]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v('    var wg sync.WaitGroup\n    \n    func hello() {\n    \tdefer wg.Done()\n    \tfmt.Println("Hello Goroutine!")\n    }\n    func main() {\n    \twg.Add(1)\n    \tgo hello() // 启动另外一个goroutine去执行hello函数\n    \tfmt.Println("main goroutine done!")\n    \twg.Wait()\n    }\n')])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br"),a("span",{staticClass:"line-number"},[n._v("5")]),a("br"),a("span",{staticClass:"line-number"},[n._v("6")]),a("br"),a("span",{staticClass:"line-number"},[n._v("7")]),a("br"),a("span",{staticClass:"line-number"},[n._v("8")]),a("br"),a("span",{staticClass:"line-number"},[n._v("9")]),a("br"),a("span",{staticClass:"line-number"},[n._v("10")]),a("br"),a("span",{staticClass:"line-number"},[n._v("11")]),a("br"),a("span",{staticClass:"line-number"},[n._v("12")]),a("br")])]),a("p",[n._v("需要注意"),a("code",[n._v("sync.WaitGroup")]),n._v("是一个结构体，传递的时候要传递指针。")]),n._v(" "),a("h4",{attrs:{id:"sync-once"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#sync-once"}},[n._v("#")]),n._v(" sync.Once")]),n._v(" "),a("p",[n._v("说在前面的话：这是一个进阶知识点。")]),n._v(" "),a("p",[n._v("在编程的很多场景下我们需要确保某些操作在高并发的场景下只执行一次，例如只加载一次配置文件、只关闭一次通道等。")]),n._v(" "),a("p",[n._v("Go语言中的"),a("code",[n._v("sync")]),n._v("包中提供了一个针对只执行一次场景的解决方案–"),a("code",[n._v("sync.Once")]),n._v("。")]),n._v(" "),a("p",[a("code",[n._v("sync.Once")]),n._v("只有一个"),a("code",[n._v("Do")]),n._v("方法，其签名如下：")]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("    func (o *Once) Do(f func()) {}\n")])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br")])]),a("p",[a("em",[n._v("备注：如果要执行的函数"),a("code",[n._v("f")]),n._v("需要传递参数就需要搭配闭包来使用。")])]),n._v(" "),a("h5",{attrs:{id:"加载配置文件示例"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#加载配置文件示例"}},[n._v("#")]),n._v(" 加载配置文件示例")]),n._v(" "),a("p",[n._v("延迟一个开销很大的初始化操作到真正用到它的时候再执行是一个很好的实践。因为预先初始化一个变量（比如在init函数中完成初始化）会增加程序的启动耗时，而且有可能实际执行过程中这个变量没有用上，那么这个初始化操作就不是必须要做的。我们来看一个例子：")]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v('    var icons map[string]image.Image\n    \n    func loadIcons() {\n    \ticons = map[string]image.Image{\n    \t\t"left":  loadIcon("left.png"),\n    \t\t"up":    loadIcon("up.png"),\n    \t\t"right": loadIcon("right.png"),\n    \t\t"down":  loadIcon("down.png"),\n    \t}\n    }\n    \n    // Icon 被多个goroutine调用时不是并发安全的\n    func Icon(name string) image.Image {\n    \tif icons == nil {\n    \t\tloadIcons()\n    \t}\n    \treturn icons[name]\n    }\n')])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br"),a("span",{staticClass:"line-number"},[n._v("5")]),a("br"),a("span",{staticClass:"line-number"},[n._v("6")]),a("br"),a("span",{staticClass:"line-number"},[n._v("7")]),a("br"),a("span",{staticClass:"line-number"},[n._v("8")]),a("br"),a("span",{staticClass:"line-number"},[n._v("9")]),a("br"),a("span",{staticClass:"line-number"},[n._v("10")]),a("br"),a("span",{staticClass:"line-number"},[n._v("11")]),a("br"),a("span",{staticClass:"line-number"},[n._v("12")]),a("br"),a("span",{staticClass:"line-number"},[n._v("13")]),a("br"),a("span",{staticClass:"line-number"},[n._v("14")]),a("br"),a("span",{staticClass:"line-number"},[n._v("15")]),a("br"),a("span",{staticClass:"line-number"},[n._v("16")]),a("br"),a("span",{staticClass:"line-number"},[n._v("17")]),a("br"),a("span",{staticClass:"line-number"},[n._v("18")]),a("br")])]),a("p",[n._v("多个"),a("code",[n._v("goroutine")]),n._v("并发调用Icon函数时不是并发安全的，现代的编译器和CPU可能会在保证每个"),a("code",[n._v("goroutine")]),n._v("都满足串行一致的基础上自由地重排访问内存的顺序。loadIcons函数可能会被重排为以下结果：")]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v('    func loadIcons() {\n    \ticons = make(map[string]image.Image)\n    \ticons["left"] = loadIcon("left.png")\n    \ticons["up"] = loadIcon("up.png")\n    \ticons["right"] = loadIcon("right.png")\n    \ticons["down"] = loadIcon("down.png")\n    }\n')])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br"),a("span",{staticClass:"line-number"},[n._v("5")]),a("br"),a("span",{staticClass:"line-number"},[n._v("6")]),a("br"),a("span",{staticClass:"line-number"},[n._v("7")]),a("br")])]),a("p",[n._v("在这种情况下就会出现即使判断了"),a("code",[n._v("icons")]),n._v("不是nil也不意味着变量初始化完成了。考虑到这种情况，我们能想到的办法就是添加互斥锁，保证初始化"),a("code",[n._v("icons")]),n._v("的时候不会被其他的"),a("code",[n._v("goroutine")]),n._v("操作，但是这样做又会引发性能问题。")]),n._v(" "),a("p",[n._v("使用"),a("code",[n._v("sync.Once")]),n._v("改造的示例代码如下：")]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v('    var icons map[string]image.Image\n    \n    var loadIconsOnce sync.Once\n    \n    func loadIcons() {\n    \ticons = map[string]image.Image{\n    \t\t"left":  loadIcon("left.png"),\n    \t\t"up":    loadIcon("up.png"),\n    \t\t"right": loadIcon("right.png"),\n    \t\t"down":  loadIcon("down.png"),\n    \t}\n    }\n    \n    // Icon 是并发安全的\n    func Icon(name string) image.Image {\n    \tloadIconsOnce.Do(loadIcons)\n    \treturn icons[name]\n    }\n')])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br"),a("span",{staticClass:"line-number"},[n._v("5")]),a("br"),a("span",{staticClass:"line-number"},[n._v("6")]),a("br"),a("span",{staticClass:"line-number"},[n._v("7")]),a("br"),a("span",{staticClass:"line-number"},[n._v("8")]),a("br"),a("span",{staticClass:"line-number"},[n._v("9")]),a("br"),a("span",{staticClass:"line-number"},[n._v("10")]),a("br"),a("span",{staticClass:"line-number"},[n._v("11")]),a("br"),a("span",{staticClass:"line-number"},[n._v("12")]),a("br"),a("span",{staticClass:"line-number"},[n._v("13")]),a("br"),a("span",{staticClass:"line-number"},[n._v("14")]),a("br"),a("span",{staticClass:"line-number"},[n._v("15")]),a("br"),a("span",{staticClass:"line-number"},[n._v("16")]),a("br"),a("span",{staticClass:"line-number"},[n._v("17")]),a("br"),a("span",{staticClass:"line-number"},[n._v("18")]),a("br")])]),a("h5",{attrs:{id:"并发安全的单例模式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#并发安全的单例模式"}},[n._v("#")]),n._v(" 并发安全的单例模式")]),n._v(" "),a("p",[n._v("下面是借助"),a("code",[n._v("sync.Once")]),n._v("实现的并发安全的单例模式：")]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v('    package singleton\n    \n    import (\n        "sync"\n    )\n    \n    type singleton struct {}\n    \n    var instance *singleton\n    var once sync.Once\n    \n    func GetInstance() *singleton {\n        once.Do(func() {\n            instance = &singleton{}\n        })\n        return instance\n    }\n')])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br"),a("span",{staticClass:"line-number"},[n._v("5")]),a("br"),a("span",{staticClass:"line-number"},[n._v("6")]),a("br"),a("span",{staticClass:"line-number"},[n._v("7")]),a("br"),a("span",{staticClass:"line-number"},[n._v("8")]),a("br"),a("span",{staticClass:"line-number"},[n._v("9")]),a("br"),a("span",{staticClass:"line-number"},[n._v("10")]),a("br"),a("span",{staticClass:"line-number"},[n._v("11")]),a("br"),a("span",{staticClass:"line-number"},[n._v("12")]),a("br"),a("span",{staticClass:"line-number"},[n._v("13")]),a("br"),a("span",{staticClass:"line-number"},[n._v("14")]),a("br"),a("span",{staticClass:"line-number"},[n._v("15")]),a("br"),a("span",{staticClass:"line-number"},[n._v("16")]),a("br"),a("span",{staticClass:"line-number"},[n._v("17")]),a("br")])]),a("p",[a("code",[n._v("sync.Once")]),n._v("其实内部包含一个互斥锁和一个布尔值，互斥锁保证布尔值和数据的安全，而布尔值用来记录初始化是否完成。这样设计就能保证初始化操作的时候是并发安全的并且初始化操作也不会被执行多次。")]),n._v(" "),a("h4",{attrs:{id:"sync-map"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#sync-map"}},[n._v("#")]),n._v(" sync.Map")]),n._v(" "),a("p",[n._v("Go语言中内置的map不是并发安全的。请看下面的示例：")]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v('    var m = make(map[string]int)\n    \n    func get(key string) int {\n    \treturn m[key]\n    }\n    \n    func set(key string, value int) {\n    \tm[key] = value\n    }\n    \n    func main() {\n    \twg := sync.WaitGroup{}\n    \tfor i := 0; i < 20; i++ {\n    \t\twg.Add(1)\n    \t\tgo func(n int) {\n    \t\t\tkey := strconv.Itoa(n)\n    \t\t\tset(key, n)\n    \t\t\tfmt.Printf("k=:%v,v:=%v\\n", key, get(key))\n    \t\t\twg.Done()\n    \t\t}(i)\n    \t}\n    \twg.Wait()\n    }\n')])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br"),a("span",{staticClass:"line-number"},[n._v("5")]),a("br"),a("span",{staticClass:"line-number"},[n._v("6")]),a("br"),a("span",{staticClass:"line-number"},[n._v("7")]),a("br"),a("span",{staticClass:"line-number"},[n._v("8")]),a("br"),a("span",{staticClass:"line-number"},[n._v("9")]),a("br"),a("span",{staticClass:"line-number"},[n._v("10")]),a("br"),a("span",{staticClass:"line-number"},[n._v("11")]),a("br"),a("span",{staticClass:"line-number"},[n._v("12")]),a("br"),a("span",{staticClass:"line-number"},[n._v("13")]),a("br"),a("span",{staticClass:"line-number"},[n._v("14")]),a("br"),a("span",{staticClass:"line-number"},[n._v("15")]),a("br"),a("span",{staticClass:"line-number"},[n._v("16")]),a("br"),a("span",{staticClass:"line-number"},[n._v("17")]),a("br"),a("span",{staticClass:"line-number"},[n._v("18")]),a("br"),a("span",{staticClass:"line-number"},[n._v("19")]),a("br"),a("span",{staticClass:"line-number"},[n._v("20")]),a("br"),a("span",{staticClass:"line-number"},[n._v("21")]),a("br"),a("span",{staticClass:"line-number"},[n._v("22")]),a("br"),a("span",{staticClass:"line-number"},[n._v("23")]),a("br")])]),a("p",[n._v("上面的代码开启少量几个"),a("code",[n._v("goroutine")]),n._v("的时候可能没什么问题，当并发多了之后执行上面的代码就会报"),a("code",[n._v("fatal error: concurrent map writes")]),n._v("错误。")]),n._v(" "),a("p",[n._v("像这种场景下就需要为map加锁来保证并发的安全性了，Go语言的"),a("code",[n._v("sync")]),n._v("包中提供了一个开箱即用的并发安全版map–"),a("code",[n._v("sync.Map")]),n._v("。开箱即用表示不用像内置的map一样使用make函数初始化就能直接使用。同时"),a("code",[n._v("sync.Map")]),n._v("内置了诸如"),a("code",[n._v("Store")]),n._v("、"),a("code",[n._v("Load")]),n._v("、"),a("code",[n._v("LoadOrStore")]),n._v("、"),a("code",[n._v("Delete")]),n._v("、"),a("code",[n._v("Range")]),n._v("等操作方法。")]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v('    var m = sync.Map{}\n    \n    func main() {\n    \twg := sync.WaitGroup{}\n    \tfor i := 0; i < 20; i++ {\n    \t\twg.Add(1)\n    \t\tgo func(n int) {\n    \t\t\tkey := strconv.Itoa(n)\n    \t\t\tm.Store(key, n)\n    \t\t\tvalue, _ := m.Load(key)\n    \t\t\tfmt.Printf("k=:%v,v:=%v\\n", key, value)\n    \t\t\twg.Done()\n    \t\t}(i)\n    \t}\n    \twg.Wait()\n    }\n')])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br"),a("span",{staticClass:"line-number"},[n._v("5")]),a("br"),a("span",{staticClass:"line-number"},[n._v("6")]),a("br"),a("span",{staticClass:"line-number"},[n._v("7")]),a("br"),a("span",{staticClass:"line-number"},[n._v("8")]),a("br"),a("span",{staticClass:"line-number"},[n._v("9")]),a("br"),a("span",{staticClass:"line-number"},[n._v("10")]),a("br"),a("span",{staticClass:"line-number"},[n._v("11")]),a("br"),a("span",{staticClass:"line-number"},[n._v("12")]),a("br"),a("span",{staticClass:"line-number"},[n._v("13")]),a("br"),a("span",{staticClass:"line-number"},[n._v("14")]),a("br"),a("span",{staticClass:"line-number"},[n._v("15")]),a("br"),a("span",{staticClass:"line-number"},[n._v("16")]),a("br")])]),a("h3",{attrs:{id:"原子操作"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#原子操作"}},[n._v("#")]),n._v(" 原子操作")]),n._v(" "),a("p",[n._v("代码中的加锁操作因为涉及内核态的上下文切换会比较耗时、代价比较高。针对基本数据类型我们还可以使用原子操作来保证并发安全，因为原子操作是Go语言提供的方法它在用户态就可以完成，因此性能比加锁操作更好。Go语言中原子操作由内置的标准库"),a("code",[n._v("sync/atomic")]),n._v("提供。")]),n._v(" "),a("h4",{attrs:{id:"atomic包"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#atomic包"}},[n._v("#")]),n._v(" atomic包")]),n._v(" "),a("table",[a("thead",[a("tr",[a("th",[n._v("方法")]),n._v(" "),a("th",[n._v("解释")])])]),n._v(" "),a("tbody",[a("tr",[a("td",[n._v("func LoadInt32(addr *int32) (val int32)func LoadInt64(addr *int64) (val int64)func LoadUint32(addr *uint32) (val uint32)func LoadUint64(addr *uint64) (val uint64)func LoadUintptr(addr *uintptr) (val uintptr)func LoadPointer(addr *unsafe.Pointer) (val unsafe.Pointer)")]),n._v(" "),a("td",[n._v("读取操作")])]),n._v(" "),a("tr",[a("td",[n._v("func StoreInt32(addr *int32, val int32)func StoreInt64(addr *int64, val int64)func StoreUint32(addr *uint32, val uint32)func StoreUint64(addr *uint64, val uint64)func StoreUintptr(addr *uintptr, val uintptr)func StorePointer(addr *unsafe.Pointer, val unsafe.Pointer)")]),n._v(" "),a("td",[n._v("写入操作")])]),n._v(" "),a("tr",[a("td",[n._v("func AddInt32(addr *int32, delta int32) (new int32)func AddInt64(addr *int64, delta int64) (new int64)func AddUint32(addr *uint32, delta uint32) (new uint32)func AddUint64(addr *uint64, delta uint64) (new uint64)func AddUintptr(addr *uintptr, delta uintptr) (new uintptr)")]),n._v(" "),a("td",[n._v("修改操作")])]),n._v(" "),a("tr",[a("td",[n._v("func SwapInt32(addr *int32, new int32) (old int32)func SwapInt64(addr *int64, new int64) (old int64)func SwapUint32(addr *uint32, new uint32) (old uint32)func SwapUint64(addr *uint64, new uint64) (old uint64)func SwapUintptr(addr *uintptr, new uintptr) (old uintptr)func SwapPointer(addr *unsafe.Pointer, new unsafe.Pointer) (old unsafe.Pointer)")]),n._v(" "),a("td",[n._v("交换操作")])]),n._v(" "),a("tr",[a("td",[n._v("func CompareAndSwapInt32(addr *int32, old, new int32) (swapped bool)func CompareAndSwapInt64(addr *int64, old, new int64) (swapped bool)func CompareAndSwapUint32(addr *uint32, old, new uint32) (swapped bool)func CompareAndSwapUint64(addr *uint64, old, new uint64) (swapped bool)func CompareAndSwapUintptr(addr *uintptr, old, new uintptr) (swapped bool)func CompareAndSwapPointer(addr *unsafe.Pointer, old, new unsafe.Pointer) (swapped bool)")]),n._v(" "),a("td",[n._v("比较并交换操作")])])])]),n._v(" "),a("h4",{attrs:{id:"示例"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#示例"}},[n._v("#")]),n._v(" 示例")]),n._v(" "),a("p",[n._v("我们填写一个示例来比较下互斥锁和原子操作的性能。")]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v('    package main\n    \n    import (\n    \t"fmt"\n    \t"sync"\n    \t"sync/atomic"\n    \t"time"\n    )\n    \n    type Counter interface {\n    \tInc()\n    \tLoad() int64\n    }\n    \n    // 普通版\n    type CommonCounter struct {\n    \tcounter int64\n    }\n    \n    func (c CommonCounter) Inc() {\n    \tc.counter++\n    }\n    \n    func (c CommonCounter) Load() int64 {\n    \treturn c.counter\n    }\n    \n    // 互斥锁版\n    type MutexCounter struct {\n    \tcounter int64\n    \tlock    sync.Mutex\n    }\n    \n    func (m *MutexCounter) Inc() {\n    \tm.lock.Lock()\n    \tdefer m.lock.Unlock()\n    \tm.counter++\n    }\n    \n    func (m *MutexCounter) Load() int64 {\n    \tm.lock.Lock()\n    \tdefer m.lock.Unlock()\n    \treturn m.counter\n    }\n    \n    // 原子操作版\n    type AtomicCounter struct {\n    \tcounter int64\n    }\n    \n    func (a *AtomicCounter) Inc() {\n    \tatomic.AddInt64(&a.counter, 1)\n    }\n    \n    func (a *AtomicCounter) Load() int64 {\n    \treturn atomic.LoadInt64(&a.counter)\n    }\n    \n    func test(c Counter) {\n    \tvar wg sync.WaitGroup\n    \tstart := time.Now()\n    \tfor i := 0; i < 1000; i++ {\n    \t\twg.Add(1)\n    \t\tgo func() {\n    \t\t\tc.Inc()\n    \t\t\twg.Done()\n    \t\t}()\n    \t}\n    \twg.Wait()\n    \tend := time.Now()\n    \tfmt.Println(c.Load(), end.Sub(start))\n    }\n    \n    func main() {\n    \tc1 := CommonCounter{} // 非并发安全\n    \ttest(c1)\n    \tc2 := MutexCounter{} // 使用互斥锁实现并发安全\n    \ttest(&c2)\n    \tc3 := AtomicCounter{} // 并发安全且比互斥锁效率更高\n    \ttest(&c3)\n    }\n')])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br"),a("span",{staticClass:"line-number"},[n._v("5")]),a("br"),a("span",{staticClass:"line-number"},[n._v("6")]),a("br"),a("span",{staticClass:"line-number"},[n._v("7")]),a("br"),a("span",{staticClass:"line-number"},[n._v("8")]),a("br"),a("span",{staticClass:"line-number"},[n._v("9")]),a("br"),a("span",{staticClass:"line-number"},[n._v("10")]),a("br"),a("span",{staticClass:"line-number"},[n._v("11")]),a("br"),a("span",{staticClass:"line-number"},[n._v("12")]),a("br"),a("span",{staticClass:"line-number"},[n._v("13")]),a("br"),a("span",{staticClass:"line-number"},[n._v("14")]),a("br"),a("span",{staticClass:"line-number"},[n._v("15")]),a("br"),a("span",{staticClass:"line-number"},[n._v("16")]),a("br"),a("span",{staticClass:"line-number"},[n._v("17")]),a("br"),a("span",{staticClass:"line-number"},[n._v("18")]),a("br"),a("span",{staticClass:"line-number"},[n._v("19")]),a("br"),a("span",{staticClass:"line-number"},[n._v("20")]),a("br"),a("span",{staticClass:"line-number"},[n._v("21")]),a("br"),a("span",{staticClass:"line-number"},[n._v("22")]),a("br"),a("span",{staticClass:"line-number"},[n._v("23")]),a("br"),a("span",{staticClass:"line-number"},[n._v("24")]),a("br"),a("span",{staticClass:"line-number"},[n._v("25")]),a("br"),a("span",{staticClass:"line-number"},[n._v("26")]),a("br"),a("span",{staticClass:"line-number"},[n._v("27")]),a("br"),a("span",{staticClass:"line-number"},[n._v("28")]),a("br"),a("span",{staticClass:"line-number"},[n._v("29")]),a("br"),a("span",{staticClass:"line-number"},[n._v("30")]),a("br"),a("span",{staticClass:"line-number"},[n._v("31")]),a("br"),a("span",{staticClass:"line-number"},[n._v("32")]),a("br"),a("span",{staticClass:"line-number"},[n._v("33")]),a("br"),a("span",{staticClass:"line-number"},[n._v("34")]),a("br"),a("span",{staticClass:"line-number"},[n._v("35")]),a("br"),a("span",{staticClass:"line-number"},[n._v("36")]),a("br"),a("span",{staticClass:"line-number"},[n._v("37")]),a("br"),a("span",{staticClass:"line-number"},[n._v("38")]),a("br"),a("span",{staticClass:"line-number"},[n._v("39")]),a("br"),a("span",{staticClass:"line-number"},[n._v("40")]),a("br"),a("span",{staticClass:"line-number"},[n._v("41")]),a("br"),a("span",{staticClass:"line-number"},[n._v("42")]),a("br"),a("span",{staticClass:"line-number"},[n._v("43")]),a("br"),a("span",{staticClass:"line-number"},[n._v("44")]),a("br"),a("span",{staticClass:"line-number"},[n._v("45")]),a("br"),a("span",{staticClass:"line-number"},[n._v("46")]),a("br"),a("span",{staticClass:"line-number"},[n._v("47")]),a("br"),a("span",{staticClass:"line-number"},[n._v("48")]),a("br"),a("span",{staticClass:"line-number"},[n._v("49")]),a("br"),a("span",{staticClass:"line-number"},[n._v("50")]),a("br"),a("span",{staticClass:"line-number"},[n._v("51")]),a("br"),a("span",{staticClass:"line-number"},[n._v("52")]),a("br"),a("span",{staticClass:"line-number"},[n._v("53")]),a("br"),a("span",{staticClass:"line-number"},[n._v("54")]),a("br"),a("span",{staticClass:"line-number"},[n._v("55")]),a("br"),a("span",{staticClass:"line-number"},[n._v("56")]),a("br"),a("span",{staticClass:"line-number"},[n._v("57")]),a("br"),a("span",{staticClass:"line-number"},[n._v("58")]),a("br"),a("span",{staticClass:"line-number"},[n._v("59")]),a("br"),a("span",{staticClass:"line-number"},[n._v("60")]),a("br"),a("span",{staticClass:"line-number"},[n._v("61")]),a("br"),a("span",{staticClass:"line-number"},[n._v("62")]),a("br"),a("span",{staticClass:"line-number"},[n._v("63")]),a("br"),a("span",{staticClass:"line-number"},[n._v("64")]),a("br"),a("span",{staticClass:"line-number"},[n._v("65")]),a("br"),a("span",{staticClass:"line-number"},[n._v("66")]),a("br"),a("span",{staticClass:"line-number"},[n._v("67")]),a("br"),a("span",{staticClass:"line-number"},[n._v("68")]),a("br"),a("span",{staticClass:"line-number"},[n._v("69")]),a("br"),a("span",{staticClass:"line-number"},[n._v("70")]),a("br"),a("span",{staticClass:"line-number"},[n._v("71")]),a("br"),a("span",{staticClass:"line-number"},[n._v("72")]),a("br"),a("span",{staticClass:"line-number"},[n._v("73")]),a("br"),a("span",{staticClass:"line-number"},[n._v("74")]),a("br"),a("span",{staticClass:"line-number"},[n._v("75")]),a("br"),a("span",{staticClass:"line-number"},[n._v("76")]),a("br"),a("span",{staticClass:"line-number"},[n._v("77")]),a("br"),a("span",{staticClass:"line-number"},[n._v("78")]),a("br"),a("span",{staticClass:"line-number"},[n._v("79")]),a("br"),a("span",{staticClass:"line-number"},[n._v("80")]),a("br"),a("span",{staticClass:"line-number"},[n._v("81")]),a("br")])]),a("p",[a("code",[n._v("atomic")]),n._v("包提供了底层的原子级内存操作，对于同步算法的实现很有用。这些函数必须谨慎地保证正确使用。除了某些特殊的底层应用，使用通道或者sync包的函数/类型实现同步更好。")]),n._v(" "),a("h2",{attrs:{id:"练习题"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#练习题"}},[n._v("#")]),n._v(" 练习题")]),n._v(" "),a("ol",[a("li",[n._v("使用"),a("code",[n._v("goroutine")]),n._v("和"),a("code",[n._v("channel")]),n._v("实现一个计算int64随机数各位数和的程序。\n"),a("ol",[a("li",[n._v("开启一个"),a("code",[n._v("goroutine")]),n._v("循环生成int64类型的随机数，发送到"),a("code",[n._v("jobChan")])]),n._v(" "),a("li",[n._v("开启24个"),a("code",[n._v("goroutine")]),n._v("从"),a("code",[n._v("jobChan")]),n._v("中取出随机数计算各位数的和，将结果发送到"),a("code",[n._v("resultChan")])]),n._v(" "),a("li",[n._v("主"),a("code",[n._v("goroutine")]),n._v("从"),a("code",[n._v("resultChan")]),n._v("取出结果并打印到终端输出")])])]),n._v(" "),a("li",[n._v("为了保证业务代码的执行性能将之前写的日志库改写为异步记录日志方式。")])])])}),[],!1,null,null,null);s.default=e.exports}}]);