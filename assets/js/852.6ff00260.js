(window.webpackJsonp=window.webpackJsonp||[]).push([[852],{1548:function(e,n,t){"use strict";t.r(n);var s=t(5),a=Object(s.a)({},(function(){var e=this,n=e.$createElement,t=e._self._c||n;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h1",{attrs:{id:"使用-kubeadm-搭建-kubernetes-集群"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#使用-kubeadm-搭建-kubernetes-集群"}},[e._v("#")]),e._v(" 使用 kubeadm 搭建 kubernetes 集群")]),e._v(" "),t("h2",{attrs:{id:"安装-kubernetes-主节点"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#安装-kubernetes-主节点"}},[e._v("#")]),e._v(" 安装 kubernetes 主节点")]),e._v(" "),t("p",[e._v("执行以下命令初始化主节点，该命令指定了初始化时需要使用的配置文件，其中添加 "),t("code",[e._v("--experimental-upload-certs")]),e._v(" 参数可以在后续执行加入节点时自动分发证书文件。追加的 "),t("code",[e._v("tee kubeadm-init.log")]),e._v(" 用以输出日志。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[e._v("Flag --experimental-upload-certs has been deprecated, use --upload-certs instead\n则将–experimental-upload-certs 替换为 --upload-certs\nkubeadm init --config=kubeadm.yml --upload-certs | tee kubeadm-init.log\n")])])]),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('    kubeadm init --config=kubeadm.yml --experimental-upload-certs | tee kubeadm-init.log\n    \n    # 安装成功则会有如下输出\n    [init] Using Kubernetes version: v1.14.1\n    [preflight] Running pre-flight checks\n            [WARNING IsDockerSystemdCheck]: detected "cgroupfs" as the Docker cgroup driver. The recommended driver is "systemd". Please follow the guide at https://kubernetes.io/docs/setup/cri/\n    [preflight] Pulling images required for setting up a Kubernetes cluster\n    [preflight] This might take a minute or two, depending on the speed of your internet connection\n    [preflight] You can also perform this action in beforehand using \'kubeadm config images pull\'\n    [kubelet-start] Writing kubelet environment file with flags to file "/var/lib/kubelet/kubeadm-flags.env"\n    [kubelet-start] Writing kubelet configuration to file "/var/lib/kubelet/config.yaml"\n    [kubelet-start] Activating the kubelet service\n    [certs] Using certificateDir folder "/etc/kubernetes/pki"\n    [certs] Generating "ca" certificate and key\n    [certs] Generating "apiserver" certificate and key\n    [certs] apiserver serving cert is signed for DNS names [kubernetes-master kubernetes kubernetes.default kubernetes.default.svc kubernetes.default.svc.cluster.local] and IPs [10.96.0.1 192.168.141.130]\n    [certs] Generating "apiserver-kubelet-client" certificate and key\n    [certs] Generating "front-proxy-ca" certificate and key\n    [certs] Generating "front-proxy-client" certificate and key\n    [certs] Generating "etcd/ca" certificate and key\n    [certs] Generating "etcd/peer" certificate and key\n    [certs] etcd/peer serving cert is signed for DNS names [kubernetes-master localhost] and IPs [192.168.141.130 127.0.0.1 ::1]\n    [certs] Generating "etcd/server" certificate and key\n    [certs] etcd/server serving cert is signed for DNS names [kubernetes-master localhost] and IPs [192.168.141.130 127.0.0.1 ::1]\n    [certs] Generating "etcd/healthcheck-client" certificate and key\n    [certs] Generating "apiserver-etcd-client" certificate and key\n    [certs] Generating "sa" key and public key\n    [kubeconfig] Using kubeconfig folder "/etc/kubernetes"\n    [kubeconfig] Writing "admin.conf" kubeconfig file\n    [kubeconfig] Writing "kubelet.conf" kubeconfig file\n    [kubeconfig] Writing "controller-manager.conf" kubeconfig file\n    [kubeconfig] Writing "scheduler.conf" kubeconfig file\n    [control-plane] Using manifest folder "/etc/kubernetes/manifests"\n    [control-plane] Creating static Pod manifest for "kube-apiserver"\n    [control-plane] Creating static Pod manifest for "kube-controller-manager"\n    [control-plane] Creating static Pod manifest for "kube-scheduler"\n    [etcd] Creating static Pod manifest for local etcd in "/etc/kubernetes/manifests"\n    [wait-control-plane] Waiting for the kubelet to boot up the control plane as static Pods from directory "/etc/kubernetes/manifests". This can take up to 4m0s\n    [apiclient] All control plane components are healthy after 20.003326 seconds\n    [upload-config] storing the configuration used in ConfigMap "kubeadm-config" in the "kube-system" Namespace\n    [kubelet] Creating a ConfigMap "kubelet-config-1.14" in namespace kube-system with the configuration for the kubelets in the cluster\n    [upload-certs] Storing the certificates in ConfigMap "kubeadm-certs" in the "kube-system" Namespace\n    [upload-certs] Using certificate key:\n    2cd5b86c4905c54d68cc7dfecc2bf87195e9d5d90b4fff9832d9b22fc5e73f96\n    [mark-control-plane] Marking the node kubernetes-master as control-plane by adding the label "node-role.kubernetes.io/master=\'\'"\n    [mark-control-plane] Marking the node kubernetes-master as control-plane by adding the taints [node-role.kubernetes.io/master:NoSchedule]\n    [bootstrap-token] Using token: abcdef.0123456789abcdef\n    [bootstrap-token] Configuring bootstrap tokens, cluster-info ConfigMap, RBAC Roles\n    [bootstrap-token] configured RBAC rules to allow Node Bootstrap tokens to post CSRs in order for nodes to get long term certificate credentials\n    [bootstrap-token] configured RBAC rules to allow the csrapprover controller automatically approve CSRs from a Node Bootstrap Token\n    [bootstrap-token] configured RBAC rules to allow certificate rotation for all node client certificates in the cluster\n    [bootstrap-token] creating the "cluster-info" ConfigMap in the "kube-public" namespace\n    [addons] Applied essential addon: CoreDNS\n    [addons] Applied essential addon: kube-proxy\n    \n    Your Kubernetes control-plane has initialized successfully!\n    \n    To start using your cluster, you need to run the following as a regular user:\n    \n      mkdir -p $HOME/.kube\n      sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config\n      sudo chown $(id -u):$(id -g) $HOME/.kube/config\n    \n    You should now deploy a pod network to the cluster.\n    Run "kubectl apply -f [podnetwork].yaml" with one of the options listed at:\n      https://kubernetes.io/docs/concepts/cluster-administration/addons/\n    \n    Then you can join any number of worker nodes by running the following on each as root:\n    \n    # 后面子节点加入需要如下命令\n    kubeadm join 192.168.141.130:6443 --token abcdef.0123456789abcdef \\\n        --discovery-token-ca-cert-hash sha256:cab7c86212535adde6b8d1c7415e81847715cfc8629bb1d270b601744d662515\n')])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br"),t("span",{staticClass:"line-number"},[e._v("3")]),t("br"),t("span",{staticClass:"line-number"},[e._v("4")]),t("br"),t("span",{staticClass:"line-number"},[e._v("5")]),t("br"),t("span",{staticClass:"line-number"},[e._v("6")]),t("br"),t("span",{staticClass:"line-number"},[e._v("7")]),t("br"),t("span",{staticClass:"line-number"},[e._v("8")]),t("br"),t("span",{staticClass:"line-number"},[e._v("9")]),t("br"),t("span",{staticClass:"line-number"},[e._v("10")]),t("br"),t("span",{staticClass:"line-number"},[e._v("11")]),t("br"),t("span",{staticClass:"line-number"},[e._v("12")]),t("br"),t("span",{staticClass:"line-number"},[e._v("13")]),t("br"),t("span",{staticClass:"line-number"},[e._v("14")]),t("br"),t("span",{staticClass:"line-number"},[e._v("15")]),t("br"),t("span",{staticClass:"line-number"},[e._v("16")]),t("br"),t("span",{staticClass:"line-number"},[e._v("17")]),t("br"),t("span",{staticClass:"line-number"},[e._v("18")]),t("br"),t("span",{staticClass:"line-number"},[e._v("19")]),t("br"),t("span",{staticClass:"line-number"},[e._v("20")]),t("br"),t("span",{staticClass:"line-number"},[e._v("21")]),t("br"),t("span",{staticClass:"line-number"},[e._v("22")]),t("br"),t("span",{staticClass:"line-number"},[e._v("23")]),t("br"),t("span",{staticClass:"line-number"},[e._v("24")]),t("br"),t("span",{staticClass:"line-number"},[e._v("25")]),t("br"),t("span",{staticClass:"line-number"},[e._v("26")]),t("br"),t("span",{staticClass:"line-number"},[e._v("27")]),t("br"),t("span",{staticClass:"line-number"},[e._v("28")]),t("br"),t("span",{staticClass:"line-number"},[e._v("29")]),t("br"),t("span",{staticClass:"line-number"},[e._v("30")]),t("br"),t("span",{staticClass:"line-number"},[e._v("31")]),t("br"),t("span",{staticClass:"line-number"},[e._v("32")]),t("br"),t("span",{staticClass:"line-number"},[e._v("33")]),t("br"),t("span",{staticClass:"line-number"},[e._v("34")]),t("br"),t("span",{staticClass:"line-number"},[e._v("35")]),t("br"),t("span",{staticClass:"line-number"},[e._v("36")]),t("br"),t("span",{staticClass:"line-number"},[e._v("37")]),t("br"),t("span",{staticClass:"line-number"},[e._v("38")]),t("br"),t("span",{staticClass:"line-number"},[e._v("39")]),t("br"),t("span",{staticClass:"line-number"},[e._v("40")]),t("br"),t("span",{staticClass:"line-number"},[e._v("41")]),t("br"),t("span",{staticClass:"line-number"},[e._v("42")]),t("br"),t("span",{staticClass:"line-number"},[e._v("43")]),t("br"),t("span",{staticClass:"line-number"},[e._v("44")]),t("br"),t("span",{staticClass:"line-number"},[e._v("45")]),t("br"),t("span",{staticClass:"line-number"},[e._v("46")]),t("br"),t("span",{staticClass:"line-number"},[e._v("47")]),t("br"),t("span",{staticClass:"line-number"},[e._v("48")]),t("br"),t("span",{staticClass:"line-number"},[e._v("49")]),t("br"),t("span",{staticClass:"line-number"},[e._v("50")]),t("br"),t("span",{staticClass:"line-number"},[e._v("51")]),t("br"),t("span",{staticClass:"line-number"},[e._v("52")]),t("br"),t("span",{staticClass:"line-number"},[e._v("53")]),t("br"),t("span",{staticClass:"line-number"},[e._v("54")]),t("br"),t("span",{staticClass:"line-number"},[e._v("55")]),t("br"),t("span",{staticClass:"line-number"},[e._v("56")]),t("br"),t("span",{staticClass:"line-number"},[e._v("57")]),t("br"),t("span",{staticClass:"line-number"},[e._v("58")]),t("br"),t("span",{staticClass:"line-number"},[e._v("59")]),t("br"),t("span",{staticClass:"line-number"},[e._v("60")]),t("br"),t("span",{staticClass:"line-number"},[e._v("61")]),t("br"),t("span",{staticClass:"line-number"},[e._v("62")]),t("br"),t("span",{staticClass:"line-number"},[e._v("63")]),t("br"),t("span",{staticClass:"line-number"},[e._v("64")]),t("br"),t("span",{staticClass:"line-number"},[e._v("65")]),t("br"),t("span",{staticClass:"line-number"},[e._v("66")]),t("br"),t("span",{staticClass:"line-number"},[e._v("67")]),t("br"),t("span",{staticClass:"line-number"},[e._v("68")]),t("br"),t("span",{staticClass:"line-number"},[e._v("69")]),t("br"),t("span",{staticClass:"line-number"},[e._v("70")]),t("br"),t("span",{staticClass:"line-number"},[e._v("71")]),t("br"),t("span",{staticClass:"line-number"},[e._v("72")]),t("br")])]),t("blockquote",[t("p",[e._v("注意：如果安装 kubernetes 版本和下载的镜像版本不统一则会出现 "),t("code",[e._v("timed out waiting for the condition")]),e._v(" 错误。中途失败或是想修改配置可以使用 "),t("code",[e._v("kubeadm reset")]),e._v(" 命令重置配置，再做初始化操作即可。")])]),e._v(" "),t("h2",{attrs:{id:"配置-kubectl"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#配置-kubectl"}},[e._v("#")]),e._v(" 配置 kubectl")]),e._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("    mkdir -p $HOME/.kube\n    cp -i /etc/kubernetes/admin.conf $HOME/.kube/config\n    \n    # 非 ROOT 用户执行\n    chown $(id -u):$(id -g) $HOME/.kube/config\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br"),t("span",{staticClass:"line-number"},[e._v("3")]),t("br"),t("span",{staticClass:"line-number"},[e._v("4")]),t("br"),t("span",{staticClass:"line-number"},[e._v("5")]),t("br")])]),t("h2",{attrs:{id:"验证是否成功"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#验证是否成功"}},[e._v("#")]),e._v(" 验证是否成功")]),e._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("    kubectl get node\n    \n    # 能够打印出节点信息即表示成功\n    NAME                STATUS     ROLES    AGE     VERSION\n    kubernetes-master   NotReady   master   8m40s   v1.14.1\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br"),t("span",{staticClass:"line-number"},[e._v("3")]),t("br"),t("span",{staticClass:"line-number"},[e._v("4")]),t("br"),t("span",{staticClass:"line-number"},[e._v("5")]),t("br")])]),t("p",[e._v("至此主节点配置完成")]),e._v(" "),t("h2",{attrs:{id:"kubeadm-init-的执行过程"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#kubeadm-init-的执行过程"}},[e._v("#")]),e._v(" kubeadm init 的执行过程")]),e._v(" "),t("ul",[t("li",[e._v("init：指定版本进行初始化操作")]),e._v(" "),t("li",[e._v("preflight：初始化前的检查和下载所需要的 Docker 镜像文件")]),e._v(" "),t("li",[e._v("kubelet-start：生成 kubelet 的配置文件 "),t("code",[e._v("var/lib/kubelet/config.yaml")]),e._v("，没有这个文件 kubelet 无法启动，所以初始化之前的 kubelet 实际上启动不会成功")]),e._v(" "),t("li",[e._v("certificates：生成 Kubernetes 使用的证书，存放在 "),t("code",[e._v("/etc/kubernetes/pki")]),e._v(" 目录中")]),e._v(" "),t("li",[e._v("kubeconfig：生成 KubeConfig 文件，存放在 "),t("code",[e._v("/etc/kubernetes")]),e._v(" 目录中，组件之间通信需要使用对应文件")]),e._v(" "),t("li",[e._v("control-plane：使用 "),t("code",[e._v("/etc/kubernetes/manifest")]),e._v(" 目录下的 YAML 文件，安装 Master 组件")]),e._v(" "),t("li",[e._v("etcd：使用 "),t("code",[e._v("/etc/kubernetes/manifest/etcd.yaml")]),e._v(" 安装 Etcd 服务")]),e._v(" "),t("li",[e._v("wait-control-plane：等待 control-plan 部署的 Master 组件启动")]),e._v(" "),t("li",[e._v("apiclient：检查 Master 组件服务状态。")]),e._v(" "),t("li",[e._v("uploadconfig：更新配置")]),e._v(" "),t("li",[e._v("kubelet：使用 configMap 配置 kubelet")]),e._v(" "),t("li",[e._v("patchnode：更新 CNI 信息到 Node 上，通过注释的方式记录")]),e._v(" "),t("li",[e._v("mark-control-plane：为当前节点打标签，打了角色 Master，和不可调度标签，这样默认就不会使用 Master 节点来运行 Pod")]),e._v(" "),t("li",[e._v("bootstrap-token：生成 token 记录下来，后边使用 "),t("code",[e._v("kubeadm join")]),e._v(" 往集群中添加节点时会用到")]),e._v(" "),t("li",[e._v("addons：安装附加组件 CoreDNS 和 kube-proxy")])])])}),[],!1,null,null,null);n.default=a.exports}}]);