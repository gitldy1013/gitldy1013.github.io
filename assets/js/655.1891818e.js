(window.webpackJsonp=window.webpackJsonp||[]).push([[655],{1353:function(n,e,a){"use strict";a.r(e);var t=a(5),i=Object(t.a)({},(function(){var n=this,e=n.$createElement,a=n._self._c||e;return a("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[a("h1",{attrs:{id:"spring-bean-的生命周期"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#spring-bean-的生命周期"}},[n._v("#")]),n._v(" Spring Bean 的生命周期")]),n._v(" "),a("ul",[a("li",[n._v("Spring Bean 的生命周期简单易懂。在一个 bean 实例被初始化时，需要执行一系列的初始化操作以达到可用的状态。同样的，当一个 bean 不在被调用时需要进行相关的析构操作，并从 bean 容器中移除。")]),n._v(" "),a("li",[n._v("Spring bean factory 负责管理在 spring 容器中被创建的 bean 的生命周期。Bean 的生命周期由两组回调（call back）方法组成。\n"),a("ul",[a("li",[n._v("初始化之后调用的回调方法。")]),n._v(" "),a("li",[n._v("销毁之前调用的回调方法。")])])]),n._v(" "),a("li",[n._v("Spring 框架提供了以下四种方式来管理 bean 的生命周期事件：\n"),a("ul",[a("li",[n._v("InitializingBean 和 DisposableBean 回调接口")]),n._v(" "),a("li",[n._v("针对特殊行为的其他 Aware 接口")]),n._v(" "),a("li",[n._v("Bean 配置文件中的 Custom init() 方法和 destroy() 方法")]),n._v(" "),a("li",[n._v("@PostConstruct 和 @PreDestroy 注解方式")])])])])])}),[],!1,null,null,null);e.default=i.exports}}]);