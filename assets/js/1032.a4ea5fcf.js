(window.webpackJsonp=window.webpackJsonp||[]).push([[1032],{1728:function(s,e,n){"use strict";n.r(e);var a=n(5),t=Object(a.a)({},(function(){var s=this,e=s.$createElement,n=s._self._c||e;return n("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[n("h1",{attrs:{id:"bean-的装配方式"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#bean-的装配方式"}},[s._v("#")]),s._v(" Bean 的装配方式")]),s._v(" "),n("h2",{attrs:{id:"概述"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#概述"}},[s._v("#")]),s._v(" 概述")]),s._v(" "),n("p",[s._v("截止目前为止，咱们 Bean 的装配方式是通过代码 "),n("code",[s._v("getBean()")]),s._v(" 的方式从容器获取指定的 Bean 实例，容器首先会调用 Bean 类的无参构造器，创建空值的实例对象。除了使用 "),n("code",[s._v("getBean()")]),s._v(" 的装配方式外，还可以使用注解的装配方式。")]),s._v(" "),n("h2",{attrs:{id:"容器中-bean-的作用域"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#容器中-bean-的作用域"}},[s._v("#")]),s._v(" 容器中 Bean 的作用域")]),s._v(" "),n("p",[s._v("在学习 Bean 的装配方式之前，我们先了解一下 Bean 的作用域。当通过 Spring 容器创建一个 Bean 实例时，不仅可以完成 Bean 的实例化，还可以通过 scope 属性，为 Bean 指定特定的作用域。Spring 支持 5 种作用域。")]),s._v(" "),n("ul",[n("li",[s._v("singleton：单态模式。即在整个 Spring 容器中，使用 singleton 定义的 Bean 将是单例的，只有一个实例。默认为单态的。")]),s._v(" "),n("li",[s._v("prototype：原型模式。即每次使用 getBean 方法获取的同一个 "),n("code",[s._v("<bean />")]),s._v(" 的实例都是一个新的实例。")]),s._v(" "),n("li",[s._v("request：对于每次 HTTP 请求，都将会产生一个不同的 Bean 实例。")]),s._v(" "),n("li",[s._v("session：对于每个不同的 HTTP session，都将产生一个不同的 Bean 实例。")]),s._v(" "),n("li",[s._v("global session：每个全局的 HTTP session 对应一个 Bean 实例。典型情况下，仅在使用 portlet 集群时有效，多个 Web 应用共享一个 session。一般应用中，global-session 与 session 是等同的。")])]),s._v(" "),n("p",[s._v("注意事项：")]),s._v(" "),n("ul",[n("li",[s._v("对于 scope 的值 request、session 与 global session，只有在 Web 应用中使用 Spring 时，该作用域才有效。")]),s._v(" "),n("li",[s._v("对于 scope 为 singleton 的单例模式，该 Bean 是在容器被创建时即被装配好了。")]),s._v(" "),n("li",[s._v("对于 scope 为 prototype 的原型模式，Bean 实例是在代码中使用该 Bean 实例时才进行装配的。")])]),s._v(" "),n("h2",{attrs:{id:"基于注解的装配方式"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#基于注解的装配方式"}},[s._v("#")]),s._v(" 基于注解的装配方式")]),s._v(" "),n("p",[s._v("对于 DI 使用注解，将不再需要在 Spring 配置文件中声明 Bean 实例。Spring 中使用注解， 需要在原有 Spring 运行环境基础上再做一些改变")]),s._v(" "),n("p",[s._v("需要在 Spring 配置文件中配置组件扫描器，用于在指定的基本包中扫描注解。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('    <?xml version="1.0" encoding="UTF-8"?>\n    <beans xmlns="http://www.springframework.org/schema/beans"\n           xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"\n           xmlns:context="http://www.springframework.org/schema/context"\n           xsi:schemaLocation="\n           http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd \n           http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd\n    ">\n    \n        <context:annotation-config />\n        <context:component-scan base-package="com.cmcc.leeshop"/>\n    </beans>\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br")])]),n("h3",{attrs:{id:"component"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#component"}},[s._v("#")]),s._v(" @Component")]),s._v(" "),n("p",[s._v("需要在类上使用注解 "),n("code",[s._v("@Component")]),s._v("，该注解的 value 属性用于指定该 bean 的 id 值。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('    @Component(value = "student")\n    public class Student {\n        private Long id;\n        private String name;\n    \n        public Long getId() {\n            return id;\n        }\n    \n        public void setId(Long id) {\n            this.id = id;\n        }\n    \n        public String getName() {\n            return name;\n        }\n    \n        public void setName(String name) {\n            this.name = name;\n        }\n    \n        @Override\n        public String toString() {\n            return "Student{" +\n                    "id=" + id +\n                    ", name=\'" + name + \'\\\'\' +\n                    \'}\';\n        }\n    }\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br"),n("span",{staticClass:"line-number"},[s._v("23")]),n("br"),n("span",{staticClass:"line-number"},[s._v("24")]),n("br"),n("span",{staticClass:"line-number"},[s._v("25")]),n("br"),n("span",{staticClass:"line-number"},[s._v("26")]),n("br"),n("span",{staticClass:"line-number"},[s._v("27")]),n("br"),n("span",{staticClass:"line-number"},[s._v("28")]),n("br"),n("span",{staticClass:"line-number"},[s._v("29")]),n("br")])]),n("p",[s._v("Spring 还提供了 3 个功能基本和 "),n("code",[s._v("@Component")]),s._v(" 等效的注解：")]),s._v(" "),n("ul",[n("li",[n("code",[s._v("@Repository")]),s._v("：用于对 DAO 实现类进行注解")]),s._v(" "),n("li",[n("code",[s._v("@Service")]),s._v("：用于对 Service 实现类进行注解")]),s._v(" "),n("li",[n("code",[s._v("@Controller")]),s._v("：用于对 Controller 实现类进行注解")])]),s._v(" "),n("h3",{attrs:{id:"scope"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#scope"}},[s._v("#")]),s._v(" @Scope")]),s._v(" "),n("p",[s._v("需要在类上使用注解 "),n("code",[s._v("@Scope")]),s._v("，其 value 属性用于指定作用域。默认为 singleton。")]),s._v(" "),n("p",[n("img",{attrs:{src:"/img/1514921149.png",alt:""}})]),s._v(" "),n("h3",{attrs:{id:"value"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#value"}},[s._v("#")]),s._v(" @Value")]),s._v(" "),n("p",[s._v("需要在属性上使用注解 "),n("code",[s._v("@Value")]),s._v("，该注解的 value 属性用于指定要注入的值。")]),s._v(" "),n("p",[n("img",{attrs:{src:"/img/1514921245.png",alt:""}})]),s._v(" "),n("p",[s._v("使用该注解完成属性注入时，类中无需 setter。当然，若属性有 setter，则也可将其加到 setter 上。")]),s._v(" "),n("h3",{attrs:{id:"autowired"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#autowired"}},[s._v("#")]),s._v(" @Autowired")]),s._v(" "),n("p",[s._v("需要在域属性上使用注解 "),n("code",[s._v("@Autowired")]),s._v("，该注解默认使用 "),n("strong",[s._v("按类型自动装配 Bean")]),s._v(" 的方式。")]),s._v(" "),n("p",[s._v("使用该注解完成属性注入时，类中无需 setter。当然，若属性有 setter，则也可将其加到 setter 上。")]),s._v(" "),n("p",[n("img",{attrs:{src:"/img/1514921700.png",alt:""}})]),s._v(" "),n("p",[n("img",{attrs:{src:"/img/1514921733.png",alt:""}})]),s._v(" "),n("h3",{attrs:{id:"resource"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#resource"}},[s._v("#")]),s._v(" @Resource")]),s._v(" "),n("p",[s._v("需要在域属性上使用注解 "),n("code",[s._v("@Resource")]),s._v("，该注解有一个 "),n("code",[s._v("name")]),s._v(" 属性，可以创建指定的 bean")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('    @Resource(name = "userService")\n    private UserService userService;\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br")])]),n("h3",{attrs:{id:"postconstruct"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#postconstruct"}},[s._v("#")]),s._v(" @PostConstruct")]),s._v(" "),n("p",[s._v("在方法上使用 "),n("code",[s._v("@PostConstruct")]),s._v(" 相当于初始化")]),s._v(" "),n("p",[n("img",{attrs:{src:"/img/1514922518.png",alt:""}})]),s._v(" "),n("h2",{attrs:{id:"注解与-xml-配置的区别"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#注解与-xml-配置的区别"}},[s._v("#")]),s._v(" 注解与 XML 配置的区别")]),s._v(" "),n("p",[s._v("注解的好处是，配置方便，直观。但其弊端也显而易见：以硬编码的方式写入到了 Java 代码中，其修改是需要重新编译代码的。")]),s._v(" "),n("p",[s._v("XML 配置方式的最大好处是，对其所做修改，无需编译代码，只需重启服务器即可将新的配置加载。")]),s._v(" "),n("p",[s._v("若注解与 XML 同用，XML 的优先级要高于注解。这样做的好处是，需要对某个 Bean 做修改，只需修改配置文件即可。")])])}),[],!1,null,null,null);e.default=t.exports}}]);