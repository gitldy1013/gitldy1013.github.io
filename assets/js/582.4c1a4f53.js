(window.webpackJsonp=window.webpackJsonp||[]).push([[582],{1278:function(t,a,v){"use strict";v.r(a);var n=v(5),e=Object(n.a)({},(function(){var t=this,a=t.$createElement,v=t._self._c||a;return v("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[v("h1",{attrs:{id:"变量和常量"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#变量和常量"}},[t._v("#")]),t._v(" 变量和常量")]),t._v(" "),v("h2",{attrs:{id:"标识符与关键字"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#标识符与关键字"}},[t._v("#")]),t._v(" 标识符与关键字")]),t._v(" "),v("h3",{attrs:{id:"标识符"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#标识符"}},[t._v("#")]),t._v(" 标识符")]),t._v(" "),v("p",[t._v("在编程语言中标识符就是程序员定义的具有特殊意义的词，比如变量名、常量名、函数名等等。 Go语言中标识符由字母数字和"),v("code",[t._v("_")]),t._v("(下划线）组成，并且只能以字母和"),v("code",[t._v("_")]),t._v("开头。 举几个例子："),v("code",[t._v("abc")]),t._v(", "),v("code",[t._v("_")]),t._v(", "),v("code",[t._v("_123")]),t._v(", "),v("code",[t._v("a123")]),t._v("。")]),t._v(" "),v("h3",{attrs:{id:"关键字"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#关键字"}},[t._v("#")]),t._v(" 关键字")]),t._v(" "),v("p",[t._v("关键字是指编程语言中预先定义好的具有特殊含义的标识符。 关键字和保留字都不建议用作变量名。")]),t._v(" "),v("p",[t._v("Go语言中有25个关键字：")]),t._v(" "),v("div",{staticClass:"language- extra-class"},[v("pre",[v("code",[t._v("    break        default      func         interface    select\n    case         defer        go           map          struct\n    chan         else         goto         package      switch\n    const        fallthrough  if           range        type\n    continue     for          import       return       var\n")])])]),v("p",[t._v("此外，Go语言中还有37个保留字。")]),t._v(" "),v("div",{staticClass:"language- extra-class"},[v("pre",[v("code",[t._v("    Constants:    true  false  iota  nil\n\n        Types:    int  int8  int16  int32  int64  \n                  uint  uint8  uint16  uint32  uint64  uintptr\n                  float32  float64  complex128  complex64\n                  bool  byte  rune  string  error\n\n    Functions:   make  len  cap  new  append  copy  close  delete\n                 complex  real  imag\n                 panic  recover\n")])])]),v("h2",{attrs:{id:"变量"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#变量"}},[t._v("#")]),t._v(" 变量")]),t._v(" "),v("h3",{attrs:{id:"变量的来历"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#变量的来历"}},[t._v("#")]),t._v(" 变量的来历")]),t._v(" "),v("p",[t._v("程序运行过程中的数据都是保存在内存中，我们想要在代码中操作某个数据时就需要去内存上找到这个变量，但是如果我们直接在代码中通过内存地址去操作变量的话，代码的可读性会非常差而且还容易出错，所以我们就利用变量将这个数据的内存地址保存起来，以后直接通过这个变量就能找到内存上对应的数据了。")]),t._v(" "),v("h3",{attrs:{id:"变量类型"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#变量类型"}},[t._v("#")]),t._v(" 变量类型")]),t._v(" "),v("p",[t._v("变量（Variable）的功能是存储数据。不同的变量保存的数据类型可能会不一样。经过半个多世纪的发展，编程语言已经基本形成了一套固定的类型，常见变量的数据类型有：整型、浮点型、布尔型等。")]),t._v(" "),v("p",[t._v("Go语言中的每一个变量都有自己的类型，并且变量必须经过声明才能开始使用。")]),t._v(" "),v("h3",{attrs:{id:"变量声明"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#变量声明"}},[t._v("#")]),t._v(" 变量声明")]),t._v(" "),v("p",[t._v("Go语言中的变量需要声明后才能使用，同一作用域内不支持重复声明。 并且Go语言的变量声明后必须使用。")]),t._v(" "),v("h4",{attrs:{id:"标准声明"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#标准声明"}},[t._v("#")]),t._v(" 标准声明")]),t._v(" "),v("p",[t._v("Go语言的变量声明格式为：")]),t._v(" "),v("div",{staticClass:"language- extra-class"},[v("pre",[v("code",[t._v("var 变量名 变量类型\n")])])]),v("p",[t._v("变量声明以关键字"),v("code",[t._v("var")]),t._v("开头，变量类型放在变量的后面，行尾无需分号。 举个例子：")]),t._v(" "),v("div",{staticClass:"language- extra-class"},[v("pre",[v("code",[t._v("var name string\nvar age int\nvar isOk bool\n")])])]),v("h4",{attrs:{id:"批量声明"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#批量声明"}},[t._v("#")]),t._v(" 批量声明")]),t._v(" "),v("p",[t._v("每声明一个变量就需要写"),v("code",[t._v("var")]),t._v("关键字会比较繁琐，go语言中还支持批量变量声明：")]),t._v(" "),v("div",{staticClass:"language- extra-class"},[v("pre",[v("code",[t._v("var (\n    a string\n    b int\n    c bool\n    d float32\n)\n")])])]),v("h4",{attrs:{id:"变量的初始化"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#变量的初始化"}},[t._v("#")]),t._v(" 变量的初始化")]),t._v(" "),v("p",[t._v("Go语言在声明变量的时候，会自动对变量对应的内存区域进行初始化操作。每个变量会被初始化成其类型的默认值，例如： 整型和浮点型变量的默认值为"),v("code",[t._v("0")]),t._v("。 字符串变量的默认值为"),v("code",[t._v("空字符串")]),t._v("。 布尔型变量默认为"),v("code",[t._v("false")]),t._v("。 切片、函数、指针变量的默认为"),v("code",[t._v("nil")]),t._v("。")]),t._v(" "),v("p",[t._v("当然我们也可在声明变量的时候为其指定初始值。变量初始化的标准格式如下：")]),t._v(" "),v("div",{staticClass:"language- extra-class"},[v("pre",[v("code",[t._v("var 变量名 类型 = 表达式\n")])])]),v("p",[t._v("举个例子：")]),t._v(" "),v("div",{staticClass:"language- extra-class"},[v("pre",[v("code",[t._v('var name string = "Q1mi"\nvar age int = 18\n')])])]),v("p",[t._v("或者一次初始化多个变量")]),t._v(" "),v("div",{staticClass:"language- extra-class"},[v("pre",[v("code",[t._v('var name, age = "Q1mi", 20\n')])])]),v("h4",{attrs:{id:"类型推导"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#类型推导"}},[t._v("#")]),t._v(" 类型推导")]),t._v(" "),v("p",[t._v("有时候我们会将变量的类型省略，这个时候编译器会根据等号右边的值来推导变量的类型完成初始化。")]),t._v(" "),v("div",{staticClass:"language- extra-class"},[v("pre",[v("code",[t._v('var name = "Q1mi"\nvar age = 18\n')])])]),v("h4",{attrs:{id:"短变量声明"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#短变量声明"}},[t._v("#")]),t._v(" 短变量声明")]),t._v(" "),v("p",[t._v("在函数内部，可以使用更简略的 "),v("code",[t._v(":=")]),t._v(" 方式声明并初始化变量。")]),t._v(" "),v("div",{staticClass:"language- extra-class"},[v("pre",[v("code",[t._v('package main\n\nimport (\n\t"fmt"\n)\n// 全局变量m\nvar m = 100\n\nfunc main() {\n\tn := 10\n\tm := 200 // 此处声明局部变量m\n\tfmt.Println(m, n)\n}\n')])])]),v("h4",{attrs:{id:"匿名变量"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#匿名变量"}},[t._v("#")]),t._v(" 匿名变量")]),t._v(" "),v("p",[t._v("在使用多重赋值时，如果想要忽略某个值，可以使用"),v("code",[t._v("匿名变量（anonymous variable）")]),t._v("。 匿名变量用一个下划线"),v("code",[t._v("_")]),t._v("表示，例如：")]),t._v(" "),v("div",{staticClass:"language- extra-class"},[v("pre",[v("code",[t._v('func foo() (int, string) {\n\treturn 10, "Q1mi"\n}\nfunc main() {\n\tx, _ := foo()\n\t_, y := foo()\n\tfmt.Println("x=", x)\n\tfmt.Println("y=", y)\n}\n')])])]),v("p",[t._v("匿名变量不占用命名空间，不会分配内存，所以匿名变量之间不存在重复声明。 (在"),v("code",[t._v("Lua")]),t._v("等编程语言里，匿名变量也被叫做哑元变量。)")]),t._v(" "),v("p",[t._v("注意事项：")]),t._v(" "),v("ol",[v("li",[t._v("函数外的每个语句都必须以关键字开始（var、const、func等）")]),t._v(" "),v("li",[v("code",[t._v(":=")]),t._v("不能使用在函数外。")]),t._v(" "),v("li",[v("code",[t._v("_")]),t._v("多用于占位，表示忽略值。")])]),t._v(" "),v("h2",{attrs:{id:"常量"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#常量"}},[t._v("#")]),t._v(" 常量")]),t._v(" "),v("p",[t._v("相对于变量，常量是恒定不变的值，多用于定义程序运行期间不会改变的那些值。 常量的声明和变量声明非常类似，只是把"),v("code",[t._v("var")]),t._v("换成了"),v("code",[t._v("const")]),t._v("，常量在定义的时候必须赋值。")]),t._v(" "),v("div",{staticClass:"language- extra-class"},[v("pre",[v("code",[t._v("const pi = 3.1415\nconst e = 2.7182\n")])])]),v("p",[t._v("声明了"),v("code",[t._v("pi")]),t._v("和"),v("code",[t._v("e")]),t._v("这两个常量之后，在整个程序运行期间它们的值都不能再发生变化了。")]),t._v(" "),v("p",[t._v("多个常量也可以一起声明：")]),t._v(" "),v("div",{staticClass:"language- extra-class"},[v("pre",[v("code",[t._v("const (\n    pi = 3.1415\n    e = 2.7182\n)\n")])])]),v("p",[t._v("const同时声明多个常量时，如果省略了值则表示和上面一行的值相同。 例如：")]),t._v(" "),v("div",{staticClass:"language- extra-class"},[v("pre",[v("code",[t._v("const (\n    n1 = 100\n    n2\n    n3\n)\n")])])]),v("p",[t._v("上面示例中，常量"),v("code",[t._v("n1")]),t._v("、"),v("code",[t._v("n2")]),t._v("、"),v("code",[t._v("n3")]),t._v("的值都是100。")]),t._v(" "),v("h3",{attrs:{id:"iota"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#iota"}},[t._v("#")]),t._v(" iota")]),t._v(" "),v("p",[v("code",[t._v("iota")]),t._v("是go语言的常量计数器，只能在常量的表达式中使用。")]),t._v(" "),v("p",[v("code",[t._v("iota")]),t._v("在const关键字出现时将被重置为0。const中每新增一行常量声明将使"),v("code",[t._v("iota")]),t._v("计数一次(iota可理解为const语句块中的行索引)。 使用iota能简化定义，在定义枚举时很有用。")]),t._v(" "),v("p",[t._v("举个例子：")]),t._v(" "),v("div",{staticClass:"language- extra-class"},[v("pre",[v("code",[t._v("const (\n\t\tn1 = iota //0\n\t\tn2        //1\n\t\tn3        //2\n\t\tn4        //3\n\t)\n")])])]),v("h3",{attrs:{id:"几个常见的iota示例"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#几个常见的iota示例"}},[t._v("#")]),t._v(" 几个常见的"),v("code",[t._v("iota")]),t._v("示例:")]),t._v(" "),v("p",[t._v("使用"),v("code",[t._v("_")]),t._v("跳过某些值")]),t._v(" "),v("div",{staticClass:"language- extra-class"},[v("pre",[v("code",[t._v("const (\n\t\tn1 = iota //0\n\t\tn2        //1\n\t\t_\n\t\tn4        //3\n\t)\n")])])]),v("p",[v("code",[t._v("iota")]),t._v("声明中间插队")]),t._v(" "),v("div",{staticClass:"language- extra-class"},[v("pre",[v("code",[t._v("const (\n\t\tn1 = iota //0\n\t\tn2 = 100  //100\n\t\tn3 = iota //2\n\t\tn4        //3\n\t)\n\tconst n5 = iota //0\n")])])]),v("p",[t._v("定义数量级 （这里的"),v("code",[t._v("<<")]),t._v("表示左移操作，"),v("code",[t._v("1<<10")]),t._v("表示将1的二进制表示向左移10位，也就是由"),v("code",[t._v("1")]),t._v("变成了"),v("code",[t._v("10000000000")]),t._v("，也就是十进制的1024。同理"),v("code",[t._v("2<<2")]),t._v("表示将2的二进制表示向左移2位，也就是由"),v("code",[t._v("10")]),t._v("变成了"),v("code",[t._v("1000")]),t._v("，也就是十进制的8。）")]),t._v(" "),v("div",{staticClass:"language- extra-class"},[v("pre",[v("code",[t._v("const (\n\t\t_  = iota\n\t\tKB = 1 << (10 * iota)\n\t\tMB = 1 << (10 * iota)\n\t\tGB = 1 << (10 * iota)\n\t\tTB = 1 << (10 * iota)\n\t\tPB = 1 << (10 * iota)\n\t)\n")])])]),v("p",[t._v("多个"),v("code",[t._v("iota")]),t._v("定义在一行")]),t._v(" "),v("div",{staticClass:"language- extra-class"},[v("pre",[v("code",[t._v("const (\n\t\ta, b = iota + 1, iota + 2 //1,2\n\t\tc, d                      //2,3\n\t\te, f                      //3,4\n\t)")])])])])}),[],!1,null,null,null);a.default=e.exports}}]);