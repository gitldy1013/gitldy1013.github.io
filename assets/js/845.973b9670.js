(window.webpackJsonp=window.webpackJsonp||[]).push([[845],{1541:function(s,n,e){"use strict";e.r(n);var a=e(5),t=Object(a.a)({},(function(){var s=this,n=s.$createElement,e=s._self._c||n;return e("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[e("h1",{attrs:{id:"ingress-统一访问入口"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#ingress-统一访问入口"}},[s._v("#")]),s._v(" Ingress 统一访问入口")]),s._v(" "),e("h2",{attrs:{id:"术语"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#术语"}},[s._v("#")]),s._v(" 术语")]),s._v(" "),e("ul",[e("li",[e("strong",[s._v("节点：")]),s._v(" Kubernetes 集群中的服务器")]),s._v(" "),e("li",[e("strong",[s._v("集群：")]),s._v(" Kubernetes 管理的一组服务器集合")]),s._v(" "),e("li",[e("strong",[s._v("边界路由器：")]),s._v(" 为局域网和 Internet 路由数据包的路由器，执行防火墙保护局域网络")]),s._v(" "),e("li",[e("strong",[s._v("集群网络：")]),s._v(" 遵循 Kubernetes 网络模型实现集群内的通信的具体实现，比如 Flannel 和 Calico")]),s._v(" "),e("li",[e("strong",[s._v("服务：")]),s._v(" Kubernetes 的服务 (Service) 是使用标签选择器标识的一组 Pod Service (Deployment)。 "),e("strong",[s._v("除非另有说明，否则服务的虚拟 IP 仅可在集群内部访问")])])]),s._v(" "),e("h2",{attrs:{id:"内部访问方式-clusterip"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#内部访问方式-clusterip"}},[s._v("#")]),s._v(" 内部访问方式 ClusterIP")]),s._v(" "),e("p",[s._v("ClusterIP 服务是 Kubernetes 的默认服务。它给你一个集群内的服务，集群内的其它应用都可以访问该服务。集群外部无法访问它。在某些场景下我们可以使用 Kubernetes 的 Proxy 模式来访问服务，比如调试服务时。")]),s._v(" "),e("p",[e("img",{attrs:{src:"/img/2019060601200001.png",alt:""}})]),s._v(" "),e("h2",{attrs:{id:"三种外部访问方式"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#三种外部访问方式"}},[s._v("#")]),s._v(" 三种外部访问方式")]),s._v(" "),e("h3",{attrs:{id:"nodeport"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#nodeport"}},[s._v("#")]),s._v(" NodePort")]),s._v(" "),e("p",[s._v("NodePort 服务是引导外部流量到你的服务的最原始方式。NodePort，正如这个名字所示，"),e("strong",[s._v("在所有节点（虚拟机）上开放一个特定端口")]),s._v("，任何发送到该端口的流量都被转发到对应服务。")]),s._v(" "),e("p",[s._v("NodePort 服务特征如下：")]),s._v(" "),e("ul",[e("li",[s._v("每个端口只能是一种服务")]),s._v(" "),e("li",[s._v("端口范围只能是 30000-32767（可调）")]),s._v(" "),e("li",[s._v("不在 YAML 配置文件中指定则会分配一个默认端口")])]),s._v(" "),e("blockquote",[e("p",[e("strong",[s._v("建议：")]),s._v(" 不要在生产环境中使用这种方式暴露服务，大多数时候我们应该让 Kubernetes 来选择端口")])]),s._v(" "),e("p",[e("img",{attrs:{src:"/img/2019060601200002.png",alt:""}})]),s._v(" "),e("h3",{attrs:{id:"loadbalancer"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#loadbalancer"}},[s._v("#")]),s._v(" LoadBalancer")]),s._v(" "),e("p",[s._v("LoadBalancer 服务是暴露服务到 Internet 的标准方式。所有通往你指定的端口的流量都会被转发到对应的服务。它没有过滤条件，没有路由等。这意味着你几乎可以发送任何种类的流量到该服务，像 HTTP，TCP，UDP，WebSocket，gRPC 或其它任意种类。")]),s._v(" "),e("p",[e("img",{attrs:{src:"/img/2019060601200003.png",alt:""}})]),s._v(" "),e("h3",{attrs:{id:"ingress"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#ingress"}},[s._v("#")]),s._v(" Ingress")]),s._v(" "),e("p",[s._v("Ingress 事实上不是一种服务类型。相反，它处于多个服务的前端，扮演着 “智能路由” 或者集群入口的角色。你可以用 Ingress 来做许多不同的事情，各种不同类型的 Ingress 控制器也有不同的能力。它允许你基于路径或者子域名来路由流量到后端服务。")]),s._v(" "),e("p",[s._v("Ingress 可能是暴露服务的最强大方式，但同时也是最复杂的。Ingress 控制器有各种类型，包括 Google Cloud Load Balancer， Nginx，Contour，Istio，等等。它还有各种插件，比如 cert-manager (它可以为你的服务自动提供 SSL 证书)/")]),s._v(" "),e("p",[s._v("如果你想要使用同一个 IP 暴露多个服务，这些服务都是使用相同的七层协议（典型如 HTTP），你还可以获取各种开箱即用的特性（比如 SSL、认证、路由等等）")]),s._v(" "),e("p",[e("img",{attrs:{src:"/img/2019060601200004.png",alt:""}})]),s._v(" "),e("h2",{attrs:{id:"什么是-ingress"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#什么是-ingress"}},[s._v("#")]),s._v(" 什么是 Ingress")]),s._v(" "),e("p",[s._v("通常情况下，Service 和 Pod 的 IP 仅可在集群内部访问。集群外部的请求需要通过负载均衡转发到 Service 在 Node 上暴露的 NodePort 上，然后再由 kube-proxy 通过边缘路由器 (edge router) 将其转发给相关的 Pod 或者丢弃。而 Ingress 就是为进入集群的请求提供路由规则的集合")]),s._v(" "),e("p",[s._v("Ingress 可以给 Service 提供集群外部访问的 URL、负载均衡、SSL 终止、HTTP 路由等。为了配置这些 Ingress 规则，集群管理员需要部署一个 Ingress Controller，它监听 Ingress 和 Service 的变化，并根据规则配置负载均衡并提供访问入口。")]),s._v(" "),e("h2",{attrs:{id:"使用-nginx-ingress-controller"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#使用-nginx-ingress-controller"}},[s._v("#")]),s._v(" 使用 Nginx Ingress Controller")]),s._v(" "),e("p",[s._v("本次实践的主要目的就是将入口统一，不再通过 LoadBalancer 等方式将端口暴露出来，而是使用 Ingress 提供的反向代理负载均衡功能作为我们的唯一入口。通过以下步骤操作仔细体会。")]),s._v(" "),e("blockquote",[e("p",[e("strong",[s._v("注意：")]),s._v(" 下面包含资源配置的步骤都是自行创建 YAML 配置文件通过 "),e("code",[s._v("kubectl create -f <YAML>")]),s._v(" 和 "),e("code",[s._v("kubectl delete -f <YAML>")]),s._v(" 部署和删除")])]),s._v(" "),e("h3",{attrs:{id:"部署-tomcat"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#部署-tomcat"}},[s._v("#")]),s._v(" 部署 Tomcat")]),s._v(" "),e("p",[s._v("部署 Tomcat 但仅允许在内网访问，我们要通过 Ingress 提供的反向代理功能路由到 Tomcat 之上")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("    apiVersion: extensions/v1beta1\n    kind: Deployment\n    metadata:\n      name: tomcat-app\n    spec:\n      replicas: 2\n      template:\n        metadata:\n          labels:\n            name: tomcat\n        spec:\n          containers:\n          - name: tomcat\n            image: tomcat\n            ports:\n            - containerPort: 8080\n    ---\n    apiVersion: v1\n    kind: Service\n    metadata:\n      name: tomcat-http\n    spec:\n      ports:\n        - port: 8080\n          targetPort: 8080\n      # ClusterIP, NodePort, LoadBalancer\n      type: LoadBalancer\n      selector:\n        name: tomcat\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br"),e("span",{staticClass:"line-number"},[s._v("16")]),e("br"),e("span",{staticClass:"line-number"},[s._v("17")]),e("br"),e("span",{staticClass:"line-number"},[s._v("18")]),e("br"),e("span",{staticClass:"line-number"},[s._v("19")]),e("br"),e("span",{staticClass:"line-number"},[s._v("20")]),e("br"),e("span",{staticClass:"line-number"},[s._v("21")]),e("br"),e("span",{staticClass:"line-number"},[s._v("22")]),e("br"),e("span",{staticClass:"line-number"},[s._v("23")]),e("br"),e("span",{staticClass:"line-number"},[s._v("24")]),e("br"),e("span",{staticClass:"line-number"},[s._v("25")]),e("br"),e("span",{staticClass:"line-number"},[s._v("26")]),e("br"),e("span",{staticClass:"line-number"},[s._v("27")]),e("br"),e("span",{staticClass:"line-number"},[s._v("28")]),e("br"),e("span",{staticClass:"line-number"},[s._v("29")]),e("br")])]),e("h3",{attrs:{id:"安装-nginx-ingress-controller"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#安装-nginx-ingress-controller"}},[s._v("#")]),s._v(" 安装 Nginx Ingress Controller")]),s._v(" "),e("p",[s._v("Ingress Controller 有许多种，我们选择最熟悉的 Nginx 来处理请求，其它可以参考 "),e("a",{attrs:{href:"https://kubernetes.io/docs/concepts/services-networking/ingress-controllers/",target:"_blank",rel:"noopener noreferrer"}},[s._v("官方文档"),e("OutboundLink")],1)]),s._v(" "),e("ul",[e("li",[s._v("下载 Nginx Ingress Controller 配置文件")])]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("    wget https://raw.githubusercontent.com/kubernetes/ingress-nginx/master/deploy/static/mandatory.yaml\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br")])]),e("ul",[e("li",[s._v("修改配置文件，找到配置如下位置 (搜索 "),e("code",[s._v("serviceAccountName")]),s._v(") 在下面增加一句 "),e("code",[s._v("hostNetwork: true")])])]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v('    apiVersion: apps/v1\n    kind: Deployment\n    metadata:\n      name: nginx-ingress-controller\n      namespace: ingress-nginx\n      labels:\n        app.kubernetes.io/name: ingress-nginx\n        app.kubernetes.io/part-of: ingress-nginx\n    spec:\n      # 可以部署多个实例\n      replicas: 1\n      selector:\n        matchLabels:\n          app.kubernetes.io/name: ingress-nginx\n          app.kubernetes.io/part-of: ingress-nginx\n      template:\n        metadata:\n          labels:\n            app.kubernetes.io/name: ingress-nginx\n            app.kubernetes.io/part-of: ingress-nginx\n          annotations:\n            prometheus.io/port: "10254"\n            prometheus.io/scrape: "true"\n        spec:\n          serviceAccountName: nginx-ingress-serviceaccount\n          # 增加 hostNetwork: true，意思是开启主机网络模式，暴露 Nginx 服务端口 80\n          hostNetwork: true\n          containers:\n            - name: nginx-ingress-controller\n              image: quay.io/kubernetes-ingress-controller/nginx-ingress-controller:0.24.1\n              args:\n                - /nginx-ingress-controller\n                - --configmap=$(POD_NAMESPACE)/nginx-configuration\n                - --tcp-services-configmap=$(POD_NAMESPACE)/tcp-services\n                - --udp-services-configmap=$(POD_NAMESPACE)/udp-services\n                - --publish-service=$(POD_NAMESPACE)/ingress-nginx\n    // 以下代码省略...\n')])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br"),e("span",{staticClass:"line-number"},[s._v("16")]),e("br"),e("span",{staticClass:"line-number"},[s._v("17")]),e("br"),e("span",{staticClass:"line-number"},[s._v("18")]),e("br"),e("span",{staticClass:"line-number"},[s._v("19")]),e("br"),e("span",{staticClass:"line-number"},[s._v("20")]),e("br"),e("span",{staticClass:"line-number"},[s._v("21")]),e("br"),e("span",{staticClass:"line-number"},[s._v("22")]),e("br"),e("span",{staticClass:"line-number"},[s._v("23")]),e("br"),e("span",{staticClass:"line-number"},[s._v("24")]),e("br"),e("span",{staticClass:"line-number"},[s._v("25")]),e("br"),e("span",{staticClass:"line-number"},[s._v("26")]),e("br"),e("span",{staticClass:"line-number"},[s._v("27")]),e("br"),e("span",{staticClass:"line-number"},[s._v("28")]),e("br"),e("span",{staticClass:"line-number"},[s._v("29")]),e("br"),e("span",{staticClass:"line-number"},[s._v("30")]),e("br"),e("span",{staticClass:"line-number"},[s._v("31")]),e("br"),e("span",{staticClass:"line-number"},[s._v("32")]),e("br"),e("span",{staticClass:"line-number"},[s._v("33")]),e("br"),e("span",{staticClass:"line-number"},[s._v("34")]),e("br"),e("span",{staticClass:"line-number"},[s._v("35")]),e("br"),e("span",{staticClass:"line-number"},[s._v("36")]),e("br"),e("span",{staticClass:"line-number"},[s._v("37")]),e("br")])]),e("h3",{attrs:{id:"部署-ingress"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#部署-ingress"}},[s._v("#")]),s._v(" "),e("a",{attrs:{href:"#%E9%83%A8%E7%BD%B2-ingress"}},[s._v("#")]),s._v(" 部署 Ingress")]),s._v(" "),e("p",[s._v("Ingress 翻译过来是入口的意思，说白了就是个 API 网关（想想之前学的 Zuul 和 Spring Cloud Gateway）")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v('    apiVersion: networking.k8s.io/v1beta1\n    kind: Ingress\n    metadata:\n      name: nginx-web\n      annotations:\n        # 指定 Ingress Controller 的类型\n        kubernetes.io/ingress.class: "nginx"\n        # 指定我们的 rules 的 path 可以使用正则表达式\n        nginx.ingress.kubernetes.io/use-regex: "true"\n        # 连接超时时间，默认为 5s\n        nginx.ingress.kubernetes.io/proxy-connect-timeout: "600"\n        # 后端服务器回转数据超时时间，默认为 60s\n        nginx.ingress.kubernetes.io/proxy-send-timeout: "600"\n        # 后端服务器响应超时时间，默认为 60s\n        nginx.ingress.kubernetes.io/proxy-read-timeout: "600"\n        # 客户端上传文件，最大大小，默认为 20m\n        nginx.ingress.kubernetes.io/proxy-body-size: "10m"\n        # URL 重写\n        nginx.ingress.kubernetes.io/rewrite-target: /\n    spec:\n      # 路由规则\n      rules:\n      # 主机名，只能是域名，修改为你自己的\n      - host: k8s.test.com\n        http:\n          paths:\n          - path:\n            backend:\n              # 后台部署的 Service Name，与上面部署的 Tomcat 对应\n              serviceName: tomcat-http\n              # 后台部署的 Service Port，与上面部署的 Tomcat 对应\n              servicePort: 8080\n')])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br"),e("span",{staticClass:"line-number"},[s._v("16")]),e("br"),e("span",{staticClass:"line-number"},[s._v("17")]),e("br"),e("span",{staticClass:"line-number"},[s._v("18")]),e("br"),e("span",{staticClass:"line-number"},[s._v("19")]),e("br"),e("span",{staticClass:"line-number"},[s._v("20")]),e("br"),e("span",{staticClass:"line-number"},[s._v("21")]),e("br"),e("span",{staticClass:"line-number"},[s._v("22")]),e("br"),e("span",{staticClass:"line-number"},[s._v("23")]),e("br"),e("span",{staticClass:"line-number"},[s._v("24")]),e("br"),e("span",{staticClass:"line-number"},[s._v("25")]),e("br"),e("span",{staticClass:"line-number"},[s._v("26")]),e("br"),e("span",{staticClass:"line-number"},[s._v("27")]),e("br"),e("span",{staticClass:"line-number"},[s._v("28")]),e("br"),e("span",{staticClass:"line-number"},[s._v("29")]),e("br"),e("span",{staticClass:"line-number"},[s._v("30")]),e("br"),e("span",{staticClass:"line-number"},[s._v("31")]),e("br"),e("span",{staticClass:"line-number"},[s._v("32")]),e("br")])]),e("h2",{attrs:{id:"验证是否成功"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#验证是否成功"}},[s._v("#")]),s._v(" 验证是否成功")]),s._v(" "),e("h3",{attrs:{id:"查看-tomcat"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#查看-tomcat"}},[s._v("#")]),s._v(" 查看 Tomcat")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("    kubectl get deployment\n    \n    # 输出如下\n    NAME         READY   UP-TO-DATE   AVAILABLE   AGE\n    tomcat-app   2/2     2            2           88m\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br")])]),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("    kubectl get service\n    \n    # 输出如下\n    NAME          TYPE        CLUSTER-IP      EXTERNAL-IP   PORT(S)    AGE\n    kubernetes    ClusterIP   10.96.0.1       <none>        443/TCP    2d5h\n    tomcat-http   ClusterIP   10.97.222.179   <none>        8080/TCP   89m\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br")])]),e("h3",{attrs:{id:"查看-nginx-ingress-controller"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#查看-nginx-ingress-controller"}},[s._v("#")]),s._v(" 查看 Nginx Ingress Controller")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("    kubectl get pods -n ingress-nginx -o wide\n    \n    # 输出如下，注意下面的 IP 地址，就是我们实际访问地址\n    NAME                                        READY   STATUS    RESTARTS   AGE   IP                NODE                 NOMINATED NODE   READINESS GATES\n    nginx-ingress-controller-76f9fddcf8-vzkm5   1/1     Running   0          61m   192.168.141.160   kubernetes-node-01   <none>           <none>\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br")])]),e("h3",{attrs:{id:"查看-ingress"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#查看-ingress"}},[s._v("#")]),s._v(" 查看 Ingress")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("    kubectl get ingress\n    \n    # 输出如下\n    NAME        HOSTS          ADDRESS   PORTS   AGE\n    nginx-web   k8s.test.com             80      61m\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br")])]),e("h3",{attrs:{id:"测试访问"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#测试访问"}},[s._v("#")]),s._v(" 测试访问")]),s._v(" "),e("p",[s._v("成功代理到 Tomcat 即表示成功")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("    # 不设置 Hosts 的方式请求地址，下面的 IP 和 Host 均在上面有配置\n    curl -v http://192.168.141.160 -H 'host: k8s.test.com'\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br")])])])}),[],!1,null,null,null);n.default=t.exports}}]);