(window.webpackJsonp=window.webpackJsonp||[]).push([[243],{940:function(s,n,e){"use strict";e.r(n);var t=e(5),a=Object(t.a)({},(function(){var s=this,n=s.$createElement,e=s._self._c||n;return e("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[e("h1",{attrs:{id:"重建二叉树"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#重建二叉树"}},[s._v("#")]),s._v(" 重建二叉树")]),s._v(" "),e("h2",{attrs:{id:"来源"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#来源"}},[s._v("#")]),s._v(" 来源")]),s._v(" "),e("p",[s._v("https://www.nowcoder.com/practice/8a19cbe657394eeaac2f6ea9b0f6fcf6")]),s._v(" "),e("h2",{attrs:{id:"题目"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#题目"}},[s._v("#")]),s._v(" 题目")]),s._v(" "),e("p",[s._v("输入某二叉树的前序遍历和中序遍历的结果，请重建出该二叉树。假设输入的前序遍历和中序遍历的结果中都不含重复的数字。例如输入前序遍历序列{1,2,4,7,3,5,6,8}和中序遍历序列{4,7,2,1,5,3,8,6}，则重建二叉树并返回。")]),s._v(" "),e("h2",{attrs:{id:"重建过程"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#重建过程"}},[s._v("#")]),s._v(" 重建过程")]),s._v(" "),e("p",[s._v("先找到根节点，也就是先序遍历的第一个节点，即1为根节点")]),s._v(" "),e("p",[s._v("然后从中序遍历中寻找，在1左边的属于左子树（4,7,2），右边的属于右子树：（5,3,8,6）")]),s._v(" "),e("p",[s._v("然后在从先序遍历的第二个节点中寻找出2，作为根节点的左孩子，我们在寻找2节点的左孩子和右孩子，发现只有（4,7）为左节点，没有右节点，然后我们再从先序遍历中寻找出下一个节点，即为4，然后找出4节点的右孩子，即为7。到这里位置，左子树已经构建成功。")]),s._v(" "),e("p",[s._v("构建右子树时，我们需要从先序遍历中，再次输出一个节点3，作为根节点的右子树，然后在从刚刚分类好的中序遍历中，寻找到子树3的左孩子和右孩子，左孩子为（5），右孩子为（8,6），我们继续出列先序遍历，得到5，即3节点的左孩子，然后在出列得到6，也就是3的右孩子，然后在中序遍历中寻找到6的左孩子和右孩子，最后发现只剩下8在，6的左边，因此右孩子为8")]),s._v(" "),e("p",[e("img",{attrs:{src:"/images/image-20200529144737938.png",alt:"image-20200529144737938"}})]),s._v(" "),e("h2",{attrs:{id:"代码"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#代码"}},[s._v("#")]),s._v(" 代码")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("class TreeNode:\n    def __init__(self, x):\n        self.val = x\n        self.left = None\n        self.right = None\nclass Solution:\n    # 返回构造的TreeNode根节点\n    def reConstructBinaryTree(self, pre, tin):\n        # 取出pre的值\n        if not pre or not tin:\n            return None\n        if len(pre) != len(tin):\n            return None\n        root = pre[0]\n        # 新建立节点\n        rootNode = TreeNode(root)\n        # 找出这个节点，在中序遍历对应的角标\n        pos = tin.index(root)\n        # 取出中序遍历 左子树\n        tinLeft = tin[:pos]\n        # 取出中序遍历 右子树\n        tinRight = tin[pos+1:]\n        # 取出先序遍历的 左子树\n        preLeft = pre[1:pos+1]\n        # 取出先序遍历的 右子树\n        preRight = pre[pos+1:]\n\n        leftNode = self.reConstructBinaryTree(preLeft, tinLeft)\n        rightNode = self.reConstructBinaryTree(preRight, tinRight)\n\n        if leftNode:\n            rootNode.left = leftNode\n        if rightNode:\n            rootNode.right = rightNode\n        return rootNode\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br"),e("span",{staticClass:"line-number"},[s._v("16")]),e("br"),e("span",{staticClass:"line-number"},[s._v("17")]),e("br"),e("span",{staticClass:"line-number"},[s._v("18")]),e("br"),e("span",{staticClass:"line-number"},[s._v("19")]),e("br"),e("span",{staticClass:"line-number"},[s._v("20")]),e("br"),e("span",{staticClass:"line-number"},[s._v("21")]),e("br"),e("span",{staticClass:"line-number"},[s._v("22")]),e("br"),e("span",{staticClass:"line-number"},[s._v("23")]),e("br"),e("span",{staticClass:"line-number"},[s._v("24")]),e("br"),e("span",{staticClass:"line-number"},[s._v("25")]),e("br"),e("span",{staticClass:"line-number"},[s._v("26")]),e("br"),e("span",{staticClass:"line-number"},[s._v("27")]),e("br"),e("span",{staticClass:"line-number"},[s._v("28")]),e("br"),e("span",{staticClass:"line-number"},[s._v("29")]),e("br"),e("span",{staticClass:"line-number"},[s._v("30")]),e("br"),e("span",{staticClass:"line-number"},[s._v("31")]),e("br"),e("span",{staticClass:"line-number"},[s._v("32")]),e("br"),e("span",{staticClass:"line-number"},[s._v("33")]),e("br"),e("span",{staticClass:"line-number"},[s._v("34")]),e("br"),e("span",{staticClass:"line-number"},[s._v("35")]),e("br")])]),e("p",[s._v("代码的实现，使用了递归的方式，也就是采用了分治法，将要解决的问题一分为二，这里指的是先序遍历和中序遍历。")])])}),[],!1,null,null,null);n.default=a.exports}}]);