(window.webpackJsonp=window.webpackJsonp||[]).push([[719],{1416:function(t,v,_){"use strict";_.r(v);var d=_(5),e=Object(d.a)({},(function(){var t=this,v=t.$createElement,_=t._self._c||v;return _("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[_("h1",{attrs:{id:"抽象类和接口有什么区别"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#抽象类和接口有什么区别"}},[t._v("#")]),t._v(" 抽象类和接口有什么区别")]),t._v(" "),_("table",[_("thead",[_("tr",[_("th",[t._v("参数")]),t._v(" "),_("th",[t._v("抽象类")]),t._v(" "),_("th",[t._v("接口")])])]),t._v(" "),_("tbody",[_("tr",[_("td",[t._v("默认的方法实现")]),t._v(" "),_("td",[t._v("它可以有默认的方法实现")]),t._v(" "),_("td",[t._v("接口完全是抽象的。它根本不存在方法的实现")])]),t._v(" "),_("tr",[_("td",[t._v("实现")]),t._v(" "),_("td",[t._v("子类使用 extends 关键字来继承抽象类。如果子类不是抽象类的话，它需要提供抽象类中所有声明的方法的实现。")]),t._v(" "),_("td",[t._v("子类使用关键字 implements 来实现接口。它需要提供接口中所有声明的方法的实现")])]),t._v(" "),_("tr",[_("td",[t._v("构造器")]),t._v(" "),_("td",[t._v("抽象类可以有构造器")]),t._v(" "),_("td",[t._v("接口不能有构造器")])]),t._v(" "),_("tr",[_("td",[t._v("与正常 Java 类的区别")]),t._v(" "),_("td",[t._v("除了你不能实例化抽象类之外，它和普通Java类没有任何区别")]),t._v(" "),_("td",[t._v("接口是完全不同的类型")])]),t._v(" "),_("tr",[_("td",[t._v("访问修饰符")]),t._v(" "),_("td",[t._v("抽象方法可以有 public、protected 和 default 这些修饰符")]),t._v(" "),_("td",[t._v("接口方法默认修饰符是 public。你不可以使用其它修饰符。")])]),t._v(" "),_("tr",[_("td",[t._v("main 方法")]),t._v(" "),_("td",[t._v("抽象方法可以有 main 方法并且我们可以运行它")]),t._v(" "),_("td",[t._v("接口没有 main 方法，因此我们不能运行它。")])]),t._v(" "),_("tr",[_("td",[t._v("多继承")]),t._v(" "),_("td",[t._v("抽象方法可以继承一个类和实现多个接口")]),t._v(" "),_("td",[t._v("接口只可以继承一个或多个其它接口")])]),t._v(" "),_("tr",[_("td",[t._v("速度")]),t._v(" "),_("td",[t._v("它比接口速度要快")]),t._v(" "),_("td",[t._v("接口是稍微有点慢的，因为它需要时间去寻找在类中实现的方法。")])]),t._v(" "),_("tr",[_("td",[t._v("添加新方法")]),t._v(" "),_("td",[t._v("如果你往抽象类中添加新的方法，你可以给它提供默认的实现。因此你不需要改变你现在的代码。")]),t._v(" "),_("td",[t._v("如果你往接口中添加方法，那么你必须改变实现该接口的类。")])])])])])}),[],!1,null,null,null);v.default=e.exports}}]);