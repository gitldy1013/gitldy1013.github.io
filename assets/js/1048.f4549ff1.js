(window.webpackJsonp=window.webpackJsonp||[]).push([[1048],{1744:function(a,s,n){"use strict";n.r(s);var t=n(5),e=Object(t.a)({},(function(){var a=this,s=a.$createElement,n=a._self._c||s;return n("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[n("h1",{attrs:{id:"spring-validation"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#spring-validation"}},[a._v("#")]),a._v(" Spring Validation")]),a._v(" "),n("h2",{attrs:{id:"jsr-303-简介"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#jsr-303-简介"}},[a._v("#")]),a._v(" JSR-303 简介")]),a._v(" "),n("p",[a._v("JSR-303 是 JavaEE 6 中的一项子规范，叫做 Bean Validation，官方参考实现是 Hibernate Validator。")]),a._v(" "),n("p",[a._v("此实现与 Hibernate ORM 没有任何关系。JSR-303 用于对 Java Bean 中的字段的值进行验证。 Spring MVC 3.x 之中也大力支持 JSR-303，可以在控制器中使用注解的方式对表单提交的数据方便地验证。")]),a._v(" "),n("p",[a._v("Spring 4.0 开始支持 Bean Validation 功能。")]),a._v(" "),n("h2",{attrs:{id:"jsr-303-基本的校验规则"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#jsr-303-基本的校验规则"}},[a._v("#")]),a._v(" JSR-303 基本的校验规则")]),a._v(" "),n("h3",{attrs:{id:"空检查"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#空检查"}},[a._v("#")]),a._v(" 空检查")]),a._v(" "),n("ul",[n("li",[n("code",[a._v("@Null")]),a._v(" 验证对象是否为 "),n("code",[a._v("null")])]),a._v(" "),n("li",[n("code",[a._v("@NotNull")]),a._v(" 验证对象是否不为 "),n("code",[a._v("null")]),a._v(", 无法查检长度为 0 的字符串")]),a._v(" "),n("li",[n("code",[a._v("@NotBlank")]),a._v(" 检查约束字符串是不是 "),n("code",[a._v("Null")]),a._v(" 还有被 "),n("code",[a._v("Trim")]),a._v(" 的长度是否大于 0,只对字符串,且会去掉前后空格")]),a._v(" "),n("li",[n("code",[a._v("@NotEmpty")]),a._v(" 检查约束元素是否为 "),n("code",[a._v("NULL")]),a._v(" 或者是 "),n("code",[a._v("EMPTY")])])]),a._v(" "),n("h3",{attrs:{id:"布尔检查"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#布尔检查"}},[a._v("#")]),a._v(" 布尔检查")]),a._v(" "),n("ul",[n("li",[n("code",[a._v("@AssertTrue")]),a._v(" 验证 "),n("code",[a._v("Boolean")]),a._v(" 对象是否为 "),n("code",[a._v("true")])]),a._v(" "),n("li",[n("code",[a._v("@AssertFalse")]),a._v(" 验证 "),n("code",[a._v("Boolean")]),a._v(" 对象是否为 "),n("code",[a._v("false")])])]),a._v(" "),n("h3",{attrs:{id:"长度检查"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#长度检查"}},[a._v("#")]),a._v(" 长度检查")]),a._v(" "),n("ul",[n("li",[n("code",[a._v("@Size(min=, max=)")]),a._v(" 验证对象（"),n("code",[a._v("Array")]),a._v(", "),n("code",[a._v("Collection")]),a._v(" , "),n("code",[a._v("Map")]),a._v(", "),n("code",[a._v("String")]),a._v("）长度是否在给定的范围之内")]),a._v(" "),n("li",[n("code",[a._v("@Length(min=, max=)")]),a._v(" 验证字符串长度介于 "),n("code",[a._v("min")]),a._v(" 和 "),n("code",[a._v("max")]),a._v(" 之间")])]),a._v(" "),n("h3",{attrs:{id:"日期检查"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#日期检查"}},[a._v("#")]),a._v(" 日期检查")]),a._v(" "),n("ul",[n("li",[n("code",[a._v("@Past")]),a._v(" 验证 "),n("code",[a._v("Date")]),a._v(" 和 "),n("code",[a._v("Calendar")]),a._v(" 对象是否在当前时间之前，验证成立的话被注释的元素一定是一个过去的日期")]),a._v(" "),n("li",[n("code",[a._v("@Future")]),a._v(" 验证 "),n("code",[a._v("Date")]),a._v(" 和 "),n("code",[a._v("Calendar")]),a._v(" 对象是否在当前时间之后 ，验证成立的话被注释的元素一定是一个将来的日期")])]),a._v(" "),n("h3",{attrs:{id:"正则检查"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#正则检查"}},[a._v("#")]),a._v(" 正则检查")]),a._v(" "),n("ul",[n("li",[n("code",[a._v("@Pattern")]),a._v(" 验证 "),n("code",[a._v("String")]),a._v(" 对象是否符合正则表达式的规则，被注释的元素符合制定的正则表达式\n"),n("ul",[n("li",[n("code",[a._v("regexp")]),a._v("：正则表达式")]),a._v(" "),n("li",[n("code",[a._v("flags")]),a._v("：指定 "),n("code",[a._v("Pattern.Flag")]),a._v(" 的数组，表示正则表达式的相关选项")])])])]),a._v(" "),n("h3",{attrs:{id:"数值检查"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#数值检查"}},[a._v("#")]),a._v(" 数值检查")]),a._v(" "),n("p",[n("strong",[a._v("注意：")]),a._v(" 建议使用在 "),n("code",[a._v("String")]),a._v(" ,"),n("code",[a._v("Integer")]),a._v(" 类型，不建议使用在 "),n("code",[a._v("int")]),a._v(" 类型上，因为表单值为 "),n("code",[a._v("“”")]),a._v(" 时无法转换为 "),n("code",[a._v("int")]),a._v("，但可以转换为 "),n("code",[a._v("String")]),a._v(" 为 "),n("code",[a._v("“”")]),a._v("，"),n("code",[a._v("Integer")]),a._v(" 为 "),n("code",[a._v("null")])]),a._v(" "),n("ul",[n("li",[n("code",[a._v("@Min")]),a._v(" 验证 Number 和 String 对象是否大等于指定的值")]),a._v(" "),n("li",[n("code",[a._v("@Max")]),a._v(" 验证 Number 和 String 对象是否小等于指定的值")]),a._v(" "),n("li",[n("code",[a._v("@DecimalMax")]),a._v(" 被标注的值必须不大于约束中指定的最大值. 这个约束的参数是一个通过 "),n("code",[a._v("BigDecimal")]),a._v(" 定义的最大值的字符串表示 "),n("code",[a._v(".小数")]),a._v(" 存在精度")]),a._v(" "),n("li",[n("code",[a._v("@DecimalMin")]),a._v(" 被标注的值必须不小于约束中指定的最小值. 这个约束的参数是一个通过 "),n("code",[a._v("BigDecimal")]),a._v(" 定义的最小值的字符串表示 "),n("code",[a._v(".小数")]),a._v(" 存在精度")]),a._v(" "),n("li",[n("code",[a._v("@Digits")]),a._v(" 验证 Number 和 String 的构成是否合法")]),a._v(" "),n("li",[n("code",[a._v("@Digits(integer=,fraction=)")]),a._v(" 验证字符串是否是符合指定格式的数字，"),n("code",[a._v("integer")]),a._v(" 指定整数精度，"),n("code",[a._v("fraction")]),a._v(" 指定小数精度")]),a._v(" "),n("li",[n("code",[a._v("@Range(min=, max=)")]),a._v(" 被指定的元素必须在合适的范围内")]),a._v(" "),n("li",[n("code",[a._v("@Range(min=10000,max=50000,message=”range.bean.wage”)")])]),a._v(" "),n("li",[n("code",[a._v("@Valid")]),a._v(" 递归的对关联对象进行校验, 如果关联对象是个集合或者数组，那么对其中的元素进行递归校验，如果是一个 "),n("code",[a._v("map")]),a._v("，则对其中的值部分进行校验.(是否进行递归验证)")]),a._v(" "),n("li",[n("code",[a._v("@CreditCardNumber")]),a._v(" 信用卡验证")]),a._v(" "),n("li",[n("code",[a._v("@Email")]),a._v(" 验证是否是邮件地址，"),n("strong",[a._v("如果为 "),n("code",[a._v("null")]),a._v("，不进行验证，算通过验证")])]),a._v(" "),n("li",[n("code",[a._v("@ScriptAssert(lang= ,script=, alias=)")])]),a._v(" "),n("li",[n("code",[a._v("@URL(protocol=,host=, port=,regexp=, flags=)")])])]),a._v(" "),n("h2",{attrs:{id:"使用-spring-validation-验证"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#使用-spring-validation-验证"}},[a._v("#")]),a._v(" 使用 Spring Validation 验证")]),a._v(" "),n("h3",{attrs:{id:"pom"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#pom"}},[a._v("#")]),a._v(" POM")]),a._v(" "),n("p",[a._v("这里我们使用 Hibernate Validator 5.x 来实现 Spring Validation 接口，"),n("code",[a._v("pom.xml")]),a._v(" 文件如下：")]),a._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[a._v("    <dependency>\n        <groupId>org.hibernate</groupId>\n        <artifactId>hibernate-validator</artifactId>\n        <version>5.3.4.Final</version>\n    </dependency>\n")])]),a._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[a._v("1")]),n("br"),n("span",{staticClass:"line-number"},[a._v("2")]),n("br"),n("span",{staticClass:"line-number"},[a._v("3")]),n("br"),n("span",{staticClass:"line-number"},[a._v("4")]),n("br"),n("span",{staticClass:"line-number"},[a._v("5")]),n("br")])]),n("p",[a._v("主要是增加了 "),n("code",[a._v("org.hibernate:hibernate-validator")]),a._v(" 依赖")]),a._v(" "),n("h3",{attrs:{id:"定义验证工具类"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#定义验证工具类"}},[a._v("#")]),a._v(" 定义验证工具类")]),a._v(" "),n("p",[a._v("已为大家封装好了工具类，享用即可。创建一个名为 "),n("code",[a._v("BeanValidator")]),a._v(" 的工具类，代码如下：")]),a._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[a._v('    package com.cmcc.my.shop.commons.validator;\n    \n    import org.springframework.beans.factory.annotation.Autowired;\n    \n    import javax.validation.ConstraintViolation;\n    import javax.validation.ConstraintViolationException;\n    import javax.validation.Validator;\n    import java.util.ArrayList;\n    import java.util.HashMap;\n    import java.util.List;\n    import java.util.Map;\n    import java.util.Set;\n    \n    /**\n     * JSR303 Validator(Hibernate Validator)工具类.\n     * <p>\n     * ConstraintViolation 中包含 propertyPath, message 和 invalidValue 等信息.\n     * 提供了各种 convert 方法，适合不同的 i18n 需求:\n     * 1. List<String>, String 内容为 message\n     * 2. List<String>, String 内容为 propertyPath + separator + message\n     * 3. Map<propertyPath, message>\n     * <p>\n     * 详情见wiki: https://github.com/springside/springside4/wiki/HibernateValidator\n     *\n     * <p>Title: BeanValidator</p>\n     * <p>Description: </p>\n     *\n     * @author cmcc\n     * @version 1.0.0\n     * @date 2018/6/26 17:21\n     */\n    public class BeanValidator {\n    \n        @Autowired\n        private static Validator validator;\n    \n        public static void setValidator(Validator validator) {\n            BeanValidator.validator = validator;\n        }\n    \n        /**\n         * 调用 JSR303 的 validate 方法, 验证失败时抛出 ConstraintViolationException.\n         */\n        private static void validateWithException(Validator validator, Object object, Class<?>... groups) throws ConstraintViolationException {\n            Set constraintViolations = validator.validate(object, groups);\n            if (!constraintViolations.isEmpty()) {\n                throw new ConstraintViolationException(constraintViolations);\n            }\n        }\n    \n        /**\n         * 辅助方法, 转换 ConstraintViolationException 中的 Set<ConstraintViolations> 中为 List<message>.\n         */\n        private static List<String> extractMessage(ConstraintViolationException e) {\n            return extractMessage(e.getConstraintViolations());\n        }\n    \n        /**\n         * 辅助方法, 转换 Set<ConstraintViolation> 为 List<message>\n         */\n        private static List<String> extractMessage(Set<? extends ConstraintViolation> constraintViolations) {\n            List<String> errorMessages = new ArrayList<>();\n            for (ConstraintViolation violation : constraintViolations) {\n                errorMessages.add(violation.getMessage());\n            }\n            return errorMessages;\n        }\n    \n        /**\n         * 辅助方法, 转换 ConstraintViolationException 中的 Set<ConstraintViolations> 为 Map<property, message>.\n         */\n        private static Map<String, String> extractPropertyAndMessage(ConstraintViolationException e) {\n            return extractPropertyAndMessage(e.getConstraintViolations());\n        }\n    \n        /**\n         * 辅助方法, 转换 Set<ConstraintViolation> 为 Map<property, message>.\n         */\n        private static Map<String, String> extractPropertyAndMessage(Set<? extends ConstraintViolation> constraintViolations) {\n            Map<String, String> errorMessages = new HashMap<>();\n            for (ConstraintViolation violation : constraintViolations) {\n                errorMessages.put(violation.getPropertyPath().toString(), violation.getMessage());\n            }\n            return errorMessages;\n        }\n    \n        /**\n         * 辅助方法, 转换 ConstraintViolationException 中的 Set<ConstraintViolations> 为 List<propertyPath message>.\n         */\n        private static List<String> extractPropertyAndMessageAsList(ConstraintViolationException e) {\n            return extractPropertyAndMessageAsList(e.getConstraintViolations(), " ");\n        }\n    \n        /**\n         * 辅助方法, 转换 Set<ConstraintViolations> 为 List<propertyPath message>.\n         */\n        private static List<String> extractPropertyAndMessageAsList(Set<? extends ConstraintViolation> constraintViolations) {\n            return extractPropertyAndMessageAsList(constraintViolations, " ");\n        }\n    \n        /**\n         * 辅助方法, 转换 ConstraintViolationException 中的 Set<ConstraintViolations> 为 List<propertyPath + separator + message>.\n         */\n        private static List<String> extractPropertyAndMessageAsList(ConstraintViolationException e, String separator) {\n            return extractPropertyAndMessageAsList(e.getConstraintViolations(), separator);\n        }\n    \n        /**\n         * 辅助方法, 转换 Set<ConstraintViolation> 为 List<propertyPath + separator + message>.\n         */\n        private static List<String> extractPropertyAndMessageAsList(Set<? extends ConstraintViolation> constraintViolations, String separator) {\n            List<String> errorMessages = new ArrayList<>();\n            for (ConstraintViolation violation : constraintViolations) {\n                errorMessages.add(violation.getPropertyPath() + separator + violation.getMessage());\n            }\n            return errorMessages;\n        }\n    \n        /**\n         * 服务端参数有效性验证\n         *\n         * @param object 验证的实体对象\n         * @param groups 验证组\n         * @return 验证成功：返回 null；验证失败：返回错误信息\n         */\n        public static String validator(Object object, Class<?>... groups) {\n            try {\n                validateWithException(validator, object, groups);\n            } catch (ConstraintViolationException ex) {\n                List<String> list = extractMessage(ex);\n                list.add(0, "数据验证失败：");\n    \n                // 封装错误消息为字符串\n                StringBuilder sb = new StringBuilder();\n                for (int i = 0; i < list.size(); i++) {\n                    String exMsg = list.get(i);\n                    if (i != 0 ){\n                        sb.append(String.format("%s. %s", i, exMsg)).append(list.size() > 1 ? "<br/>" : "");\n                    } else {\n                        sb.append(exMsg).append(list.size() > 1 ? "<br/>" : "");\n                    }\n                }\n    \n                return sb.toString();\n            }\n    \n            return null;\n        }\n    }\n')])]),a._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[a._v("1")]),n("br"),n("span",{staticClass:"line-number"},[a._v("2")]),n("br"),n("span",{staticClass:"line-number"},[a._v("3")]),n("br"),n("span",{staticClass:"line-number"},[a._v("4")]),n("br"),n("span",{staticClass:"line-number"},[a._v("5")]),n("br"),n("span",{staticClass:"line-number"},[a._v("6")]),n("br"),n("span",{staticClass:"line-number"},[a._v("7")]),n("br"),n("span",{staticClass:"line-number"},[a._v("8")]),n("br"),n("span",{staticClass:"line-number"},[a._v("9")]),n("br"),n("span",{staticClass:"line-number"},[a._v("10")]),n("br"),n("span",{staticClass:"line-number"},[a._v("11")]),n("br"),n("span",{staticClass:"line-number"},[a._v("12")]),n("br"),n("span",{staticClass:"line-number"},[a._v("13")]),n("br"),n("span",{staticClass:"line-number"},[a._v("14")]),n("br"),n("span",{staticClass:"line-number"},[a._v("15")]),n("br"),n("span",{staticClass:"line-number"},[a._v("16")]),n("br"),n("span",{staticClass:"line-number"},[a._v("17")]),n("br"),n("span",{staticClass:"line-number"},[a._v("18")]),n("br"),n("span",{staticClass:"line-number"},[a._v("19")]),n("br"),n("span",{staticClass:"line-number"},[a._v("20")]),n("br"),n("span",{staticClass:"line-number"},[a._v("21")]),n("br"),n("span",{staticClass:"line-number"},[a._v("22")]),n("br"),n("span",{staticClass:"line-number"},[a._v("23")]),n("br"),n("span",{staticClass:"line-number"},[a._v("24")]),n("br"),n("span",{staticClass:"line-number"},[a._v("25")]),n("br"),n("span",{staticClass:"line-number"},[a._v("26")]),n("br"),n("span",{staticClass:"line-number"},[a._v("27")]),n("br"),n("span",{staticClass:"line-number"},[a._v("28")]),n("br"),n("span",{staticClass:"line-number"},[a._v("29")]),n("br"),n("span",{staticClass:"line-number"},[a._v("30")]),n("br"),n("span",{staticClass:"line-number"},[a._v("31")]),n("br"),n("span",{staticClass:"line-number"},[a._v("32")]),n("br"),n("span",{staticClass:"line-number"},[a._v("33")]),n("br"),n("span",{staticClass:"line-number"},[a._v("34")]),n("br"),n("span",{staticClass:"line-number"},[a._v("35")]),n("br"),n("span",{staticClass:"line-number"},[a._v("36")]),n("br"),n("span",{staticClass:"line-number"},[a._v("37")]),n("br"),n("span",{staticClass:"line-number"},[a._v("38")]),n("br"),n("span",{staticClass:"line-number"},[a._v("39")]),n("br"),n("span",{staticClass:"line-number"},[a._v("40")]),n("br"),n("span",{staticClass:"line-number"},[a._v("41")]),n("br"),n("span",{staticClass:"line-number"},[a._v("42")]),n("br"),n("span",{staticClass:"line-number"},[a._v("43")]),n("br"),n("span",{staticClass:"line-number"},[a._v("44")]),n("br"),n("span",{staticClass:"line-number"},[a._v("45")]),n("br"),n("span",{staticClass:"line-number"},[a._v("46")]),n("br"),n("span",{staticClass:"line-number"},[a._v("47")]),n("br"),n("span",{staticClass:"line-number"},[a._v("48")]),n("br"),n("span",{staticClass:"line-number"},[a._v("49")]),n("br"),n("span",{staticClass:"line-number"},[a._v("50")]),n("br"),n("span",{staticClass:"line-number"},[a._v("51")]),n("br"),n("span",{staticClass:"line-number"},[a._v("52")]),n("br"),n("span",{staticClass:"line-number"},[a._v("53")]),n("br"),n("span",{staticClass:"line-number"},[a._v("54")]),n("br"),n("span",{staticClass:"line-number"},[a._v("55")]),n("br"),n("span",{staticClass:"line-number"},[a._v("56")]),n("br"),n("span",{staticClass:"line-number"},[a._v("57")]),n("br"),n("span",{staticClass:"line-number"},[a._v("58")]),n("br"),n("span",{staticClass:"line-number"},[a._v("59")]),n("br"),n("span",{staticClass:"line-number"},[a._v("60")]),n("br"),n("span",{staticClass:"line-number"},[a._v("61")]),n("br"),n("span",{staticClass:"line-number"},[a._v("62")]),n("br"),n("span",{staticClass:"line-number"},[a._v("63")]),n("br"),n("span",{staticClass:"line-number"},[a._v("64")]),n("br"),n("span",{staticClass:"line-number"},[a._v("65")]),n("br"),n("span",{staticClass:"line-number"},[a._v("66")]),n("br"),n("span",{staticClass:"line-number"},[a._v("67")]),n("br"),n("span",{staticClass:"line-number"},[a._v("68")]),n("br"),n("span",{staticClass:"line-number"},[a._v("69")]),n("br"),n("span",{staticClass:"line-number"},[a._v("70")]),n("br"),n("span",{staticClass:"line-number"},[a._v("71")]),n("br"),n("span",{staticClass:"line-number"},[a._v("72")]),n("br"),n("span",{staticClass:"line-number"},[a._v("73")]),n("br"),n("span",{staticClass:"line-number"},[a._v("74")]),n("br"),n("span",{staticClass:"line-number"},[a._v("75")]),n("br"),n("span",{staticClass:"line-number"},[a._v("76")]),n("br"),n("span",{staticClass:"line-number"},[a._v("77")]),n("br"),n("span",{staticClass:"line-number"},[a._v("78")]),n("br"),n("span",{staticClass:"line-number"},[a._v("79")]),n("br"),n("span",{staticClass:"line-number"},[a._v("80")]),n("br"),n("span",{staticClass:"line-number"},[a._v("81")]),n("br"),n("span",{staticClass:"line-number"},[a._v("82")]),n("br"),n("span",{staticClass:"line-number"},[a._v("83")]),n("br"),n("span",{staticClass:"line-number"},[a._v("84")]),n("br"),n("span",{staticClass:"line-number"},[a._v("85")]),n("br"),n("span",{staticClass:"line-number"},[a._v("86")]),n("br"),n("span",{staticClass:"line-number"},[a._v("87")]),n("br"),n("span",{staticClass:"line-number"},[a._v("88")]),n("br"),n("span",{staticClass:"line-number"},[a._v("89")]),n("br"),n("span",{staticClass:"line-number"},[a._v("90")]),n("br"),n("span",{staticClass:"line-number"},[a._v("91")]),n("br"),n("span",{staticClass:"line-number"},[a._v("92")]),n("br"),n("span",{staticClass:"line-number"},[a._v("93")]),n("br"),n("span",{staticClass:"line-number"},[a._v("94")]),n("br"),n("span",{staticClass:"line-number"},[a._v("95")]),n("br"),n("span",{staticClass:"line-number"},[a._v("96")]),n("br"),n("span",{staticClass:"line-number"},[a._v("97")]),n("br"),n("span",{staticClass:"line-number"},[a._v("98")]),n("br"),n("span",{staticClass:"line-number"},[a._v("99")]),n("br"),n("span",{staticClass:"line-number"},[a._v("100")]),n("br"),n("span",{staticClass:"line-number"},[a._v("101")]),n("br"),n("span",{staticClass:"line-number"},[a._v("102")]),n("br"),n("span",{staticClass:"line-number"},[a._v("103")]),n("br"),n("span",{staticClass:"line-number"},[a._v("104")]),n("br"),n("span",{staticClass:"line-number"},[a._v("105")]),n("br"),n("span",{staticClass:"line-number"},[a._v("106")]),n("br"),n("span",{staticClass:"line-number"},[a._v("107")]),n("br"),n("span",{staticClass:"line-number"},[a._v("108")]),n("br"),n("span",{staticClass:"line-number"},[a._v("109")]),n("br"),n("span",{staticClass:"line-number"},[a._v("110")]),n("br"),n("span",{staticClass:"line-number"},[a._v("111")]),n("br"),n("span",{staticClass:"line-number"},[a._v("112")]),n("br"),n("span",{staticClass:"line-number"},[a._v("113")]),n("br"),n("span",{staticClass:"line-number"},[a._v("114")]),n("br"),n("span",{staticClass:"line-number"},[a._v("115")]),n("br"),n("span",{staticClass:"line-number"},[a._v("116")]),n("br"),n("span",{staticClass:"line-number"},[a._v("117")]),n("br"),n("span",{staticClass:"line-number"},[a._v("118")]),n("br"),n("span",{staticClass:"line-number"},[a._v("119")]),n("br"),n("span",{staticClass:"line-number"},[a._v("120")]),n("br"),n("span",{staticClass:"line-number"},[a._v("121")]),n("br"),n("span",{staticClass:"line-number"},[a._v("122")]),n("br"),n("span",{staticClass:"line-number"},[a._v("123")]),n("br"),n("span",{staticClass:"line-number"},[a._v("124")]),n("br"),n("span",{staticClass:"line-number"},[a._v("125")]),n("br"),n("span",{staticClass:"line-number"},[a._v("126")]),n("br"),n("span",{staticClass:"line-number"},[a._v("127")]),n("br"),n("span",{staticClass:"line-number"},[a._v("128")]),n("br"),n("span",{staticClass:"line-number"},[a._v("129")]),n("br"),n("span",{staticClass:"line-number"},[a._v("130")]),n("br"),n("span",{staticClass:"line-number"},[a._v("131")]),n("br"),n("span",{staticClass:"line-number"},[a._v("132")]),n("br"),n("span",{staticClass:"line-number"},[a._v("133")]),n("br"),n("span",{staticClass:"line-number"},[a._v("134")]),n("br"),n("span",{staticClass:"line-number"},[a._v("135")]),n("br"),n("span",{staticClass:"line-number"},[a._v("136")]),n("br"),n("span",{staticClass:"line-number"},[a._v("137")]),n("br"),n("span",{staticClass:"line-number"},[a._v("138")]),n("br"),n("span",{staticClass:"line-number"},[a._v("139")]),n("br"),n("span",{staticClass:"line-number"},[a._v("140")]),n("br"),n("span",{staticClass:"line-number"},[a._v("141")]),n("br"),n("span",{staticClass:"line-number"},[a._v("142")]),n("br"),n("span",{staticClass:"line-number"},[a._v("143")]),n("br"),n("span",{staticClass:"line-number"},[a._v("144")]),n("br"),n("span",{staticClass:"line-number"},[a._v("145")]),n("br"),n("span",{staticClass:"line-number"},[a._v("146")]),n("br"),n("span",{staticClass:"line-number"},[a._v("147")]),n("br"),n("span",{staticClass:"line-number"},[a._v("148")]),n("br"),n("span",{staticClass:"line-number"},[a._v("149")]),n("br")])]),n("h3",{attrs:{id:"修改实体类"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#修改实体类"}},[a._v("#")]),a._v(" 修改实体类")]),a._v(" "),n("p",[a._v("修改实体类，增加验证注解，以后我们只需要在实体类的属性上使用 JSR-303 注解即可完成相关数据的验证工作，关键代码如下：")]),a._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[a._v('    @Length(min = 6, max = 20, message = "用户名长度必须介于 6 和 20 之间")\n    private String username;\n    @Length(min = 6, max = 20, message = "密码长度必须介于 6 和 20 之间")\n    private String password;\n    @Pattern(regexp = RegexpUtils.PHONE, message = "手机号格式不正确")\n    private String phone;\n    @Pattern(regexp = RegexpUtils.EMAIL, message = "邮箱格式不正确")\n    private String email;\n')])]),a._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[a._v("1")]),n("br"),n("span",{staticClass:"line-number"},[a._v("2")]),n("br"),n("span",{staticClass:"line-number"},[a._v("3")]),n("br"),n("span",{staticClass:"line-number"},[a._v("4")]),n("br"),n("span",{staticClass:"line-number"},[a._v("5")]),n("br"),n("span",{staticClass:"line-number"},[a._v("6")]),n("br"),n("span",{staticClass:"line-number"},[a._v("7")]),n("br"),n("span",{staticClass:"line-number"},[a._v("8")]),n("br")])]),n("h3",{attrs:{id:"注入工具类"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#注入工具类"}},[a._v("#")]),a._v(" 注入工具类")]),a._v(" "),n("p",[a._v("修改 "),n("code",[a._v("spring-context.xml")]),a._v(" 文件，注入 "),n("code",[a._v("Validator")]),a._v(" 工具类，配置如下：")]),a._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[a._v('    \x3c!-- 配置 Bean Validator 定义 --\x3e\n    <bean id="validator" class="org.springframework.validation.beanvalidation.LocalValidatorFactoryBean"/>\n    <bean id="beanValidator" class="com.cmcc.my.shop.commons.validator.BeanValidator">\n        <property name="validator" ref="validator" />\n    </bean>\n')])]),a._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[a._v("1")]),n("br"),n("span",{staticClass:"line-number"},[a._v("2")]),n("br"),n("span",{staticClass:"line-number"},[a._v("3")]),n("br"),n("span",{staticClass:"line-number"},[a._v("4")]),n("br"),n("span",{staticClass:"line-number"},[a._v("5")]),n("br")])]),n("h3",{attrs:{id:"效果演示"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#效果演示"}},[a._v("#")]),a._v(" 效果演示")]),a._v(" "),n("p",[a._v("配置完成后，在浏览器端测试直接提交数据，效果如下：")]),a._v(" "),n("p",[n("img",{attrs:{src:"/img/1530018411.png",alt:""}})])])}),[],!1,null,null,null);s.default=e.exports}}]);