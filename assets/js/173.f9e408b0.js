(window.webpackJsonp=window.webpackJsonp||[]).push([[173],{870:function(a,s,t){"use strict";t.r(s);var n=t(5),e=Object(n.a)({},(function(){var a=this,s=a.$createElement,t=a._self._c||s;return t("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[t("h1",{attrs:{id:"springcloud-stream-消息驱动"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#springcloud-stream-消息驱动"}},[a._v("#")]),a._v(" SpringCloud Stream 消息驱动")]),a._v(" "),t("h2",{attrs:{id:"为什么引入消息驱动"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#为什么引入消息驱动"}},[a._v("#")]),a._v(" 为什么引入消息驱动？")]),a._v(" "),t("p",[a._v("首先看到消息驱动，我们会想到，消息中间件")]),a._v(" "),t("ul",[t("li",[a._v("ActiveMQ")]),a._v(" "),t("li",[a._v("RabbitMQ")]),a._v(" "),t("li",[a._v("RocketMQ")]),a._v(" "),t("li",[a._v("Kafka")])]),a._v(" "),t("p",[t("img",{attrs:{src:"/images/image-20200414090346586.png",alt:"image-20200414090346586"}})]),a._v(" "),t("p",[a._v("存在的问题就是，中台和后台 可能存在两种MQ，那么他们之间的实现都是不一样的，这样会导致多种问题出现，而且上述我们也看到了，目前主流的MQ有四种，我们不可能每个都去学习")]),a._v(" "),t("p",[a._v("这个时候的痛点就是：有没有一种新的技术诞生，让我们不在关注具体MQ的细节，我们只需要用一种适配绑定的方式，自动的给我们在各种MQ内切换。")]),a._v(" "),t("p",[a._v("这个时候，SpringCloudStream就运营而生，解决的痛点就是屏蔽了消息中间件的底层的细节差异，我们操作Stream就可以操作各种消息中间件了，从而降低开发人员的开发成本。")]),a._v(" "),t("h2",{attrs:{id:"消息驱动概述"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#消息驱动概述"}},[a._v("#")]),a._v(" 消息驱动概述")]),a._v(" "),t("h3",{attrs:{id:"是什么"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#是什么"}},[a._v("#")]),a._v(" 是什么")]),a._v(" "),t("p",[a._v("屏蔽底层消息中间件的差异，降低切换成本，统一消息的编程模型")]),a._v(" "),t("p",[a._v("这就有点像Hibernate，它同时支持多种数据库，同时还提供了Hibernate Session的语法，也就是HQL语句，这样屏蔽了SQL具体实现细节，我们只需要操作HQL语句，就能够操作不同的数据库。")]),a._v(" "),t("h3",{attrs:{id:"什么是springcloudstream"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#什么是springcloudstream"}},[a._v("#")]),a._v(" 什么是SpringCloudStream")]),a._v(" "),t("p",[a._v("官方定义 SpringCloudStream是一个构件消息驱动微服务的框架")]),a._v(" "),t("p",[a._v("应用程序通过inputs或者outputs来与SpringCloudStream中binder对象（绑定器）交互。")]),a._v(" "),t("p",[a._v("通过我们配置来binding(绑定)，而SpringCloudStream的binder对象负责与消息中间件交互")]),a._v(" "),t("p",[a._v("所以，我们只需要搞清楚如何与SpringCloudStream交互，就可以方便的使用消息驱动的方式。")]),a._v(" "),t("p",[a._v("通过使用SpringIntegration来连接消息代理中间件以实现消息事件驱动。")]),a._v(" "),t("p",[a._v("SpringCloudStream为一些供应商的消息中间件产品提供了个性化的自动化配置实现，引用了发布-订阅，消费组，分区的三个核心概念")]),a._v(" "),t("p",[a._v("目前仅支持RabbitMQ 和 Kafka")]),a._v(" "),t("h3",{attrs:{id:"springcloudstrem设计思想"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#springcloudstrem设计思想"}},[a._v("#")]),a._v(" SpringCloudStrem设计思想")]),a._v(" "),t("h4",{attrs:{id:"标准mq"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#标准mq"}},[a._v("#")]),a._v(" 标准MQ")]),a._v(" "),t("p",[t("img",{attrs:{src:"/images/image-20200414091850411.png",alt:"image-20200414091850411"}})]),a._v(" "),t("ul",[t("li",[a._v("生产者/消费者之间靠消息媒介传递消息内容：Message")]),a._v(" "),t("li",[a._v("消息必须走特定的通道：Channel")]),a._v(" "),t("li",[a._v("消息通道里的消息如何被消费呢，谁负责收发处理\n"),t("ul",[t("li",[a._v("消息通道MessageChannel的子接口SubscribableChannel，由MessageHandler消息处理器所订阅")])])])]),a._v(" "),t("h4",{attrs:{id:"为什么用springcloudstream"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#为什么用springcloudstream"}},[a._v("#")]),a._v(" 为什么用SpringCloudStream")]),a._v(" "),t("p",[a._v("RabbitMQ和Kafka，由于这两个消息中间件的架构上不同")]),a._v(" "),t("p",[a._v("像RabbitMQ有exchange，kafka有Tpic和Partitions分区")]),a._v(" "),t("p",[t("img",{attrs:{src:"/images/image-20200414092237268.png",alt:"image-20200414092237268"}})]),a._v(" "),t("p",[a._v("这些中间件的差异导致我们实际项目开发给我们造成了一定的困扰，我们如果用了两个消息队列的其中一种，后面的业务需求，我们想往另外一种消息队列进行迁移，这时候无疑就是灾难性的，一大堆东西都要推到重新做，因为它根我们的系统耦合了，这时候SpringCloudStream给我们提供了一种解耦的方式")]),a._v(" "),t("p",[a._v("这个时候，我们就需要一个绑定器，可以想成是翻译官，用于实现两种消息之间的转换")]),a._v(" "),t("h4",{attrs:{id:"springcloudstream为什么能屏蔽底层差异"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#springcloudstream为什么能屏蔽底层差异"}},[a._v("#")]),a._v(" SpringCloudStream为什么能屏蔽底层差异")]),a._v(" "),t("p",[a._v("在没有绑定器这个概念的情况下，我们的SpringBoot应用要直接与消息中间件进行消息交互的时候，由于各消息中间件构建的初衷不同，它们的实现细节上会有较大的差异性。通过定义绑定器作为中间件，完美的实现了应用程序与消息中间件细节之间的隔离。")]),a._v(" "),t("p",[a._v("通过向应用程序暴露统一的Channel通道，使得应用程序不需要在考虑各种不同消息中间件的实现。")]),a._v(" "),t("p",[a._v("通过定义绑定器Binder作为中间层，实现了应用程序与消息中间件细节之间的隔离。")]),a._v(" "),t("h4",{attrs:{id:"binder"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#binder"}},[a._v("#")]),a._v(" Binder")]),a._v(" "),t("ul",[t("li",[a._v("input：对应消费者")]),a._v(" "),t("li",[a._v("output：对应生产者")])]),a._v(" "),t("p",[a._v("Stream对消息中间件的进一步封装，可以做到代码层面对中间件的无感知，甚至于动态的切换中间件（RabbitMQ切换Kafka），使得微服务开发的高度解耦，服务可以关注更多的自己的业务流程。")]),a._v(" "),t("p",[t("img",{attrs:{src:"/images/image-20200414093128482.png",alt:"image-20200414093128482"}})]),a._v(" "),t("p",[a._v("通过定义绑定器Binder作为中间层，实现了应用程序与消息中间件细节之间的隔离。")]),a._v(" "),t("p",[a._v("Stream中的消息通信方式遵循了发布-订阅模式，Topic主题进行广播，在RabbitMQ中就是Exchange，在Kafka中就是Topic")]),a._v(" "),t("h4",{attrs:{id:"stream标准流程套路"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#stream标准流程套路"}},[a._v("#")]),a._v(" Stream标准流程套路")]),a._v(" "),t("p",[a._v("我们的消息生产者和消费者只和Stream交互")]),a._v(" "),t("p",[t("img",{attrs:{src:"/images/image-20200414093537489.png",alt:"image-20200414093537489"}})]),a._v(" "),t("ul",[t("li",[a._v("Binder：很方便的连接中间件，屏蔽差异")]),a._v(" "),t("li",[a._v("Channel：通道，是队列Queue的一种抽象，在消息通讯系统中就是实现存储和转发的没接，通过Channel对队列进行配置")]),a._v(" "),t("li",[a._v("Source和Sink：简单的可以理解为参照对象是SpringCloudStream自身，从Stream发布消息就是输出，接受消息就是输入。")])]),a._v(" "),t("h4",{attrs:{id:"编码中的注解"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#编码中的注解"}},[a._v("#")]),a._v(" 编码中的注解")]),a._v(" "),t("p",[t("img",{attrs:{src:"/images/image-20200414093854499.png",alt:"image-20200414093854499"}})]),a._v(" "),t("h2",{attrs:{id:"案例说明"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#案例说明"}},[a._v("#")]),a._v(" 案例说明")]),a._v(" "),t("p",[a._v("前提是已经安装好了RabbitMQ")]),a._v(" "),t("ul",[t("li",[a._v("cloud-stream-rabbitmq-procider8801，作为消息生产者进行发消息模块")]),a._v(" "),t("li",[a._v("cloud-stream-rabbitmq-procider8802，消息接收模块")]),a._v(" "),t("li",[a._v("cloud-stream-rabbitmq-procider8803，消息接收模块")])]),a._v(" "),t("h2",{attrs:{id:"消息驱动之生产者"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#消息驱动之生产者"}},[a._v("#")]),a._v(" 消息驱动之生产者")]),a._v(" "),t("h3",{attrs:{id:"引入依赖"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#引入依赖"}},[a._v("#")]),a._v(" 引入依赖")]),a._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("\x3c!--Stream--\x3e\n<dependency>\n    <groupId>org.springframework.cloud</groupId>\n    <artifactId>spring-cloud-starter-stream-rabbit</artifactId>\n</dependency>\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br"),t("span",{staticClass:"line-number"},[a._v("3")]),t("br"),t("span",{staticClass:"line-number"},[a._v("4")]),t("br"),t("span",{staticClass:"line-number"},[a._v("5")]),t("br")])]),t("h3",{attrs:{id:"修改yml"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#修改yml"}},[a._v("#")]),a._v(" 修改yml")]),a._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("spring:\n  application:\n    name: cloud-stream-provider\n  cloud:\n    stream:\n      binders: # 在此处配置要绑定的rabbitMQ的服务信息\n        defaultRabbit: # 表示定义的名称，用于binding的整合\n          type: rabbit # 消息中间件类型\n          environment: # 设置rabbitMQ的相关环境配置\n            spring:\n              rabbitmq:\n                host: localhost\n                port: 5672\n                username: guest\n                password: guest\n      bindings: # 服务的整合处理\n        output: # 这个名字是一个通道的名称\n          destination: studyExchange # 表示要使用的exchange名称定义\n          content-type: application/json # 设置消息类型，本次为json，文本则设为text/plain\n          binder: defaultRabbit # 设置要绑定的消息服务的具体设置\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br"),t("span",{staticClass:"line-number"},[a._v("3")]),t("br"),t("span",{staticClass:"line-number"},[a._v("4")]),t("br"),t("span",{staticClass:"line-number"},[a._v("5")]),t("br"),t("span",{staticClass:"line-number"},[a._v("6")]),t("br"),t("span",{staticClass:"line-number"},[a._v("7")]),t("br"),t("span",{staticClass:"line-number"},[a._v("8")]),t("br"),t("span",{staticClass:"line-number"},[a._v("9")]),t("br"),t("span",{staticClass:"line-number"},[a._v("10")]),t("br"),t("span",{staticClass:"line-number"},[a._v("11")]),t("br"),t("span",{staticClass:"line-number"},[a._v("12")]),t("br"),t("span",{staticClass:"line-number"},[a._v("13")]),t("br"),t("span",{staticClass:"line-number"},[a._v("14")]),t("br"),t("span",{staticClass:"line-number"},[a._v("15")]),t("br"),t("span",{staticClass:"line-number"},[a._v("16")]),t("br"),t("span",{staticClass:"line-number"},[a._v("17")]),t("br"),t("span",{staticClass:"line-number"},[a._v("18")]),t("br"),t("span",{staticClass:"line-number"},[a._v("19")]),t("br"),t("span",{staticClass:"line-number"},[a._v("20")]),t("br")])]),t("h3",{attrs:{id:"业务类"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#业务类"}},[a._v("#")]),a._v(" 业务类")]),a._v(" "),t("h4",{attrs:{id:"发送消息的接口"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#发送消息的接口"}},[a._v("#")]),a._v(" 发送消息的接口")]),a._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("public interface IMassageProvider {\n    // 定义一个发送方法\n    public String send();\n}\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br"),t("span",{staticClass:"line-number"},[a._v("3")]),t("br"),t("span",{staticClass:"line-number"},[a._v("4")]),t("br")])]),t("h4",{attrs:{id:"发送消息的接口实现类"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#发送消息的接口实现类"}},[a._v("#")]),a._v(" 发送消息的接口实现类")]),a._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v('// @EnableBinding： 指信道channel 和 exchange绑定在一起\n@EnableBinding(Source.class) //定义消息的推送管道\npublic class MessageProviderImpl implements IMassageProvider {\n\n    @Resource\n    private MessageChannel output; //消息发送管道（原来这里是操作dao，现在是操作消息中间件发送消息）\n\n    @Override\n    public String send() {\n        String serial= UUID.randomUUID().toString();\n        // 消息构建器构建一个消息 MessageBuilder\n        output.send(MessageBuilder.withPayload(serial).build());\n        System.out.println("***********serial"+serial);\n        return null;\n    }\n}\n')])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br"),t("span",{staticClass:"line-number"},[a._v("3")]),t("br"),t("span",{staticClass:"line-number"},[a._v("4")]),t("br"),t("span",{staticClass:"line-number"},[a._v("5")]),t("br"),t("span",{staticClass:"line-number"},[a._v("6")]),t("br"),t("span",{staticClass:"line-number"},[a._v("7")]),t("br"),t("span",{staticClass:"line-number"},[a._v("8")]),t("br"),t("span",{staticClass:"line-number"},[a._v("9")]),t("br"),t("span",{staticClass:"line-number"},[a._v("10")]),t("br"),t("span",{staticClass:"line-number"},[a._v("11")]),t("br"),t("span",{staticClass:"line-number"},[a._v("12")]),t("br"),t("span",{staticClass:"line-number"},[a._v("13")]),t("br"),t("span",{staticClass:"line-number"},[a._v("14")]),t("br"),t("span",{staticClass:"line-number"},[a._v("15")]),t("br"),t("span",{staticClass:"line-number"},[a._v("16")]),t("br")])]),t("h4",{attrs:{id:"controller"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#controller"}},[a._v("#")]),a._v(" Controller")]),a._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v('@RestController\npublic class SendMessageController {\n    @Resource\n    private IMassageProvider massageProvider;\n\n    @GetMapping("/sendMessage")\n    public String sendMessage(){\n        return massageProvider.send();\n    }\n}\n')])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br"),t("span",{staticClass:"line-number"},[a._v("3")]),t("br"),t("span",{staticClass:"line-number"},[a._v("4")]),t("br"),t("span",{staticClass:"line-number"},[a._v("5")]),t("br"),t("span",{staticClass:"line-number"},[a._v("6")]),t("br"),t("span",{staticClass:"line-number"},[a._v("7")]),t("br"),t("span",{staticClass:"line-number"},[a._v("8")]),t("br"),t("span",{staticClass:"line-number"},[a._v("9")]),t("br"),t("span",{staticClass:"line-number"},[a._v("10")]),t("br")])]),t("p",[a._v("定义一个REST接口，调用的时候，发送一个消息")]),a._v(" "),t("h4",{attrs:{id:"测试"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#测试"}},[a._v("#")]),a._v(" 测试")]),a._v(" "),t("p",[a._v("我们进入RabbitAdmin页面  "),t("code",[a._v("http://localhost:15672")])]),a._v(" "),t("p",[t("img",{attrs:{src:"/images/image-20200414095920920.png",alt:"image-20200414095920920"}})]),a._v(" "),t("p",[a._v("会发现它已经成功创建了一个studyExchange的交换机，这个就是我们上面配置的")]),a._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("      bindings: # 服务的整合处理\n        output: # 这个名字是一个通道的名称\n          destination: studyExchange # 表示要使用的exchange名称定义\n          content-type: application/json # 设置消息类型，本次为json，文本则设为text/plain\n          binder: defaultRabbit # 设置要绑定的消息服务的具体设置\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br"),t("span",{staticClass:"line-number"},[a._v("3")]),t("br"),t("span",{staticClass:"line-number"},[a._v("4")]),t("br"),t("span",{staticClass:"line-number"},[a._v("5")]),t("br")])]),t("p",[a._v("以后就会通过这个交换机进行消息的消费")]),a._v(" "),t("p",[a._v("我们运行下列代码，进行测试消息发送 "),t("code",[a._v("http://localhost:8801/sendMessage")])]),a._v(" "),t("p",[a._v("能够发现消息已经成功被RabbitMQ捕获，这个时候就完成了消息的发送")]),a._v(" "),t("p",[t("img",{attrs:{src:"/images/image-20200414100125220.png",alt:"image-20200414100125220"}})]),a._v(" "),t("h2",{attrs:{id:"消息驱动之消费者"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#消息驱动之消费者"}},[a._v("#")]),a._v(" 消息驱动之消费者")]),a._v(" "),t("h3",{attrs:{id:"引入依赖-2"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#引入依赖-2"}},[a._v("#")]),a._v(" 引入依赖")]),a._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("\x3c!--Stream--\x3e\n<dependency>\n    <groupId>org.springframework.cloud</groupId>\n    <artifactId>spring-cloud-starter-stream-rabbit</artifactId>\n</dependency>\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br"),t("span",{staticClass:"line-number"},[a._v("3")]),t("br"),t("span",{staticClass:"line-number"},[a._v("4")]),t("br"),t("span",{staticClass:"line-number"},[a._v("5")]),t("br")])]),t("h3",{attrs:{id:"修改yml-2"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#修改yml-2"}},[a._v("#")]),a._v(" 修改yml")]),a._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("spring:\n  application:\n    name: cloud-stream-consumer\n  cloud:\n    stream:\n      binders: # 在此处配置要绑定的rabbitMQ的服务信息\n        defaultRabbit: # 表示定义的名称，用于binding的整合\n          type: rabbit # 消息中间件类型\n          environment: # 设置rabbitMQ的相关环境配置\n            spring:\n              rabbitmq:\n                host: localhost\n                port: 5672\n                username: guest\n                password: guest\n      bindings: # 服务的整合处理\n        input: # 这个名字是一个通道的名称\n          destination: studyExchange # 表示要使用的exchange名称定义\n          content-type: application/json # 设置消息类型，本次为json，文本则设为text/plain\n          binder: defaultRabbit # 设置要绑定的消息服务的具体设置\n          group: atguiguA\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br"),t("span",{staticClass:"line-number"},[a._v("3")]),t("br"),t("span",{staticClass:"line-number"},[a._v("4")]),t("br"),t("span",{staticClass:"line-number"},[a._v("5")]),t("br"),t("span",{staticClass:"line-number"},[a._v("6")]),t("br"),t("span",{staticClass:"line-number"},[a._v("7")]),t("br"),t("span",{staticClass:"line-number"},[a._v("8")]),t("br"),t("span",{staticClass:"line-number"},[a._v("9")]),t("br"),t("span",{staticClass:"line-number"},[a._v("10")]),t("br"),t("span",{staticClass:"line-number"},[a._v("11")]),t("br"),t("span",{staticClass:"line-number"},[a._v("12")]),t("br"),t("span",{staticClass:"line-number"},[a._v("13")]),t("br"),t("span",{staticClass:"line-number"},[a._v("14")]),t("br"),t("span",{staticClass:"line-number"},[a._v("15")]),t("br"),t("span",{staticClass:"line-number"},[a._v("16")]),t("br"),t("span",{staticClass:"line-number"},[a._v("17")]),t("br"),t("span",{staticClass:"line-number"},[a._v("18")]),t("br"),t("span",{staticClass:"line-number"},[a._v("19")]),t("br"),t("span",{staticClass:"line-number"},[a._v("20")]),t("br"),t("span",{staticClass:"line-number"},[a._v("21")]),t("br")])]),t("h3",{attrs:{id:"业务类-2"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#业务类-2"}},[a._v("#")]),a._v(" 业务类")]),a._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v('@Component\n@EnableBinding(Sink.class)  // 绑定通道\npublic class ReceiveMessageListenerController {\n\n    @Value("${server.port}")\n    private String serverPort;\n\n    // 监听队列，用于消费者队列的消息接收\n    @StreamListener(Sink.INPUT)\n    public void input(Message<String> message) {\n        System.out.println("消费者1号，0------\x3e接收到消息："+message.getPayload()+"\\t port:"+serverPort);\n    }\n}\n')])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br"),t("span",{staticClass:"line-number"},[a._v("3")]),t("br"),t("span",{staticClass:"line-number"},[a._v("4")]),t("br"),t("span",{staticClass:"line-number"},[a._v("5")]),t("br"),t("span",{staticClass:"line-number"},[a._v("6")]),t("br"),t("span",{staticClass:"line-number"},[a._v("7")]),t("br"),t("span",{staticClass:"line-number"},[a._v("8")]),t("br"),t("span",{staticClass:"line-number"},[a._v("9")]),t("br"),t("span",{staticClass:"line-number"},[a._v("10")]),t("br"),t("span",{staticClass:"line-number"},[a._v("11")]),t("br"),t("span",{staticClass:"line-number"},[a._v("12")]),t("br"),t("span",{staticClass:"line-number"},[a._v("13")]),t("br")])]),t("h2",{attrs:{id:"分组消费"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#分组消费"}},[a._v("#")]),a._v(" 分组消费")]),a._v(" "),t("p",[a._v("我们在创建一个8803的消费者服务，需要启动的服务")]),a._v(" "),t("ul",[t("li",[a._v("RabbitMQ：消息中间件")]),a._v(" "),t("li",[a._v("7001：服务注册")]),a._v(" "),t("li",[a._v("8801：消息生产")]),a._v(" "),t("li",[a._v("8802：消息消费")]),a._v(" "),t("li",[a._v("8803：消息消费")])]),a._v(" "),t("h3",{attrs:{id:"运行后有两个问题"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#运行后有两个问题"}},[a._v("#")]),a._v(" 运行后有两个问题")]),a._v(" "),t("ul",[t("li",[a._v("有重复消费问题")]),a._v(" "),t("li",[a._v("消息持久化问题")])]),a._v(" "),t("h3",{attrs:{id:"消费"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#消费"}},[a._v("#")]),a._v(" 消费")]),a._v(" "),t("p",[a._v("目前8802 、8803同时都收到了，存在重复消费的问题")]),a._v(" "),t("p",[a._v("如何解决：使用分组和持久化属性 group来解决")]),a._v(" "),t("p",[a._v("比如在如下场景中，订单系统我们做集群部署，都会从RabbitMQ中获取订单信息，那如果一个订单同时被两个服务获取到，那么就会造成数据错误，我们得避免这种情况，这时我们就可以使用Stream中的消息分组来解决。")]),a._v(" "),t("p",[t("img",{attrs:{src:"/images/image-20200414123004267.png",alt:"image-20200414123004267"}})]),a._v(" "),t("p",[a._v("注意：在Stream中处于同一个group中的多个消费者是竞争关系，就能够保证消息只能被其中一个消费一次")]),a._v(" "),t("p",[a._v("不同组是可以全面消费的（重复消费）")]),a._v(" "),t("p",[a._v("同一组会发生竞争关系，只能其中一个可以消费")]),a._v(" "),t("p",[a._v("分布式微服务应用为了实现高可用和负载均衡，实际上都会部署多个实例，这里部署了8802 8803")]),a._v(" "),t("p",[a._v("多数情况下，生产者发送消息给某个具体微服务时，只希望被消费一次，按照上面我们启动两个应用的例子，虽然它们同属一个应用，但是这个消息出现了被重复消费两次的情况，为了解决这个情况，在SpringCloudStream中，就提供了 消费组 的概念")]),a._v(" "),t("p",[t("img",{attrs:{src:"/images/image-20200414130034279.png",alt:"image-20200414130034279"}})]),a._v(" "),t("h3",{attrs:{id:"分组"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#分组"}},[a._v("#")]),a._v(" 分组")]),a._v(" "),t("h4",{attrs:{id:"原理"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#原理"}},[a._v("#")]),a._v(" 原理")]),a._v(" "),t("p",[a._v("微服务应用放置于同一个group中，就能够保证消息只会被其中一个应用消费一次，不同的组是可以消费的，同一组内会发生竞争关系，只有其中一个可以被消费。")]),a._v(" "),t("p",[a._v("我们将8802和8803划分为同一组")]),a._v(" "),t("div",{staticClass:"language-yml line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-yml"}},[t("code",[t("span",{pre:!0,attrs:{class:"token key atrule"}},[a._v("spring")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v("\n  "),t("span",{pre:!0,attrs:{class:"token key atrule"}},[a._v("application")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token key atrule"}},[a._v("name")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v(" cloud"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("-")]),a._v("stream"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("-")]),a._v("consumer\n  "),t("span",{pre:!0,attrs:{class:"token key atrule"}},[a._v("cloud")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token key atrule"}},[a._v("stream")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v("\n      "),t("span",{pre:!0,attrs:{class:"token key atrule"}},[a._v("binders")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 在此处配置要绑定的rabbitMQ的服务信息")]),a._v("\n        "),t("span",{pre:!0,attrs:{class:"token key atrule"}},[a._v("defaultRabbit")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 表示定义的名称，用于binding的整合")]),a._v("\n          "),t("span",{pre:!0,attrs:{class:"token key atrule"}},[a._v("type")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v(" rabbit "),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 消息中间件类型")]),a._v("\n          "),t("span",{pre:!0,attrs:{class:"token key atrule"}},[a._v("environment")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 设置rabbitMQ的相关环境配置")]),a._v("\n            "),t("span",{pre:!0,attrs:{class:"token key atrule"}},[a._v("spring")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v("\n              "),t("span",{pre:!0,attrs:{class:"token key atrule"}},[a._v("rabbitmq")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v("\n                "),t("span",{pre:!0,attrs:{class:"token key atrule"}},[a._v("host")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v(" localhost\n                "),t("span",{pre:!0,attrs:{class:"token key atrule"}},[a._v("port")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("5672")]),a._v("\n                "),t("span",{pre:!0,attrs:{class:"token key atrule"}},[a._v("username")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v(" guest\n                "),t("span",{pre:!0,attrs:{class:"token key atrule"}},[a._v("password")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v(" guest\n      "),t("span",{pre:!0,attrs:{class:"token key atrule"}},[a._v("bindings")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 服务的整合处理")]),a._v("\n        "),t("span",{pre:!0,attrs:{class:"token key atrule"}},[a._v("input")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 这个名字是一个通道的名称")]),a._v("\n          "),t("span",{pre:!0,attrs:{class:"token key atrule"}},[a._v("destination")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v(" studyExchange "),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 表示要使用的exchange名称定义")]),a._v("\n          "),t("span",{pre:!0,attrs:{class:"token key atrule"}},[a._v("content-type")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v(" application/json "),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 设置消息类型，本次为json，文本则设为text/plain")]),a._v("\n          "),t("span",{pre:!0,attrs:{class:"token key atrule"}},[a._v("binder")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v(" defaultRabbit "),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 设置要绑定的消息服务的具体设置")]),a._v("\n          "),t("span",{pre:!0,attrs:{class:"token key atrule"}},[a._v("group")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v(" atguiguA\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br"),t("span",{staticClass:"line-number"},[a._v("3")]),t("br"),t("span",{staticClass:"line-number"},[a._v("4")]),t("br"),t("span",{staticClass:"line-number"},[a._v("5")]),t("br"),t("span",{staticClass:"line-number"},[a._v("6")]),t("br"),t("span",{staticClass:"line-number"},[a._v("7")]),t("br"),t("span",{staticClass:"line-number"},[a._v("8")]),t("br"),t("span",{staticClass:"line-number"},[a._v("9")]),t("br"),t("span",{staticClass:"line-number"},[a._v("10")]),t("br"),t("span",{staticClass:"line-number"},[a._v("11")]),t("br"),t("span",{staticClass:"line-number"},[a._v("12")]),t("br"),t("span",{staticClass:"line-number"},[a._v("13")]),t("br"),t("span",{staticClass:"line-number"},[a._v("14")]),t("br"),t("span",{staticClass:"line-number"},[a._v("15")]),t("br"),t("span",{staticClass:"line-number"},[a._v("16")]),t("br"),t("span",{staticClass:"line-number"},[a._v("17")]),t("br"),t("span",{staticClass:"line-number"},[a._v("18")]),t("br"),t("span",{staticClass:"line-number"},[a._v("19")]),t("br"),t("span",{staticClass:"line-number"},[a._v("20")]),t("br"),t("span",{staticClass:"line-number"},[a._v("21")]),t("br")])]),t("p",[a._v("引入："),t("code",[a._v("group: atguiguA")])]),a._v(" "),t("p",[a._v("然后我们执行消息发送的接口："),t("code",[a._v("http://localhost:8801/sendMessage")])]),a._v(" "),t("p",[a._v("我们在8801服务，同时发送了6条消息")]),a._v(" "),t("p",[t("img",{attrs:{src:"/images/image-20200414125203160.png",alt:"image-20200414125203160"}})]),a._v(" "),t("p",[a._v("然后看8802服务，接收到了3条")]),a._v(" "),t("p",[t("img",{attrs:{src:"/images/image-20200414125231537.png",alt:"image-20200414125231537"}})]),a._v(" "),t("p",[a._v("8803服务，也接收到了3条")]),a._v(" "),t("p",[t("img",{attrs:{src:"/images/image-20200414125243408.png",alt:"image-20200414125243408"}})]),a._v(" "),t("p",[a._v("这个时候，就通过分组，避免了消息的重复消费问题")]),a._v(" "),t("p",[a._v("8802、8803通过实现轮询分组，每次只有一个消费者，最后发送的消息只能够被一个接受")]),a._v(" "),t("p",[a._v("如果将他们的group变成两个不同的组，那么消息就会被重复消费")]),a._v(" "),t("h2",{attrs:{id:"消息持久化"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#消息持久化"}},[a._v("#")]),a._v(" 消息持久化")]),a._v(" "),t("p",[a._v("通过上面的方式，我们解决了重复消费的问题，再看看持久化")]),a._v(" "),t("h3",{attrs:{id:"案例"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#案例"}},[a._v("#")]),a._v(" 案例")]),a._v(" "),t("ul",[t("li",[a._v("停止8802和8803，并移除8802的group，保留8803的group")]),a._v(" "),t("li",[a._v("8801先发送4条消息到RabbitMQ")]),a._v(" "),t("li",[a._v("先启动8802，无分组属性，后台没有打出来消息")]),a._v(" "),t("li",[a._v("在启动8803，有分组属性，后台打出来MQ上的消息")])]),a._v(" "),t("p",[a._v("这就说明消息已经被持久化了，等消费者登录后，会自动从消息队列中获取消息进行消费")]),a._v(" "),t("p",[t("img",{attrs:{src:"/images/image-20200414131334047.png",alt:"image-20200414131334047"}})])])}),[],!1,null,null,null);s.default=e.exports}}]);