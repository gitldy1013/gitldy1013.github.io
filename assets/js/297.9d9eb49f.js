(window.webpackJsonp=window.webpackJsonp||[]).push([[297],{994:function(s,a,e){"use strict";e.r(a);var t=e(5),n=Object(t.a)({},(function(){var s=this,a=s.$createElement,e=s._self._c||a;return e("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[e("h2",{attrs:{id:"collection线程不安全的举例"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#collection线程不安全的举例"}},[s._v("#")]),s._v(" Collection线程不安全的举例")]),s._v(" "),e("h2",{attrs:{id:"前言"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#前言"}},[s._v("#")]),s._v(" 前言")]),s._v(" "),e("p",[s._v("1、当我们执行下面语句的时候，底层进行了什么操作")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("new ArrayList<Integer>();\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br")])]),e("p",[s._v("底层创建了一个空的数组，伴随着初始值为10")]),s._v(" "),e("p",[s._v("当执行add方法后，如果超过了10，那么会进行扩容，扩容的大小为原值的一半，也就是5个，使用下列方法扩容")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("Arrays.copyOf(elementData, netCapacity)\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br")])]),e("h2",{attrs:{id:"单线程环境下"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#单线程环境下"}},[s._v("#")]),s._v(" 单线程环境下")]),s._v(" "),e("p",[s._v("单线程环境的ArrayList是不会有问题的")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v('public class ArrayListNotSafeDemo {\n    public static void main(String[] args) {\n\n        List<String> list = new ArrayList<>();\n        list.add("a");\n        list.add("b");\n        list.add("c");\n\n        for(String element : list) {\n            System.out.println(element);\n        }\n    }\n}\n')])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br")])]),e("h2",{attrs:{id:"多线程环境"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#多线程环境"}},[s._v("#")]),s._v(" 多线程环境")]),s._v(" "),e("p",[s._v("为什么ArrayList是线程不安全的？因为在进行写操作的时候，方法上为了保证并发性，是没有添加synchronized修饰，所以并发写的时候，就会出现问题")]),s._v(" "),e("p",[e("img",{attrs:{src:"/images/image-20200312202720715.png",alt:"image-20200312202720715"}})]),s._v(" "),e("p",[s._v("当我们同时启动30个线程去操作List的时候")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("/**\n * 集合类线程不安全举例\n * @author: 陌溪\n * @create: 2020-03-12-20:15\n */\npublic class ArrayListNotSafeDemo {\n    public static void main(String[] args) {\n\n        List<String> list = new ArrayList<>();\n\n        for (int i = 0; i < 30; i++) {\n            new Thread(() -> {\n                list.add(UUID.randomUUID().toString().substring(0, 8));\n                System.out.println(list);\n            }, String.valueOf(i)).start();\n        }\n    }\n}\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br"),e("span",{staticClass:"line-number"},[s._v("16")]),e("br"),e("span",{staticClass:"line-number"},[s._v("17")]),e("br"),e("span",{staticClass:"line-number"},[s._v("18")]),e("br")])]),e("p",[s._v("这个时候出现了错误，也就是java.util.ConcurrentModificationException")]),s._v(" "),e("p",[e("img",{attrs:{src:"/images/image-20200312205142763.png",alt:"image-20200312205142763"}})]),s._v(" "),e("p",[s._v("这个异常是 并发修改的异常")]),s._v(" "),e("h2",{attrs:{id:"解决方案"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#解决方案"}},[s._v("#")]),s._v(" 解决方案")]),s._v(" "),e("h3",{attrs:{id:"方案一-vector"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#方案一-vector"}},[s._v("#")]),s._v(" 方案一：Vector")]),s._v(" "),e("p",[s._v("第一种方法，就是不用ArrayList这种不安全的List实现类，而采用Vector，线程安全的")]),s._v(" "),e("p",[s._v("关于Vector如何实现线程安全的，而是在方法上加了锁，即synchronized")]),s._v(" "),e("p",[e("img",{attrs:{src:"/images/image-20200312210401865.png",alt:"image-20200312210401865"}})]),s._v(" "),e("p",[s._v("这样就每次只能够一个线程进行操作，所以不会出现线程不安全的问题，但是因为加锁了，导致并发性基于下降")]),s._v(" "),e("h3",{attrs:{id:"方案二-collections-synchronized"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#方案二-collections-synchronized"}},[s._v("#")]),s._v(" 方案二：Collections.synchronized()")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("List<String> list = Collections.synchronizedList(new ArrayList<>());\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br")])]),e("p",[s._v("采用Collections集合工具类，在ArrayList外面包装一层 同步 机制")]),s._v(" "),e("h3",{attrs:{id:"方案三-采用juc里面的方法"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#方案三-采用juc里面的方法"}},[s._v("#")]),s._v(" 方案三：采用JUC里面的方法")]),s._v(" "),e("p",[s._v("CopyOnWriteArrayList：写时复制，主要是一种读写分离的思想")]),s._v(" "),e("p",[s._v("写时复制，CopyOnWrite容器即写时复制的容器，往一个容器中添加元素的时候，不直接往当前容器Object[]添加，而是先将Object[]进行copy，复制出一个新的容器object[] newElements，然后新的容器Object[] newElements里添加原始，添加元素完后，在将原容器的引用指向新的容器 setArray(newElements)；这样做的好处是可以对copyOnWrite容器进行并发的度，而不需要加锁，因为当前容器不需要添加任何元素。所以CopyOnWrite容器也是一种读写分离的思想，读和写不同的容器")]),s._v(" "),e("p",[s._v("就是写的时候，把ArrayList扩容一个出来，然后把值填写上去，在通知其他的线程，ArrayList的引用指向扩容后的")]),s._v(" "),e("p",[s._v("查看底层add方法源码")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("    public boolean add(E e) {\n        final ReentrantLock lock = this.lock;\n        lock.lock();\n        try {\n            Object[] elements = getArray();\n            int len = elements.length;\n            Object[] newElements = Arrays.copyOf(elements, len + 1);\n            newElements[len] = e;\n            setArray(newElements);\n            return true;\n        } finally {\n            lock.unlock();\n        }\n    }\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br")])]),e("p",[s._v("首先需要加锁")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("final ReentrantLock lock = this.lock;\nlock.lock();\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br")])]),e("p",[s._v("然后在末尾扩容一个单位")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("Object[] elements = getArray();\nint len = elements.length;\nObject[] newElements = Arrays.copyOf(elements, len + 1);\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br")])]),e("p",[s._v("然后在把扩容后的空间，填写上需要add的内容")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("newElements[len] = e;\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br")])]),e("p",[s._v("最后把内容set到Array中")]),s._v(" "),e("h2",{attrs:{id:"hashset线程不安全"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#hashset线程不安全"}},[s._v("#")]),s._v(" HashSet线程不安全")]),s._v(" "),e("h3",{attrs:{id:"copyonwritearrayset"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#copyonwritearrayset"}},[s._v("#")]),s._v(" CopyOnWriteArraySet")]),s._v(" "),e("p",[s._v("底层还是使用CopyOnWriteArrayList进行实例化")]),s._v(" "),e("p",[e("img",{attrs:{src:"/images/image-20200312221602095.png",alt:"image-20200312221602095"}})]),s._v(" "),e("h3",{attrs:{id:"hashset底层结构"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#hashset底层结构"}},[s._v("#")]),s._v(" HashSet底层结构")]),s._v(" "),e("p",[s._v("同理HashSet的底层结构就是HashMap")]),s._v(" "),e("p",[e("img",{attrs:{src:"/images/image-20200312221735178.png",alt:"image-20200312221735178"}})]),s._v(" "),e("p",[s._v("但是为什么我调用 HashSet.add()的方法，只需要传递一个元素，而HashMap是需要传递key-value键值对？")]),s._v(" "),e("p",[s._v("首先我们查看hashSet的add方法")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("    public boolean add(E e) {\n        return map.put(e, PRESENT)==null;\n    }\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br")])]),e("p",[s._v("我们能发现但我们调用add的时候，存储一个值进入map中，只是作为key进行存储，而value存储的是一个Object类型的常量，也就是说HashSet只关心key，而不关心value")]),s._v(" "),e("h2",{attrs:{id:"hashmap线程不安全"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#hashmap线程不安全"}},[s._v("#")]),s._v(" HashMap线程不安全")]),s._v(" "),e("p",[s._v("同理HashMap在多线程环境下，也是不安全的")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("    public static void main(String[] args) {\n\n        Map<String, String> map = new HashMap<>();\n\n        for (int i = 0; i < 30; i++) {\n            new Thread(() -> {\n                map.put(Thread.currentThread().getName(), UUID.randomUUID().toString().substring(0, 8));\n                System.out.println(map);\n            }, String.valueOf(i)).start();\n        }\n    }\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br")])]),e("h3",{attrs:{id:"解决方法"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#解决方法"}},[s._v("#")]),s._v(" 解决方法")]),s._v(" "),e("p",[s._v("1、使用Collections.synchronizedMap(new HashMap<>());")]),s._v(" "),e("p",[s._v("2、使用 ConcurrentHashMap")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("Map<String, String> map = new ConcurrentHashMap<>();\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br")])])])}),[],!1,null,null,null);a.default=n.exports}}]);