(window.webpackJsonp=window.webpackJsonp||[]).push([[311],{1014:function(s,n,a){"use strict";a.r(n);var e=a(5),t=Object(e.a)({},(function(){var s=this,n=s.$createElement,a=s._self._c||n;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("h1",{attrs:{id:"lambda表达式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#lambda表达式"}},[s._v("#")]),s._v(" Lambda表达式")]),s._v(" "),a("h2",{attrs:{id:"为什么要用lambda表达式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#为什么要用lambda表达式"}},[s._v("#")]),s._v(" 为什么要用Lambda表达式")]),s._v(" "),a("p",[s._v("Lambda是一个匿名函数，我们可以把Lambda表达式理解为是一段可以传递的代码，将代码像数据一样传递，这样可以写出更简洁、更灵活的代码，作为一个更紧凑的代码风格，使Java语言表达能力得到了提升")]),s._v(" "),a("h2",{attrs:{id:"实例代码"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#实例代码"}},[s._v("#")]),s._v(" 实例代码")]),s._v(" "),a("p",[s._v("Lambda表达式最先替代的就是匿名内部类，假设原来我们写一个Comparator比较函数，采用匿名内部类的方式")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("    /**\n     * 原来使用匿名内部类\n     */\n    public static void test() {\n        // 使用匿名内部类，重写Intger的 compare方法\n        Comparator<Integer> comparator = new Comparator<Integer>() {\n            @Override\n            public int compare(Integer o1, Integer o2) {\n                return Integer.compare(o1, o2);\n            }\n        };\n\n        // 传入比较的方法\n        TreeSet<Integer> ts = new TreeSet<>(comparator);\n    }\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br")])]),a("p",[s._v("然后在采用Lambda表达式后")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("    /**\n     * 使用Lambda表达式解决匿名内部类需要编写大量模板语言的问题\n     */\n    public static void test2() {\n        Comparator<Integer> comparator = (x, y) -> Integer.compare(x, y);\n\n        // 传入比较的方法\n        TreeSet<Integer> ts = new TreeSet<>(comparator);\n    }\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br")])]),a("h2",{attrs:{id:"策略设计模式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#策略设计模式"}},[s._v("#")]),s._v(" 策略设计模式")]),s._v(" "),a("p",[s._v("假设我们现在有一个需求，就是查找出员工里面年龄超过35的，我们使用策略设计模式")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("/**\n * 员工类\n *\n * @author: 陌溪\n * @create: 2020-04-05-12:13\n */\npublic class Employee {\n    private String name;\n    private int age;\n    private double salary;\n    \n    // set get\n}\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br")])]),a("p",[s._v("然后创建一个接口，这里就是判定条件")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("/**\n * 接口\n * @param <T>\n */\npublic interface MyPredicte<T> {\n    public boolean test(T t);\n}\n\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br")])]),a("p",[s._v("我们实现这个接口")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("/**\n * 按年龄过滤\n *\n * @author: 陌溪\n * @create: 2020-04-05-12:23\n */\npublic class FilterEmployeeByAge implements MyPredicte<Employee> {\n\n    @Override\n    public boolean test(Employee employee) {\n        return employee.getAge() > 35;\n    }\n}\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br")])]),a("p",[s._v("然后在具体的例子中使用")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('    /**\n     * 获取当前公司员工年龄大于35\n     */\n    public static void test3() {\n        List<Employee> employees = Arrays.asList(\n                new Employee("张三", 18, 3333),\n                new Employee("李四", 38, 55555),\n                new Employee("王五", 50, 6666.66),\n                new Employee("赵六", 16, 77777.77),\n                new Employee("田七", 8, 8888.88)\n        );\n\n        MyPredicte<Employee> mp = new FilterEmployeeByAge();\n        List<Employee> emps = new ArrayList<>();\n        for (Employee emp : emps) {\n            if(mp.test(emp)) {\n                emps.add(emp);\n            }\n        }\n    }\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br")])]),a("p",[s._v("当某一天需求变更了，变成需要查找金额大于60000的，那么只需要在编写一个实现类即可")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("/**\n * 按薪资过滤\n *\n * @author: 陌溪\n * @create: 2020-04-05-12:23\n */\npublic class FilterEmployeeBySalary implements MyPredicte<Employee> {\n\n    @Override\n    public boolean test(Employee employee) {\n        return employee.getSalary() > 60000;\n    }\n}\n\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br")])]),a("p",[s._v("那么具体使用只需要更改为")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('    /**\n     * 获取当前公司薪资大于60000\n     */\n    public static void test3() {\n        List<Employee> employees = Arrays.asList(\n                new Employee("张三", 18, 3333),\n                new Employee("李四", 38, 55555),\n                new Employee("王五", 50, 6666.66),\n                new Employee("赵六", 16, 77777.77),\n                new Employee("田七", 8, 8888.88)\n        );\n\n        MyPredicte<Employee> mp = new FilterEmployeeBySalary();\n        List<Employee> emps = new ArrayList<>();\n        for (Employee emp : emps) {\n            if(mp.test(emp)) {\n                emps.add(emp);\n            }\n        }\n    }\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br")])]),a("p",[s._v("这样一个方法，被称为策略设计模式")]),s._v(" "),a("h2",{attrs:{id:"匿名内部类"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#匿名内部类"}},[s._v("#")]),s._v(" 匿名内部类")]),s._v(" "),a("p",[s._v("使用上面的策略设计模式，我们会发现一个问题，就是每当我需要增加一个条件的时候，就需要增加一个实现类，如果条件多了的话，那么就会有很多实现类，那么为了优化，我们可以采取匿名内部类的方式")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('    /**\n     * 优化方式，采用匿名内部类的方式\n     */\n    public static void test5() {\n        List<Employee> employees = Arrays.asList(\n                new Employee("张三", 18, 3333),\n                new Employee("李四", 38, 55555),\n                new Employee("王五", 50, 6666.66),\n                new Employee("赵六", 16, 77777.77),\n                new Employee("田七", 8, 8888.88)\n        );\n\n        // 匿名内部类\n        filterEmployee(employees, new MyPredicte<Employee>() {\n            @Override\n            public boolean test(Employee employee) {\n                return employee.getSalary() <= 5000;\n            }\n        });\n    }\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br")])]),a("p",[s._v("直接在内部类中，使用我们的过滤条件")]),s._v(" "),a("h2",{attrs:{id:"lambda表达式-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#lambda表达式-2"}},[s._v("#")]),s._v(" Lambda表达式")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('    /**\n     * 使用Lambda表达式优化\n     */\n    public static void test6() {\n        List<Employee> employees = Arrays.asList(\n                new Employee("张三", 18, 3333),\n                new Employee("李四", 38, 55555),\n                new Employee("王五", 50, 6666.66),\n                new Employee("赵六", 16, 77777.77),\n                new Employee("田七", 8, 8888.88)\n        );\n\n        List<Employee> list = filterEmployee(employees, (e) -> e.getSalary() <= 5000);\n        list.forEach(System.out::println);\n    }\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br")])]),a("p",[s._v("或者")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('    /**\n     * 不使用策略模式\n     */\n    public static void test7() {\n        List<Employee> employees = Arrays.asList(\n                new Employee("张三", 18, 3333),\n                new Employee("李四", 38, 55555),\n                new Employee("王五", 50, 6666.66),\n                new Employee("赵六", 16, 77777.77),\n                new Employee("田七", 8, 8888.88)\n        );\n        employees.stream().filter(e-> e.getSalary() >= 5000).limit(2).forEach(System.out::println);\n        \n        System.out.println("=========");\n        employees.stream().map(Employee::getName).forEach(System.out::println);\n    }\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br")])]),a("h2",{attrs:{id:"学习lambda"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#学习lambda"}},[s._v("#")]),s._v(" 学习Lambda")]),s._v(" "),a("p",[s._v("Lambda表达式基础语法：Java8中引入了一个新的操作符 “->” 该操作符称为箭头操作符 或 Lambda操作符")]),s._v(" "),a("p",[s._v("箭头操作符将Lambda表达式拆分为两部分：")]),s._v(" "),a("ul",[a("li",[s._v("左侧：Lambda表达式的参数列表（可以想象成，是上面定义的接口中抽象方法参数的列表）")]),s._v(" "),a("li",[s._v("右侧：Lambda表达式中，所需要执行的功能，即Lambda体（需要对抽象方法实现的功能）")])]),s._v(" "),a("h3",{attrs:{id:"语法格式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#语法格式"}},[s._v("#")]),s._v(" 语法格式")]),s._v(" "),a("h4",{attrs:{id:"_1、无参-无返回值"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1、无参-无返回值"}},[s._v("#")]),s._v(" 1、无参，无返回值")]),s._v(" "),a("p",[s._v("格式：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("() -> System.out.println(“hello”);\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("举例：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('    public static void test() {\n        Runnable r = new Runnable() {\n            @Override\n            public void run() {\n                System.out.println("hello");\n            }\n        };\n\n        System.out.println("=========");\n\n        Runnable runnable = () -> {\n            System.out.println("hello lambda");\n        };\n    }\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br")])]),a("p",[s._v("JDK1.8以后，调用Lambda外的值，不需要增加final字段，它默认已经添加了final")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('int n = 10;\nRunnable runnable = () -> {\n\tSystem.out.println("hello lambda" + n);\n};\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br")])]),a("h4",{attrs:{id:"_2、有一个参数-有返回值"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2、有一个参数-有返回值"}},[s._v("#")]),s._v(" 2、有一个参数，有返回值")]),s._v(" "),a("p",[s._v("格式：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("(x) -> System.out.println(x);\n或  (一个参数时，小括号可以省略不写)\nx -> System.out.println(x);\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("p",[s._v("实例：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('public static void test2() {\n    Consumer<String> consumer = (x) -> System.out.println(x);\n    consumer.accept("我在bilibili");\n}\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br")])]),a("h4",{attrs:{id:"_3、有多个参数-一个返回值"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3、有多个参数-一个返回值"}},[s._v("#")]),s._v(" 3、有多个参数，一个返回值")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('    /**\n     * 多个参数，有返回值\n     */\n    public static void test3() {\n        Comparator<Integer> comparator = (x, y) -> {\n            System.out.println("函数式接口");\n            return Integer.compare(x, y);\n        };\n    }\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br")])]),a("h4",{attrs:{id:"_4、有多个参数-只有一条语句"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4、有多个参数-只有一条语句"}},[s._v("#")]),s._v(" 4、有多个参数，只有一条语句")]),s._v(" "),a("p",[s._v("这个时候，可以省略大括号 和 return")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("\n    /**\n     * 多个参数，函数体只有一条，并且有返回值时\n     */\n    public static void test4() {\n        Comparator<Integer> comparator = (x, y) -> Integer.compare(x, y);\n    }\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br")])]),a("h3",{attrs:{id:"类型推断"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#类型推断"}},[s._v("#")]),s._v(" 类型推断")]),s._v(" "),a("p",[s._v("Lambda中，表达式的参数列表的数据类型可以省略不写，因为JVM编译器通过上下文推断出，数据类型，即“类型推断”。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("(Integer x, Integer y) -> Integer.compare(x, y);\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("但是底层的类型检查还是有的，只是JDK底层帮我们做了类型检查这件事")]),s._v(" "),a("h2",{attrs:{id:"函数式接口"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#函数式接口"}},[s._v("#")]),s._v(" 函数式接口")]),s._v(" "),a("p",[s._v("Lambda表达式需要“函数式接口”的支持")]),s._v(" "),a("p",[s._v("函数式接口：接口中只有一个抽象方法的接口，称为函数式接口，如：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("/**\n * 函数式接口 \n */\npublic interface MyPredicte<T> {\n    public boolean test(T t);\n}\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br")])]),a("p",[s._v("可以使用注解 "),a("code",[s._v("@FunctionalInterface")]),s._v(" 修饰的，则为函数式接口")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("/**\n * 接口，用于解决重复条件\n * @param <T>\n */\n@FunctionalInterface\npublic interface MyPredicte<T> {\n    public boolean test(T t);\n}\n\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br")])]),a("h2",{attrs:{id:"场景"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#场景"}},[s._v("#")]),s._v(" 场景")]),s._v(" "),a("p",[s._v("对一个数进行某种运算")]),s._v(" "),a("p",[s._v("首先创建一个函数式接口")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("@FunctionalInterface\npublic interface MyFun {\n    public Integer getValue(Integer value);\n}\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br")])]),a("p",[s._v("然后在定义一个方法，把方法作为参数传递")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("    /**\n     * 需求：对一个数进行运算\n     */\n    public static void test5() {\n        Integer value = operation(100, (x) -> x*x);\n        System.out.println(value);\n    }\n\n    public static Integer operation(Integer num, MyFun myFun) {\n        return myFun.getValue(num);\n    }\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br")])]),a("h2",{attrs:{id:"训练"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#训练"}},[s._v("#")]),s._v(" 训练")]),s._v(" "),a("ul",[a("li",[s._v("调用Collections.sort()方法，通过定制排序比较两个Employee（先比较年龄比，年龄相同比较姓名），使用Lambda表达式")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('    public static void test() {\n        List<Employee> employees = Arrays.asList(\n                new Employee("张三", 18, 3333),\n                new Employee("李四", 38, 55555),\n                new Employee("王五", 50, 6666.66),\n                new Employee("赵六", 16, 77777.77),\n                new Employee("田七", 8, 8888.88)\n        );\n        Collections.sort(employees, (e1, e2) -> {\n            if(e1.getAge() == e2.getAge()) {\n                return e1.getName().compareTo(e2.getName());\n            } else {\n                return Integer.compare(e1.getAge(), e2.getAge());\n            }\n        });\n\n        employees.stream().map(Employee::getName).forEach(System.out::println);\n    }\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br")])]),a("h2",{attrs:{id:"java内置函数接口"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#java内置函数接口"}},[s._v("#")]),s._v(" Java内置函数接口")]),s._v(" "),a("h2",{attrs:{id:"comsumer-消费型接口"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#comsumer-消费型接口"}},[s._v("#")]),s._v(" Comsumer 消费型接口")]),s._v(" "),a("p",[s._v("格式："),a("code",[s._v("Comsumer<T>")])]),s._v(" "),a("p",[s._v("传入参数，然后对参数进行操作，没有返回值")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('    /**\n     * 消费型接口\n     */\n    public static void test() {\n        happy(1000, (m) -> System.out.println("消费成功：" + m + "元"));\n    }\n    public static void happy(double money, Consumer<Double> consumer) {\n        consumer.accept(money);\n    }\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br")])]),a("h2",{attrs:{id:"supplier-供给型接口"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#supplier-供给型接口"}},[s._v("#")]),s._v(" Supplier 供给型接口")]),s._v(" "),a("p",[s._v("格式："),a("code",[s._v("Supplier<T>")])]),s._v(" "),a("p",[s._v("T get();")]),s._v(" "),a("p",[s._v("传入参数，对参数进行操作，然后有返回值")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("    /**\n     * 供给型接口，供给功能如何实现\n     */\n    public static void test2() {\n        List<Integer> list = getNumList(10, () -> {\n          Integer a =   (int)(Math.random() * 10);\n          return a;\n        });\n\n        list.stream().forEach(System.out::println);\n    }\n\n    /**\n     * 产生指定个数的整数\n     * @param n\n     * @return\n     */\n    public static List<Integer> getNumList(Integer n, Supplier<Integer> supplier) {\n        List<Integer> list = new ArrayList<>();\n        for (int i = 0; i < n; i++) {\n            list.add(supplier.get());\n        }\n        return list;\n    }\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br")])]),a("p",[s._v("最后输出结果")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("0\n5\n9\n4\n4\n3\n4\n5\n0\n3\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br")])]),a("h2",{attrs:{id:"function-函数型接口"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#function-函数型接口"}},[s._v("#")]),s._v(" Function 函数型接口")]),s._v(" "),a("p",[s._v("格式："),a("code",[s._v("Function<T,R>")])]),s._v(" "),a("p",[a("code",[s._v("R apply(T t);")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('    /**\n     * 函数型接口\n     * Function<T, R>\n     */\n    public static void test3() {\n        String str = strHandler("abcdefg", (x) -> {\n            return x.toUpperCase().substring(0, 5);\n        });\n        System.out.println(str);\n    }\n\n    /**\n     * 需求：用于处理字符串\n     */\n    public static String strHandler(String str, Function<String, String> function) {\n        // 使用apply方法进行处理，怎么处理需要具体实现\n        return function.apply(str);\n    }\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br")])]),a("p",[s._v("输出结果：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("ABCDE\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("h2",{attrs:{id:"predicate-断言型接口"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#predicate-断言型接口"}},[s._v("#")]),s._v(" Predicate 断言型接口")]),s._v(" "),a("p",[s._v("格式："),a("code",[s._v("Predicate<T>")]),s._v("， 用于做一些判断")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('    /**\n     * 断言型接口(把长度大于3的str过滤出来)\n     */\n    public static void test4() {\n        List<String> list = Arrays.asList("abc", "abcd", "df", "cgg", "aaab");\n        List<String> result = strPredict(list, (x) -> x.length() > 3);\n        result.forEach(item -> {\n            System.out.println(item);\n        });\n    }\n\n    /**\n     * 将满足条件的字符串，放入到集合中\n     */\n    public static List<String> strPredict(List<String> list, Predicate<String> predicate) {\n        List<String> result = new ArrayList<>();\n        list.forEach(item -> {\n            if(predicate.test(item)) {\n                result.add(item);\n            }\n        });\n        return result;\n    }\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br")])]),a("h2",{attrs:{id:"扩展"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#扩展"}},[s._v("#")]),s._v(" 扩展")]),s._v(" "),a("p",[s._v("上述的四大核心接口，并不能被适用于一个特殊的应用场景，只能满足大部分的需求")]),s._v(" "),a("p",[s._v("因为他们对于参数的参入有局限性")]),s._v(" "),a("p",[a("img",{attrs:{src:"/images/image-20200406093105110.png",alt:"image-20200406093105110"}})]),s._v(" "),a("p",[s._v("同时后面针对这样的情况，后面也使用子接口，进行了解决")]),s._v(" "),a("p",[a("img",{attrs:{src:"/images/image-20200406093204147.png",alt:"image-20200406093204147"}})])])}),[],!1,null,null,null);n.default=t.exports}}]);