(window.webpackJsonp=window.webpackJsonp||[]).push([[81],{777:function(t,a,s){"use strict";s.r(a);var e=s(5),n=Object(e.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"gin框架中让tmpl模板文件有语法提示"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#gin框架中让tmpl模板文件有语法提示"}},[t._v("#")]),t._v(" Gin框架中让tmpl模板文件有语法提示")]),t._v(" "),s("h2",{attrs:{id:"前言"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#前言"}},[t._v("#")]),t._v(" 前言")]),t._v(" "),s("p",[t._v("在Gin中，我们要使用 "),s("code",[t._v(".tmpl")]),t._v(" 结尾的模板文件，但是我们在new的时候，发现没有对应的文件，所以它就会被当成普通的文件来进行解析，因此也没有提示，这对我们使用goland来开发，是非常痛苦的事情")]),t._v(" "),s("h2",{attrs:{id:"解决方法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#解决方法"}},[t._v("#")]),t._v(" 解决方法")]),t._v(" "),s("p",[t._v("其实 "),s("code",[t._v(".tmpl")]),t._v(" 本质上，还是一个html文件，只是有部分的是有些区别的，比如在渲染数据的时候，我们使用的是这种方法")]),t._v(" "),s("div",{staticClass:"language-shell script line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(".data"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br")])]),s("p",[t._v("因此，我们就完全可以使用.html模板来解析我们的 "),s("code",[t._v(".tmpl")]),t._v("，我们打开我们的goland settting页面")]),t._v(" "),s("p",[s("img",{attrs:{src:"/images/image-20200913213623681.png",alt:"image-20200913213623681"}})]),t._v(" "),s("p",[t._v("找到 File Types ，然后在找到 HTML，把 *.tmpl 添加进去即可，就能以html的方式来进行解析了")]),t._v(" "),s("p",[s("img",{attrs:{src:"/images/image-20200913213722522.png",alt:"image-20200913213722522"}})])])}),[],!1,null,null,null);a.default=n.exports}}]);