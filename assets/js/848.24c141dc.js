(window.webpackJsonp=window.webpackJsonp||[]).push([[848],{1544:function(v,_,t){"use strict";t.r(_);var r=t(5),s=Object(r.a)({},(function(){var v=this,_=v.$createElement,t=v._self._c||_;return t("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[t("h1",{attrs:{id:"istio-如何拆分微服务"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#istio-如何拆分微服务"}},[v._v("#")]),v._v(" Istio-如何拆分微服务")]),v._v(" "),t("h2",{attrs:{id:"概述"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#概述"}},[v._v("#")]),v._v(" 概述")]),v._v(" "),t("p",[v._v("目前微服务的拆分方式众说纷纭，每家的拆分方式也不尽相同，每家说的也都很有道理，但可惜没有 "),t("strong",[v._v("银弹（没有简单的方式解决复杂的软件工程问题）")]),v._v("，在这种情况下我们只需明确 "),t("strong",[v._v("架构是演化来的，不是设计来的")]),v._v(" 这一准则便不会让我们陷入纠结的泥潭，既然如此那我们随心所欲的拆分就好了嘛，不用有太大的心里负担，以下咱们根据微服务架构的设计模式还是能够提炼出一些基本的拆分方式供我们选择和借鉴")]),v._v(" "),t("h2",{attrs:{id:"拆分粒度"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#拆分粒度"}},[v._v("#")]),v._v(" 拆分粒度")]),v._v(" "),t("p",[v._v("我个人认为拆分粒度越细越好，咱们可以考虑一种面向未来的架构方式去做拆分，目前下一代架构基本就定在 "),t("strong",[v._v("Servless")]),v._v(" 这一概念上了（函数即服务，函数计算，一个函数一个服务），拆分的粒度足够细的话在未来转型云架构时会变的轻松许多并且咱们势必还要实现 "),t("strong",[v._v("全程异步通信")]),v._v(" 与 "),t("strong",[v._v("全服务无状态")]),v._v(" 等")]),v._v(" "),t("h2",{attrs:{id:"拆分方法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#拆分方法"}},[v._v("#")]),v._v(" 拆分方法")]),v._v(" "),t("h3",{attrs:{id:"根据业务拆分"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#根据业务拆分"}},[v._v("#")]),v._v(" 根据业务拆分")]),v._v(" "),t("p",[v._v("将系统中的业务模块按照职责范围识别出来，每个单独的业务模块拆分为一个独立的服务，例如，做一个电商系统，可以划分为 "),t("strong",[v._v("商品")]),v._v("、"),t("strong",[v._v("交易")]),v._v("、"),t("strong",[v._v("用户")]),v._v(" 3 个服务，也可以划分为"),t("strong",[v._v("商品")]),v._v("、"),t("strong",[v._v("订单")]),v._v("、"),t("strong",[v._v("支付")]),v._v("、"),t("strong",[v._v("发货")]),v._v("、"),t("strong",[v._v("买家")]),v._v("、"),t("strong",[v._v("卖家")]),v._v(" 6 个服务")]),v._v(" "),t("h3",{attrs:{id:"根据稳定性拆分"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#根据稳定性拆分"}},[v._v("#")]),v._v(" 根据稳定性拆分")]),v._v(" "),t("p",[v._v("将系统中的业务模块按照稳定性排序，将已经成熟和改动不大的服务拆分为 "),t("strong",[v._v("稳定服务")]),v._v("，将经常变化和迭代的服务拆分为 "),t("strong",[v._v("变动服务")]),v._v("，例如 "),t("strong",[v._v("日志")]),v._v(" 这种业务不怎么变化的就可以拆分成一个服务")]),v._v(" "),t("h3",{attrs:{id:"根据可靠性拆分"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#根据可靠性拆分"}},[v._v("#")]),v._v(" 根据可靠性拆分")]),v._v(" "),t("p",[v._v("将系统中的 "),t("strong",[v._v("可靠性要求高的核心服务")]),v._v(" 和 "),t("strong",[v._v("可靠性要求低的非核心服务")]),v._v(" 拆分开来，然后重点保证核心服务的高可用，其优点如下：")]),v._v(" "),t("ul",[t("li",[v._v("避免非核心服务故障影响核心服务，例如，日志上报是非核心服务，某一段时间内上报量可能会非常大，如果没有拆分出来，那么就可能严重影响核心服务")]),v._v(" "),t("li",[v._v("核心服务高可用方案更简单，核心服务单独拆分出来后，涉及的数据、组件等都会更少，对其做高可用方案就简单很多，需要考虑的点较少")]),v._v(" "),t("li",[v._v("降低高可用成本，拆分后，核心服务占用的机器、带宽等资源比不拆分要少很多")])]),v._v(" "),t("h3",{attrs:{id:"根据性能拆分"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#根据性能拆分"}},[v._v("#")]),v._v(" 根据性能拆分")]),v._v(" "),t("p",[v._v("将对性能压力大的模块拆出来，避免影响其他服务，而且对其做性能提升、高可用等优化都更简单高效，例如电商的抢购，排队功能的性能压力很大，就可以将其独立为一个服务")]),v._v(" "),t("h3",{attrs:{id:"根据事务拆分"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#根据事务拆分"}},[v._v("#")]),v._v(" 根据事务拆分")]),v._v(" "),t("p",[v._v("通过分解事务上的服务进行拆分，按照 "),t("strong",[v._v("事务发起者")]),v._v("，"),t("strong",[v._v("事务参与者")]),v._v("，"),t("strong",[v._v("事务完成者")]),v._v(" 拆分成链式调用的服务，最后由 "),t("strong",[v._v("事务协调者服务")]),v._v(" 向所有参与方发出提交或回滚命令")]),v._v(" "),t("h2",{attrs:{id:"完整微服务架构生态"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#完整微服务架构生态"}},[v._v("#")]),v._v(" 完整微服务架构生态")]),v._v(" "),t("p",[v._v("我这里给出的解决方案是 "),t("strong",[v._v("React / Vue")]),v._v(" + "),t("strong",[v._v("Spring Cloud Alibaba")]),v._v(" + "),t("strong",[v._v("Apache Dubbo")]),v._v(" + "),t("strong",[v._v("Kubernetes")]),v._v(" + "),t("strong",[v._v("Istio")]),v._v(" 的方式实现我们的完整微服务架构生态，真正意义上满足三大指标（"),t("strong",[v._v("高可用")]),v._v("、"),t("strong",[v._v("高性能")]),v._v("、"),t("strong",[v._v("高并发")]),v._v("），下一代 "),t("strong",[v._v("云架构时代")]),v._v("，我会尝试采用 "),t("strong",[v._v("区块链")]),v._v(" 的方式实现 "),t("strong",[v._v("Servless")]),v._v(" 函数即服务架构；下面我们看一下这几套解决方案在完整微服务架构生态中起到的主要作用")]),v._v(" "),t("h3",{attrs:{id:"react-vue"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#react-vue"}},[v._v("#")]),v._v(" React / Vue")]),v._v(" "),t("p",[v._v("前后分离；将 "),t("strong",[v._v("视图层")]),v._v(" 解耦出来，使用 "),t("strong",[v._v("MVVM")]),v._v(" 模式实现双向数据绑定，利用其提供的 "),t("strong",[v._v("模块化")]),v._v(" 与 "),t("strong",[v._v("虚拟 DOM")]),v._v(" 开发前端应用程序")]),v._v(" "),t("h3",{attrs:{id:"aapche-dubbo"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#aapche-dubbo"}},[v._v("#")]),v._v(" Aapche Dubbo")]),v._v(" "),t("p",[v._v("高性能 Java RPC 通信框架；它在咱们微服务架构体系中仅充当 RPC 通信功能，我主要将它作用于 "),t("strong",[v._v("数据访问层")]),v._v("，因为数据库不允许被直接访问，所以它在我们 "),t("strong",[v._v("三层架构")]),v._v(" 的最底层即可")]),v._v(" "),t("h3",{attrs:{id:"spring-cloud-alibaba"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#spring-cloud-alibaba"}},[v._v("#")]),v._v(" Spring Cloud Alibaba")]),v._v(" "),t("p",[v._v("一站式微服务开发解决方案；我将它作用于 "),t("strong",[v._v("业务逻辑层")]),v._v("，阿里巴巴提供的各种组件可以很好的为我们协调业务场景问题，比如 "),t("strong",[v._v("削峰填谷")]),v._v("、"),t("strong",[v._v("熔断降级")]),v._v("、"),t("strong",[v._v("流量控制")]),v._v(" 等")]),v._v(" "),t("h3",{attrs:{id:"kubernetes"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#kubernetes"}},[v._v("#")]),v._v(" Kubernetes")]),v._v(" "),t("p",[v._v("容器编排管理系统；K8S 的重要性不言而喻，它是咱们实现云计算的重要工具，它有个缺点就是没有提供很好的 "),t("strong",[v._v("服务治理")]),v._v(" 能力")]),v._v(" "),t("h3",{attrs:{id:"istio"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#istio"}},[v._v("#")]),v._v(" Istio")]),v._v(" "),t("p",[v._v("Service Mesh 服务网格，让你更好更轻松的解决服务治理问题；它补充了 K8S 缺失的服务治理能力，采用 "),t("strong",[v._v("Sidecar")]),v._v(" 模式为我们提供了一套 "),t("strong",[v._v("控制面")]),v._v("，包括 "),t("strong",[v._v("Pilot (规则配置)")]),v._v("、"),t("strong",[v._v("Mixer (策略配置)")]),v._v("、"),t("strong",[v._v("Citadel (证书生成与下发)")]),v._v("、"),t("strong",[v._v("Kiali (规则验证)")])]),v._v(" "),t("h2",{attrs:{id:"spring-cloud-kubernetes"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#spring-cloud-kubernetes"}},[v._v("#")]),v._v(" Spring Cloud & Kubernetes")]),v._v(" "),t("table",[t("thead",[t("tr",[t("th",[v._v("功能比较")]),v._v(" "),t("th",[v._v("Spring Cloud Alibaba")]),v._v(" "),t("th",[v._v("Kubernetes")])])]),v._v(" "),t("tbody",[t("tr",[t("td",[v._v("配置管理")]),v._v(" "),t("td",[v._v("Nacos")]),v._v(" "),t("td",[v._v("ConfigMap")])]),v._v(" "),t("tr",[t("td",[v._v("服务发现")]),v._v(" "),t("td",[v._v("Nacos")]),v._v(" "),t("td",[v._v("Etcd")])]),v._v(" "),t("tr",[t("td",[v._v("负载均衡")]),v._v(" "),t("td",[v._v("Ribbon")]),v._v(" "),t("td",[v._v("Service")])]),v._v(" "),t("tr",[t("td",[v._v("API 网关")]),v._v(" "),t("td",[v._v("借用 Spring Cloud Gateway")]),v._v(" "),t("td",[v._v("Ingress")])]),v._v(" "),t("tr",[t("td",[v._v("认证授权")]),v._v(" "),t("td",[v._v("借用 Spring Security oAuth2")]),v._v(" "),t("td",[v._v("Secrets")])]),v._v(" "),t("tr",[t("td",[v._v("日志收集")]),v._v(" "),t("td",[v._v("ELK (LogStash)")]),v._v(" "),t("td",[v._v("EFK (Fluentd)")])]),v._v(" "),t("tr",[t("td",[v._v("指标收集")]),v._v(" "),t("td",[v._v("-")]),v._v(" "),t("td",[v._v("Prometheus，Grafana")])]),v._v(" "),t("tr",[t("td",[v._v("链路追踪")]),v._v(" "),t("td",[v._v("借用 Apache Skywalking")]),v._v(" "),t("td",[v._v("ZipKin")])]),v._v(" "),t("tr",[t("td",[v._v("熔断限流")]),v._v(" "),t("td",[v._v("Sentinel")]),v._v(" "),t("td",[v._v("支持")])]),v._v(" "),t("tr",[t("td",[v._v("自动扩缩容")]),v._v(" "),t("td",[v._v("-")]),v._v(" "),t("td",[v._v("支持")])]),v._v(" "),t("tr",[t("td",[v._v("打包部署")]),v._v(" "),t("td",[v._v("Spring Boot")]),v._v(" "),t("td",[v._v("Docker")])]),v._v(" "),t("tr",[t("td",[v._v("任务调度")]),v._v(" "),t("td",[v._v("Spring Batch")]),v._v(" "),t("td",[v._v("Jobs")])])])]),v._v(" "),t("h2",{attrs:{id:"完成"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#完成"}},[v._v("#")]),v._v(" 完成")])])}),[],!1,null,null,null);_.default=s.exports}}]);