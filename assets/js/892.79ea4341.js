(window.webpackJsonp=window.webpackJsonp||[]).push([[892],{1588:function(n,e,a){"use strict";a.r(e);var s=a(5),r=Object(s.a)({},(function(){var n=this,e=n.$createElement,a=n._self._c||e;return a("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[a("h1",{attrs:{id:"简介"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#简介"}},[n._v("#")]),n._v(" 简介")]),n._v(" "),a("h2",{attrs:{id:"概述"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#概述"}},[n._v("#")]),n._v(" 概述")]),n._v(" "),a("p",[n._v("非主流微服务架构解决方案 "),a("strong",[n._v("Spring Cloud Alibaba + Dubbo + Vue")]),n._v("，该章节为拓展章节，主要目的是想实现之前说的对内 RPC，对外 REST 并利用 "),a("strong",[n._v("Vue Element Admin")]),n._v(" 实现一个相对完整的前后分离效果。")]),n._v(" "),a("p",[a("a",{attrs:{href:"https://github.com/github1013/spring-cloud-alibaba-dubbo",target:"_blank",rel:"noopener noreferrer"}},[a("strong",[n._v("GitHub")]),a("OutboundLink")],1)]),n._v(" "),a("h2",{attrs:{id:"目标"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#目标"}},[n._v("#")]),n._v(" 目标")]),n._v(" "),a("p",[n._v("Spring Cloud Alibaba Dubbo 项目的目标是将 Dubbo 融入到 Spring Cloud Alibaba 生态中，使微服务之间的调用同时具备 RESTful 和 Dubbo 调用的能力。做到对业务代码无侵入，无感知；引入 JAR 包则微服务间调用使用 Dubbo，去掉 JAR 包则使用默认的 RESTful；实现参考的是 Spring Cloud 中文社区的 "),a("a",{attrs:{href:"https://github.com/SpringCloud/spring-cloud-dubbo",target:"_blank",rel:"noopener noreferrer"}},[n._v("Spring Cloud Dubbo"),a("OutboundLink")],1),n._v(" 项目。")]),n._v(" "),a("h2",{attrs:{id:"nacos"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#nacos"}},[n._v("#")]),n._v(" Nacos")]),n._v(" "),a("p",[n._v("既然已经将 Dubbo 集成进了 Spring Cloud Alibaba，那么理所当然的我们的注册中心也不再采用 Zookeeper 方案而是转为 Nacos 方案了，部署 Nacos : "),a("RouterLink",{attrs:{to:"/zh/spring-cloud-alibaba/服务注册与发现.html"}},[a("strong",[n._v("服务注册与发现")])])],1),n._v(" "),a("p",[a("strong",[n._v("注：截止到博客发表时间 2019 年 03 月 13 日，Nacos 已发行版为 0.9.0，在 0.8.0 时登录 Nacos 需要使用账号密码，默认账号密码为 nacos/nacos")])]),n._v(" "),a("h2",{attrs:{id:"实现基于-feign-的注册方案"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#实现基于-feign-的注册方案"}},[n._v("#")]),n._v(" 实现基于 Feign 的注册方案")]),n._v(" "),a("p",[n._v("由于 Nacos、Dubbo、Spring Cloud Alibaba 都是阿里系产品，所以我们可以很容的将 Dubbo 和 Http 服务注册到 Nacos 中。")]),n._v(" "),a("p",[a("img",{attrs:{src:"/img/2019031301390001.png",alt:""}})]),n._v(" "),a("p",[n._v("此时服务提供者即注册了 Dubbo 又注册了 Http 服务，服务消费者根据配置方式可以在 Dubbo 与 Http 调用中随意切换")]),n._v(" "),a("h3",{attrs:{id:"服务提供者"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#服务提供者"}},[n._v("#")]),n._v(" 服务提供者")]),n._v(" "),a("p",[n._v("服务提供者在使用 Dubbo 注册服务时是需要使用 "),a("code",[n._v("@Service")]),n._v(" 注解将服务注册到注册中心的，现在改用 "),a("code",[n._v("@FeignClient")]),n._v(" 注解来注册")]),n._v(" "),a("p",[n._v("以 "),a("code",[n._v("spring-cloud-alibaba-dubbo-provider-api")]),n._v(" 项目中定义的 API 接口为例")]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v('    package com.cmcc.alibaba.dubbo.provider.service;\n    \n    import org.springframework.cloud.openfeign.FeignClient;\n    import org.springframework.web.bind.annotation.GetMapping;\n    \n    @FeignClient("provider")\n    public interface ProviderService {\n        @GetMapping("/hi")\n        String hi();\n    }\n')])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br"),a("span",{staticClass:"line-number"},[n._v("5")]),a("br"),a("span",{staticClass:"line-number"},[n._v("6")]),a("br"),a("span",{staticClass:"line-number"},[n._v("7")]),a("br"),a("span",{staticClass:"line-number"},[n._v("8")]),a("br"),a("span",{staticClass:"line-number"},[n._v("9")]),a("br"),a("span",{staticClass:"line-number"},[n._v("10")]),a("br")])]),a("p",[n._v("以 "),a("code",[n._v("spring-cloud-alibaba-dubbo-provider-service")]),n._v(" 项目中实现接口为例")]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v('    package com.cmcc.alibaba.dubbo.provider.service.impl;\n    \n    import com.cmcc.alibaba.dubbo.provider.service.ProviderService;\n    import org.springframework.web.bind.annotation.RestController;\n    \n    @RestController\n    public class ProviderServiceImpl implements ProviderService {\n        @Override\n        public String hi() {\n            return "Hi Spring Cloud Alibaba Dubbo";\n        }\n    }\n')])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br"),a("span",{staticClass:"line-number"},[n._v("5")]),a("br"),a("span",{staticClass:"line-number"},[n._v("6")]),a("br"),a("span",{staticClass:"line-number"},[n._v("7")]),a("br"),a("span",{staticClass:"line-number"},[n._v("8")]),a("br"),a("span",{staticClass:"line-number"},[n._v("9")]),a("br"),a("span",{staticClass:"line-number"},[n._v("10")]),a("br"),a("span",{staticClass:"line-number"},[n._v("11")]),a("br"),a("span",{staticClass:"line-number"},[n._v("12")]),a("br")])]),a("p",[n._v("以上代码是一个典型的 Spring Cloud RESTFul API，服务提供者需要做的就是引入 Dubbo 相关依赖，扫描包含 "),a("code",[n._v("@FeignClient")]),n._v(" 注解的类并注册到 Nacos 即可，关键代码在 "),a("code",[n._v("spring-cloud-alibaba-dubbo-core")]),n._v(" 项目的 "),a("code",[n._v("FeignClientToDubboProviderBeanPostProcessor")]),n._v(" 类中")]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v('        /**\n         * Registers Beans whose classes was annotated {@link FeignClient}\n         *\n         * @param packagesToScan The base packages to scan\n         * @param registry       {@link BeanDefinitionRegistry}\n         */\n        private void registerServiceBeans(Set<String> packagesToScan, BeanDefinitionRegistry registry) {\n    \n            DubboClassPathBeanDefinitionScanner scanner =\n                    new DubboClassPathBeanDefinitionScanner(registry, environment, resourceLoader);\n    \n            BeanNameGenerator beanNameGenerator = resolveBeanNameGenerator(registry);\n    \n            scanner.setBeanNameGenerator(beanNameGenerator);\n    \n            scanner.addIncludeFilter(new AnnotationTypeFilter(FeignClient.class, true, true));\n    \n            for (String packageToScan : packagesToScan) {\n    \n                // Registers @Service Bean first\n                scanner.scan(packageToScan);\n    \n                // Finds all BeanDefinitionHolders of @Service whether @ComponentScan scans or not.\n                Set<BeanDefinitionHolder> beanDefinitionHolders =\n                        findServiceBeanDefinitionHolders(scanner, packageToScan, registry, beanNameGenerator);\n    \n                if (!CollectionUtils.isEmpty(beanDefinitionHolders)) {\n    \n                    for (BeanDefinitionHolder beanDefinitionHolder : beanDefinitionHolders) {\n                        registerServiceBean(beanDefinitionHolder, registry, scanner);\n                    }\n    \n                    if (logger.isInfoEnabled()) {\n                        logger.info(beanDefinitionHolders.size() + " annotated Dubbo\'s @Service Components { " +\n                                beanDefinitionHolders +\n                                " } were scanned under package[" + packageToScan + "]");\n                    }\n    \n                } else {\n    \n                    if (logger.isWarnEnabled()) {\n                        logger.warn("No Spring Bean annotating Dubbo\'s @Service was found under package["\n                                + packageToScan + "]");\n                    }\n    \n                }\n    \n            }\n    \n        }\n')])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br"),a("span",{staticClass:"line-number"},[n._v("5")]),a("br"),a("span",{staticClass:"line-number"},[n._v("6")]),a("br"),a("span",{staticClass:"line-number"},[n._v("7")]),a("br"),a("span",{staticClass:"line-number"},[n._v("8")]),a("br"),a("span",{staticClass:"line-number"},[n._v("9")]),a("br"),a("span",{staticClass:"line-number"},[n._v("10")]),a("br"),a("span",{staticClass:"line-number"},[n._v("11")]),a("br"),a("span",{staticClass:"line-number"},[n._v("12")]),a("br"),a("span",{staticClass:"line-number"},[n._v("13")]),a("br"),a("span",{staticClass:"line-number"},[n._v("14")]),a("br"),a("span",{staticClass:"line-number"},[n._v("15")]),a("br"),a("span",{staticClass:"line-number"},[n._v("16")]),a("br"),a("span",{staticClass:"line-number"},[n._v("17")]),a("br"),a("span",{staticClass:"line-number"},[n._v("18")]),a("br"),a("span",{staticClass:"line-number"},[n._v("19")]),a("br"),a("span",{staticClass:"line-number"},[n._v("20")]),a("br"),a("span",{staticClass:"line-number"},[n._v("21")]),a("br"),a("span",{staticClass:"line-number"},[n._v("22")]),a("br"),a("span",{staticClass:"line-number"},[n._v("23")]),a("br"),a("span",{staticClass:"line-number"},[n._v("24")]),a("br"),a("span",{staticClass:"line-number"},[n._v("25")]),a("br"),a("span",{staticClass:"line-number"},[n._v("26")]),a("br"),a("span",{staticClass:"line-number"},[n._v("27")]),a("br"),a("span",{staticClass:"line-number"},[n._v("28")]),a("br"),a("span",{staticClass:"line-number"},[n._v("29")]),a("br"),a("span",{staticClass:"line-number"},[n._v("30")]),a("br"),a("span",{staticClass:"line-number"},[n._v("31")]),a("br"),a("span",{staticClass:"line-number"},[n._v("32")]),a("br"),a("span",{staticClass:"line-number"},[n._v("33")]),a("br"),a("span",{staticClass:"line-number"},[n._v("34")]),a("br"),a("span",{staticClass:"line-number"},[n._v("35")]),a("br"),a("span",{staticClass:"line-number"},[n._v("36")]),a("br"),a("span",{staticClass:"line-number"},[n._v("37")]),a("br"),a("span",{staticClass:"line-number"},[n._v("38")]),a("br"),a("span",{staticClass:"line-number"},[n._v("39")]),a("br"),a("span",{staticClass:"line-number"},[n._v("40")]),a("br"),a("span",{staticClass:"line-number"},[n._v("41")]),a("br"),a("span",{staticClass:"line-number"},[n._v("42")]),a("br"),a("span",{staticClass:"line-number"},[n._v("43")]),a("br"),a("span",{staticClass:"line-number"},[n._v("44")]),a("br"),a("span",{staticClass:"line-number"},[n._v("45")]),a("br"),a("span",{staticClass:"line-number"},[n._v("46")]),a("br"),a("span",{staticClass:"line-number"},[n._v("47")]),a("br"),a("span",{staticClass:"line-number"},[n._v("48")]),a("br"),a("span",{staticClass:"line-number"},[n._v("49")]),a("br"),a("span",{staticClass:"line-number"},[n._v("50")]),a("br")])]),a("h3",{attrs:{id:"服务消费者"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#服务消费者"}},[n._v("#")]),n._v(" 服务消费者")]),n._v(" "),a("p",[n._v("服务消费者需要依赖 "),a("code",[n._v("spring-cloud-alibaba-dubbo-provider-api")]),n._v("，并直接使用 "),a("code",[n._v("@Autowired")]),n._v(" 注解即可实现注入，可以不使用 Dubbo 提供的 "),a("code",[n._v("@Reference")]),n._v(" 注解")]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v('    package com.cmcc.alibaba.dubbo.consumer.service;\n    \n    import com.cmcc.alibaba.dubbo.provider.service.ProviderService;\n    import org.springframework.beans.factory.annotation.Autowired;\n    import org.springframework.web.bind.annotation.GetMapping;\n    import org.springframework.web.bind.annotation.RestController;\n    \n    @RestController\n    public class TestService {\n    \n        @Autowired\n        private ProviderService providerService;\n    \n        @GetMapping("/test")\n        public String test() {\n            return providerService.hi();\n        }\n    }\n')])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br"),a("span",{staticClass:"line-number"},[n._v("5")]),a("br"),a("span",{staticClass:"line-number"},[n._v("6")]),a("br"),a("span",{staticClass:"line-number"},[n._v("7")]),a("br"),a("span",{staticClass:"line-number"},[n._v("8")]),a("br"),a("span",{staticClass:"line-number"},[n._v("9")]),a("br"),a("span",{staticClass:"line-number"},[n._v("10")]),a("br"),a("span",{staticClass:"line-number"},[n._v("11")]),a("br"),a("span",{staticClass:"line-number"},[n._v("12")]),a("br"),a("span",{staticClass:"line-number"},[n._v("13")]),a("br"),a("span",{staticClass:"line-number"},[n._v("14")]),a("br"),a("span",{staticClass:"line-number"},[n._v("15")]),a("br"),a("span",{staticClass:"line-number"},[n._v("16")]),a("br"),a("span",{staticClass:"line-number"},[n._v("17")]),a("br"),a("span",{staticClass:"line-number"},[n._v("18")]),a("br")])]),a("p",[n._v("以上代码是一个典型的 Spring Cloud Feign 调用。我们只需要替换 Feign 的实现。产生 "),a("code",[n._v("ProviderService")]),n._v(" 接口的 "),a("code",[n._v("ProxyBean")]),n._v(" 时，使用 Dubbo 产生的 Bean 替换默认的 Feign 产生的 RESTFul 调用的 Bean 即可，关键代码在 "),a("code",[n._v("spring-cloud-alibaba-dubbo-core")]),n._v(" 项目的 "),a("code",[n._v("DubboFeignBuilder")]),n._v(" 类中")]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("        @Override\n        public <T> T target(Target<T> target) {\n            ReferenceBeanBuilder beanBuilder = ReferenceBeanBuilder\n                    .create(defaultReference, target.getClass().getClassLoader(), applicationContext)\n                    .interfaceClass(target.type());\n    \n            try {\n                T object = (T) beanBuilder.build().getObject();\n                return object;\n            } catch (Exception e) {\n                throw new RuntimeException(e);\n            }\n        }\n")])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br"),a("span",{staticClass:"line-number"},[n._v("5")]),a("br"),a("span",{staticClass:"line-number"},[n._v("6")]),a("br"),a("span",{staticClass:"line-number"},[n._v("7")]),a("br"),a("span",{staticClass:"line-number"},[n._v("8")]),a("br"),a("span",{staticClass:"line-number"},[n._v("9")]),a("br"),a("span",{staticClass:"line-number"},[n._v("10")]),a("br"),a("span",{staticClass:"line-number"},[n._v("11")]),a("br"),a("span",{staticClass:"line-number"},[n._v("12")]),a("br"),a("span",{staticClass:"line-number"},[n._v("13")]),a("br")])]),a("h2",{attrs:{id:"消费者使用-restful-调用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#消费者使用-restful-调用"}},[n._v("#")]),n._v(" 消费者使用 RESTFul 调用")]),n._v(" "),a("p",[n._v("只需将 Dubbo 相关依赖排除即可")]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("    <dependency>\n        <groupId>com.cmcc</groupId>\n        <artifactId>spring-cloud-alibaba-dubbo-starter</artifactId>\n        <exclusions>\n            <exclusion>\n                <groupId>com.cmcc</groupId>\n                <artifactId>spring-cloud-alibaba-dubbo-core</artifactId>\n            </exclusion>\n            <exclusion>\n                <groupId>com.alibaba.boot</groupId>\n                <artifactId>dubbo-spring-boot-starter</artifactId>\n            </exclusion>\n        </exclusions>\n    </dependency>\n")])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br"),a("span",{staticClass:"line-number"},[n._v("5")]),a("br"),a("span",{staticClass:"line-number"},[n._v("6")]),a("br"),a("span",{staticClass:"line-number"},[n._v("7")]),a("br"),a("span",{staticClass:"line-number"},[n._v("8")]),a("br"),a("span",{staticClass:"line-number"},[n._v("9")]),a("br"),a("span",{staticClass:"line-number"},[n._v("10")]),a("br"),a("span",{staticClass:"line-number"},[n._v("11")]),a("br"),a("span",{staticClass:"line-number"},[n._v("12")]),a("br"),a("span",{staticClass:"line-number"},[n._v("13")]),a("br"),a("span",{staticClass:"line-number"},[n._v("14")]),a("br")])]),a("h2",{attrs:{id:"附-阿里为何放弃-zookeeper"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#附-阿里为何放弃-zookeeper"}},[n._v("#")]),n._v(" 附：阿里为何放弃 Zookeeper")]),n._v(" "),a("h3",{attrs:{id:"cap"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#cap"}},[n._v("#")]),n._v(" CAP")]),n._v(" "),a("p",[n._v("有个思考，从 CAP 角度考虑，服务注册中心是 CP 系统还是 AP 系统呢？")]),n._v(" "),a("ul",[a("li",[n._v("服务注册中心是为了服务间调用服务的，那么绝对不允许因为服务注册中心出现了问题而导致服务间的调用出问题")]),n._v(" "),a("li",[n._v("假如有 node1，node2，node3 集群节点。保存着可用服务列表 ip1，ip2，ip3，试想如果此时不一致，比如 node1 只保存了ip1，ip2，此时服务读取 node1 的节点，那么会造成什么影响？")])]),n._v(" "),a("p",[n._v("调用 node1 的服务，顶多就是负载均衡时不会有流量打到 ip3，然后等 node1 同步回 ip3 后，又一致了，这对服务其实没什么太大影响。所以，推测出服务注册中心应该是个 AP 系统。")]),n._v(" "),a("p",[a("strong",[n._v("注：CAP 定理可参考我 "),a("RouterLink",{attrs:{to:"/zh/interview/"}},[n._v("面试宝典")]),n._v(" 中的 "),a("RouterLink",{attrs:{to:"/zh/interview/Java-面试宝典-说说-CAP-定理、-BASE-理论.html#cap-定理"}},[n._v("说说 CAP 定理、 BASE 理论")]),n._v(" 章节")],1)]),n._v(" "),a("h3",{attrs:{id:"zookeeper-是个-cp-系统-强一致性"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#zookeeper-是个-cp-系统-强一致性"}},[n._v("#")]),n._v(" Zookeeper 是个 CP 系统，强一致性")]),n._v(" "),a("ul",[a("li",[n._v("场景1，当 master 挂了，此时 Zookeeper 集群需要重新选举，而此时服务需要来读取可用服务，是不可用的。影响到了服务的可用性当然你可以说服务本地有缓存可用列表。然而下面这种方式就更无法处理了。")]),n._v(" "),a("li",[n._v("场景2，分区可用。试想，有 3 个机房，如果其中机房 3 和机房 1，2 网络断了，那么机房 3 的注册中心就不能注册新的机器了，这显然也不合理从健康检查角度来看")])]),n._v(" "),a("p",[a("img",{attrs:{src:"/img/da288a836eac2ddeeb0bbdfa0fd29fb4b8d.jpg",alt:""}})]),n._v(" "),a("p",[n._v("Zookeeper 是通过 TCP 的心跳判断服务是否可用，但 TCP 的活性并不代表服务是可用的，如：连接池已满，DB 挂了等")]),n._v(" "),a("p",[a("strong",[n._v("注意：Zookeeper 可以参考我 "),a("RouterLink",{attrs:{to:"/zh/guide/Apache-Dubbo.html"}},[n._v("Apache Dubbo Zookeeper")]),n._v(" 解决方案的 "),a("RouterLink",{attrs:{to:"/zh/apache-dubbo-zookeeper/什么是分布式协调技术.html"}},[n._v("Apache Zookeeper")]),n._v(" 章节")],1)]),n._v(" "),a("h3",{attrs:{id:"理想的注册中心"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#理想的注册中心"}},[n._v("#")]),n._v(" 理想的注册中心")]),n._v(" "),a("ul",[a("li",[n._v("服务自动注册发现。最好有新的服务注册上去时还能推送到调用端")]),n._v(" "),a("li",[n._v("能对注册上来的机器方便的进行管理，能手动删除（发送信号让服务优雅下线）、恢复机器")]),n._v(" "),a("li",[n._v("服务的健康检查，能真正的检测到服务是否可用")]),n._v(" "),a("li",[n._v("可以看到是否有其他调用服务正在订阅注册上来的服务")]),n._v(" "),a("li",[n._v("能够带上些除了 IP 外的其它信息")])])])}),[],!1,null,null,null);e.default=r.exports}}]);