(window.webpackJsonp=window.webpackJsonp||[]).push([[626],{1323:function(t,a,n){"use strict";n.r(a);var e=n(5),o=Object(e.a)({},(function(){var t=this,a=t.$createElement,n=t._self._c||a;return n("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[n("h1",{attrs:{id:"beanfactory-和-applicationcontext-有什么区别"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#beanfactory-和-applicationcontext-有什么区别"}},[t._v("#")]),t._v(" BeanFactory 和 ApplicationContext 有什么区别")]),t._v(" "),n("ul",[n("li",[t._v("BeanFactory 可以理解为含有 bean 集合的工厂类。BeanFactory 包含了种 bean 的定义，以便在接收到客户端请求时将对应的 bean 实例化。")]),t._v(" "),n("li",[t._v("BeanFactory 还能在实例化对象的时生成协作类之间的关系。此举将 bean 自身与 bean 客户端的配置中解放出来。BeanFactory 还包含了 bean 生命周期的控制，调用客户端的初始化方法（initialization methods）和销毁方法（destruction methods）。")]),t._v(" "),n("li",[t._v("从表面上看，ApplicationContext 如同 BeanFactory 一样具有 bean 定义、bean 关联关系的设置，根据请求分发 bean 的功能。但 ApplicationContext 在此基础上还提供了其他的功能：\n"),n("ul",[n("li",[t._v("提供了支持国际化的文本消息")]),t._v(" "),n("li",[t._v("统一的资源文件读取方式")]),t._v(" "),n("li",[t._v("已在监听器中注册的 bean 的事件")])])])])])}),[],!1,null,null,null);a.default=o.exports}}]);