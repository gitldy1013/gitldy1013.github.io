(window.webpackJsonp=window.webpackJsonp||[]).push([[577],{1273:function(n,s,a){"use strict";a.r(s);var t=a(5),e=Object(t.a)({},(function(){var n=this,s=n.$createElement,a=n._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[a("h1",{attrs:{id:"函数是组织好的、可重复使用的、用于执行指定任务的代码块。本文介绍了go语言中函数的相关内容。"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#函数是组织好的、可重复使用的、用于执行指定任务的代码块。本文介绍了go语言中函数的相关内容。"}},[n._v("#")]),n._v(" 函数是组织好的、可重复使用的、用于执行指定任务的代码块。本文介绍了Go语言中函数的相关内容。")]),n._v(" "),a("h2",{attrs:{id:"go语言中支持函数、匿名函数和闭包-并且函数在go语言中属于-一等公民-。"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#go语言中支持函数、匿名函数和闭包-并且函数在go语言中属于-一等公民-。"}},[n._v("#")]),n._v(" Go语言中支持函数、匿名函数和闭包，并且函数在Go语言中属于“一等公民”。")]),n._v(" "),a("h2",{attrs:{id:"函数定义"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#函数定义"}},[n._v("#")]),n._v(" 函数定义")]),n._v(" "),a("p",[n._v("Go语言中定义函数使用"),a("code",[n._v("func")]),n._v("关键字，具体格式如下：")]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("    func 函数名(参数)(返回值){\n        函数体\n    }\n")])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br")])]),a("p",[n._v("其中：")]),n._v(" "),a("ul",[a("li",[n._v("函数名：由字母、数字、下划线组成。但函数名的第一个字母不能是数字。在同一个包内，函数名也称不能重名（包的概念详见后文）。")]),n._v(" "),a("li",[n._v("参数：参数由参数变量和参数变量的类型组成，多个参数之间使用"),a("code",[n._v(",")]),n._v("分隔。")]),n._v(" "),a("li",[n._v("返回值：返回值由返回值变量和其变量类型组成，也可以只写返回值的类型，多个返回值必须用"),a("code",[n._v("()")]),n._v("包裹，并用"),a("code",[n._v(",")]),n._v("分隔。")]),n._v(" "),a("li",[n._v("函数体：实现指定功能的代码块。")])]),n._v(" "),a("p",[n._v("我们先来定义一个求两个数之和的函数：")]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("    func intSum(x int, y int) int {\n    \treturn x + y\n    }\n")])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br")])]),a("p",[n._v("函数的参数和返回值都是可选的，例如我们可以实现一个既不需要参数也没有返回值的函数：")]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v('    func sayHello() {\n    \tfmt.Println("Hello 沙河")\n    }\n')])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br")])]),a("h2",{attrs:{id:"函数的调用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#函数的调用"}},[n._v("#")]),n._v(" 函数的调用")]),n._v(" "),a("p",[n._v("定义了函数之后，我们可以通过"),a("code",[n._v("函数名()")]),n._v("的方式调用函数。 例如我们调用上面定义的两个函数，代码如下：")]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("    func main() {\n    \tsayHello()\n    \tret := intSum(10, 20)\n    \tfmt.Println(ret)\n    }\n")])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br"),a("span",{staticClass:"line-number"},[n._v("5")]),a("br")])]),a("p",[n._v("注意，调用有返回值的函数时，可以不接收其返回值。")]),n._v(" "),a("h2",{attrs:{id:"参数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#参数"}},[n._v("#")]),n._v(" 参数")]),n._v(" "),a("h3",{attrs:{id:"类型简写"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#类型简写"}},[n._v("#")]),n._v(" 类型简写")]),n._v(" "),a("p",[n._v("函数的参数中如果相邻变量的类型相同，则可以省略类型，例如：")]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("    func intSum(x, y int) int {\n    \treturn x + y\n    }\n")])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br")])]),a("p",[n._v("上面的代码中，"),a("code",[n._v("intSum")]),n._v("函数有两个参数，这两个参数的类型均为"),a("code",[n._v("int")]),n._v("，因此可以省略"),a("code",[n._v("x")]),n._v("的类型，因为"),a("code",[n._v("y")]),n._v("后面有类型说明，"),a("code",[n._v("x")]),n._v("参数也是该类型。")]),n._v(" "),a("h3",{attrs:{id:"可变参数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#可变参数"}},[n._v("#")]),n._v(" 可变参数")]),n._v(" "),a("p",[n._v("可变参数是指函数的参数数量不固定。Go语言中的可变参数通过在参数名后加"),a("code",[n._v("...")]),n._v("来标识。")]),n._v(" "),a("p",[n._v("注意：可变参数通常要作为函数的最后一个参数。")]),n._v(" "),a("p",[n._v("举个例子：")]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("    func intSum2(x ...int) int {\n    \tfmt.Println(x) //x是一个切片\n    \tsum := 0\n    \tfor _, v := range x {\n    \t\tsum = sum + v\n    \t}\n    \treturn sum\n    }\n")])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br"),a("span",{staticClass:"line-number"},[n._v("5")]),a("br"),a("span",{staticClass:"line-number"},[n._v("6")]),a("br"),a("span",{staticClass:"line-number"},[n._v("7")]),a("br"),a("span",{staticClass:"line-number"},[n._v("8")]),a("br")])]),a("p",[n._v("调用上面的函数：")]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("    ret1 := intSum2()\n    ret2 := intSum2(10)\n    ret3 := intSum2(10, 20)\n    ret4 := intSum2(10, 20, 30)\n    fmt.Println(ret1, ret2, ret3, ret4) //0 10 30 60\n")])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br"),a("span",{staticClass:"line-number"},[n._v("5")]),a("br")])]),a("p",[n._v("固定参数搭配可变参数使用时，可变参数要放在固定参数的后面，示例代码如下：")]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("    func intSum3(x int, y ...int) int {\n    \tfmt.Println(x, y)\n    \tsum := x\n    \tfor _, v := range y {\n    \t\tsum = sum + v\n    \t}\n    \treturn sum\n    }\n")])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br"),a("span",{staticClass:"line-number"},[n._v("5")]),a("br"),a("span",{staticClass:"line-number"},[n._v("6")]),a("br"),a("span",{staticClass:"line-number"},[n._v("7")]),a("br"),a("span",{staticClass:"line-number"},[n._v("8")]),a("br")])]),a("p",[n._v("调用上述函数：")]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("    ret5 := intSum3(100)\n    ret6 := intSum3(100, 10)\n    ret7 := intSum3(100, 10, 20)\n    ret8 := intSum3(100, 10, 20, 30)\n    fmt.Println(ret5, ret6, ret7, ret8) //100 110 130 160\n")])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br"),a("span",{staticClass:"line-number"},[n._v("5")]),a("br")])]),a("p",[n._v("本质上，函数的可变参数是通过切片来实现的。")]),n._v(" "),a("h2",{attrs:{id:"返回值"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#返回值"}},[n._v("#")]),n._v(" 返回值")]),n._v(" "),a("p",[n._v("Go语言中通过"),a("code",[n._v("return")]),n._v("关键字向外输出返回值。")]),n._v(" "),a("h3",{attrs:{id:"多返回值"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#多返回值"}},[n._v("#")]),n._v(" 多返回值")]),n._v(" "),a("p",[n._v("Go语言中函数支持多返回值，函数如果有多个返回值时必须用"),a("code",[n._v("()")]),n._v("将所有返回值包裹起来。")]),n._v(" "),a("p",[n._v("举个例子：")]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("    func calc(x, y int) (int, int) {\n    \tsum := x + y\n    \tsub := x - y\n    \treturn sum, sub\n    }\n")])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br"),a("span",{staticClass:"line-number"},[n._v("5")]),a("br")])]),a("h3",{attrs:{id:"返回值命名"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#返回值命名"}},[n._v("#")]),n._v(" 返回值命名")]),n._v(" "),a("p",[n._v("函数定义时可以给返回值命名，并在函数体中直接使用这些变量，最后通过"),a("code",[n._v("return")]),n._v("关键字返回。")]),n._v(" "),a("p",[n._v("例如：")]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("    func calc(x, y int) (sum, sub int) {\n    \tsum = x + y\n    \tsub = x - y\n    \treturn\n    }\n")])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br"),a("span",{staticClass:"line-number"},[n._v("5")]),a("br")])]),a("h3",{attrs:{id:"返回值补充"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#返回值补充"}},[n._v("#")]),n._v(" 返回值补充")]),n._v(" "),a("p",[n._v("当我们的一个函数返回值类型为slice时，nil可以看做是一个有效的slice，没必要显示返回一个长度为0的切片。")]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v('    func someFunc(x string) []int {\n    \tif x == "" {\n    \t\treturn nil // 没必要返回[]int{}\n    \t}\n    \t...\n    }\n')])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br"),a("span",{staticClass:"line-number"},[n._v("5")]),a("br"),a("span",{staticClass:"line-number"},[n._v("6")]),a("br")])]),a("h2",{attrs:{id:"函数进阶"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#函数进阶"}},[n._v("#")]),n._v(" 函数进阶")]),n._v(" "),a("h3",{attrs:{id:"变量作用域"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#变量作用域"}},[n._v("#")]),n._v(" 变量作用域")]),n._v(" "),a("h4",{attrs:{id:"全局变量"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#全局变量"}},[n._v("#")]),n._v(" 全局变量")]),n._v(" "),a("p",[n._v("全局变量是定义在函数外部的变量，它在程序整个运行周期内都有效。 在函数中可以访问到全局变量。")]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v('    package main\n    \n    import "fmt"\n    \n    //定义全局变量num\n    var num int64 = 10\n    \n    func testGlobalVar() {\n    \tfmt.Printf("num=%d\\n", num) //函数中可以访问全局变量num\n    }\n    func main() {\n    \ttestGlobalVar() //num=10\n    }\n')])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br"),a("span",{staticClass:"line-number"},[n._v("5")]),a("br"),a("span",{staticClass:"line-number"},[n._v("6")]),a("br"),a("span",{staticClass:"line-number"},[n._v("7")]),a("br"),a("span",{staticClass:"line-number"},[n._v("8")]),a("br"),a("span",{staticClass:"line-number"},[n._v("9")]),a("br"),a("span",{staticClass:"line-number"},[n._v("10")]),a("br"),a("span",{staticClass:"line-number"},[n._v("11")]),a("br"),a("span",{staticClass:"line-number"},[n._v("12")]),a("br"),a("span",{staticClass:"line-number"},[n._v("13")]),a("br")])]),a("h4",{attrs:{id:"局部变量"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#局部变量"}},[n._v("#")]),n._v(" 局部变量")]),n._v(" "),a("p",[n._v("局部变量又分为两种： 函数内定义的变量无法在该函数外使用，例如下面的示例代码main函数中无法使用testLocalVar函数中定义的变量x：")]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v('    func testLocalVar() {\n    \t//定义一个函数局部变量x,仅在该函数内生效\n    \tvar x int64 = 100\n    \tfmt.Printf("x=%d\\n", x)\n    }\n    \n    func main() {\n    \ttestLocalVar()\n    \tfmt.Println(x) // 此时无法使用变量x\n    }\n')])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br"),a("span",{staticClass:"line-number"},[n._v("5")]),a("br"),a("span",{staticClass:"line-number"},[n._v("6")]),a("br"),a("span",{staticClass:"line-number"},[n._v("7")]),a("br"),a("span",{staticClass:"line-number"},[n._v("8")]),a("br"),a("span",{staticClass:"line-number"},[n._v("9")]),a("br"),a("span",{staticClass:"line-number"},[n._v("10")]),a("br")])]),a("p",[n._v("如果局部变量和全局变量重名，优先访问局部变量。")]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v('    package main\n    \n    import "fmt"\n    \n    //定义全局变量num\n    var num int64 = 10\n    \n    func testNum() {\n    \tnum := 100\n    \tfmt.Printf("num=%d\\n", num) // 函数中优先使用局部变量\n    }\n    func main() {\n    \ttestNum() // num=100\n    }\n')])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br"),a("span",{staticClass:"line-number"},[n._v("5")]),a("br"),a("span",{staticClass:"line-number"},[n._v("6")]),a("br"),a("span",{staticClass:"line-number"},[n._v("7")]),a("br"),a("span",{staticClass:"line-number"},[n._v("8")]),a("br"),a("span",{staticClass:"line-number"},[n._v("9")]),a("br"),a("span",{staticClass:"line-number"},[n._v("10")]),a("br"),a("span",{staticClass:"line-number"},[n._v("11")]),a("br"),a("span",{staticClass:"line-number"},[n._v("12")]),a("br"),a("span",{staticClass:"line-number"},[n._v("13")]),a("br"),a("span",{staticClass:"line-number"},[n._v("14")]),a("br")])]),a("p",[n._v("接下来我们来看一下语句块定义的变量，通常我们会在if条件判断、for循环、switch语句上使用这种定义变量的方式。")]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("    func testLocalVar2(x, y int) {\n    \tfmt.Println(x, y) //函数的参数也是只在本函数中生效\n    \tif x > 0 {\n    \t\tz := 100 //变量z只在if语句块生效\n    \t\tfmt.Println(z)\n    \t}\n    \t//fmt.Println(z)//此处无法使用变量z\n    }\n")])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br"),a("span",{staticClass:"line-number"},[n._v("5")]),a("br"),a("span",{staticClass:"line-number"},[n._v("6")]),a("br"),a("span",{staticClass:"line-number"},[n._v("7")]),a("br"),a("span",{staticClass:"line-number"},[n._v("8")]),a("br")])]),a("p",[n._v("还有我们之前讲过的for循环语句中定义的变量，也是只在for语句块中生效：")]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("    func testLocalVar3() {\n    \tfor i := 0; i < 10; i++ {\n    \t\tfmt.Println(i) //变量i只在当前for语句块中生效\n    \t}\n    \t//fmt.Println(i) //此处无法使用变量i\n    }\n")])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br"),a("span",{staticClass:"line-number"},[n._v("5")]),a("br"),a("span",{staticClass:"line-number"},[n._v("6")]),a("br")])]),a("h2",{attrs:{id:"函数类型与变量"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#函数类型与变量"}},[n._v("#")]),n._v(" 函数类型与变量")]),n._v(" "),a("h3",{attrs:{id:"定义函数类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#定义函数类型"}},[n._v("#")]),n._v(" 定义函数类型")]),n._v(" "),a("p",[n._v("我们可以使用"),a("code",[n._v("type")]),n._v("关键字来定义一个函数类型，具体格式如下：")]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("    type calculation func(int, int) int\n")])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br")])]),a("p",[n._v("上面语句定义了一个"),a("code",[n._v("calculation")]),n._v("类型，它是一种函数类型，这种函数接收两个int类型的参数并且返回一个int类型的返回值。")]),n._v(" "),a("p",[n._v("简单来说，凡是满足这个条件的函数都是calculation类型的函数，例如下面的add和sub是calculation类型。")]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("    func add(x, y int) int {\n    \treturn x + y\n    }\n    \n    func sub(x, y int) int {\n    \treturn x - y\n    }\n")])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br"),a("span",{staticClass:"line-number"},[n._v("5")]),a("br"),a("span",{staticClass:"line-number"},[n._v("6")]),a("br"),a("span",{staticClass:"line-number"},[n._v("7")]),a("br")])]),a("p",[n._v("add和sub都能赋值给calculation类型的变量。")]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("    var c calculation\n    c = add\n")])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br")])]),a("h3",{attrs:{id:"函数类型变量"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#函数类型变量"}},[n._v("#")]),n._v(" 函数类型变量")]),n._v(" "),a("p",[n._v("我们可以声明函数类型的变量并且为该变量赋值：")]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v('    func main() {\n    \tvar c calculation               // 声明一个calculation类型的变量c\n    \tc = add                         // 把add赋值给c\n    \tfmt.Printf("type of c:%T\\n", c) // type of c:main.calculation\n    \tfmt.Println(c(1, 2))            // 像调用add一样调用c\n    \n    \tf := add                        // 将函数add赋值给变量f1\n    \tfmt.Printf("type of f:%T\\n", f) // type of f:func(int, int) int\n    \tfmt.Println(f(10, 20))          // 像调用add一样调用f\n    }\n')])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br"),a("span",{staticClass:"line-number"},[n._v("5")]),a("br"),a("span",{staticClass:"line-number"},[n._v("6")]),a("br"),a("span",{staticClass:"line-number"},[n._v("7")]),a("br"),a("span",{staticClass:"line-number"},[n._v("8")]),a("br"),a("span",{staticClass:"line-number"},[n._v("9")]),a("br"),a("span",{staticClass:"line-number"},[n._v("10")]),a("br")])]),a("h2",{attrs:{id:"高阶函数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#高阶函数"}},[n._v("#")]),n._v(" 高阶函数")]),n._v(" "),a("p",[n._v("高阶函数分为函数作为参数和函数作为返回值两部分。")]),n._v(" "),a("h3",{attrs:{id:"函数作为参数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#函数作为参数"}},[n._v("#")]),n._v(" 函数作为参数")]),n._v(" "),a("p",[n._v("函数可以作为参数：")]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("    func add(x, y int) int {\n    \treturn x + y\n    }\n    func calc(x, y int, op func(int, int) int) int {\n    \treturn op(x, y)\n    }\n    func main() {\n    \tret2 := calc(10, 20, add)\n    \tfmt.Println(ret2) //30\n    }\n")])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br"),a("span",{staticClass:"line-number"},[n._v("5")]),a("br"),a("span",{staticClass:"line-number"},[n._v("6")]),a("br"),a("span",{staticClass:"line-number"},[n._v("7")]),a("br"),a("span",{staticClass:"line-number"},[n._v("8")]),a("br"),a("span",{staticClass:"line-number"},[n._v("9")]),a("br"),a("span",{staticClass:"line-number"},[n._v("10")]),a("br")])]),a("h3",{attrs:{id:"函数作为返回值"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#函数作为返回值"}},[n._v("#")]),n._v(" 函数作为返回值")]),n._v(" "),a("p",[n._v("函数也可以作为返回值：")]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v('    func do(s string) (func(int, int) int, error) {\n    \tswitch s {\n    \tcase "+":\n    \t\treturn add, nil\n    \tcase "-":\n    \t\treturn sub, nil\n    \tdefault:\n    \t\terr := errors.New("无法识别的操作符")\n    \t\treturn nil, err\n    \t}\n    }\n')])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br"),a("span",{staticClass:"line-number"},[n._v("5")]),a("br"),a("span",{staticClass:"line-number"},[n._v("6")]),a("br"),a("span",{staticClass:"line-number"},[n._v("7")]),a("br"),a("span",{staticClass:"line-number"},[n._v("8")]),a("br"),a("span",{staticClass:"line-number"},[n._v("9")]),a("br"),a("span",{staticClass:"line-number"},[n._v("10")]),a("br"),a("span",{staticClass:"line-number"},[n._v("11")]),a("br")])]),a("h2",{attrs:{id:"匿名函数和闭包"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#匿名函数和闭包"}},[n._v("#")]),n._v(" 匿名函数和闭包")]),n._v(" "),a("h3",{attrs:{id:"匿名函数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#匿名函数"}},[n._v("#")]),n._v(" 匿名函数")]),n._v(" "),a("p",[n._v("函数当然还可以作为返回值，但是在Go语言中函数内部不能再像之前那样定义函数了，只能定义匿名函数。匿名函数就是没有函数名的函数，匿名函数的定义格式如下：")]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("    func(参数)(返回值){\n        函数体\n    }\n")])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br")])]),a("p",[n._v("匿名函数因为没有函数名，所以没办法像普通函数那样调用，所以匿名函数需要保存到某个变量或者作为立即执行函数:")]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("    func main() {\n    \t// 将匿名函数保存到变量\n    \tadd := func(x, y int) {\n    \t\tfmt.Println(x + y)\n    \t}\n    \tadd(10, 20) // 通过变量调用匿名函数\n    \n    \t//自执行函数：匿名函数定义完加()直接执行\n    \tfunc(x, y int) {\n    \t\tfmt.Println(x + y)\n    \t}(10, 20)\n    }\n")])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br"),a("span",{staticClass:"line-number"},[n._v("5")]),a("br"),a("span",{staticClass:"line-number"},[n._v("6")]),a("br"),a("span",{staticClass:"line-number"},[n._v("7")]),a("br"),a("span",{staticClass:"line-number"},[n._v("8")]),a("br"),a("span",{staticClass:"line-number"},[n._v("9")]),a("br"),a("span",{staticClass:"line-number"},[n._v("10")]),a("br"),a("span",{staticClass:"line-number"},[n._v("11")]),a("br"),a("span",{staticClass:"line-number"},[n._v("12")]),a("br")])]),a("p",[n._v("匿名函数多用于实现回调函数和闭包。")]),n._v(" "),a("h3",{attrs:{id:"闭包"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#闭包"}},[n._v("#")]),n._v(" 闭包")]),n._v(" "),a("p",[n._v("闭包指的是一个函数和与其相关的引用环境组合而成的实体。简单来说，"),a("code",[n._v("闭包=函数+引用环境")]),n._v("。 首先我们来看一个例子：")]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("    func adder() func(int) int {\n    \tvar x int\n    \treturn func(y int) int {\n    \t\tx += y\n    \t\treturn x\n    \t}\n    }\n    func main() {\n    \tvar f = adder()\n    \tfmt.Println(f(10)) //10\n    \tfmt.Println(f(20)) //30\n    \tfmt.Println(f(30)) //60\n    \n    \tf1 := adder()\n    \tfmt.Println(f1(40)) //40\n    \tfmt.Println(f1(50)) //90\n    }\n")])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br"),a("span",{staticClass:"line-number"},[n._v("5")]),a("br"),a("span",{staticClass:"line-number"},[n._v("6")]),a("br"),a("span",{staticClass:"line-number"},[n._v("7")]),a("br"),a("span",{staticClass:"line-number"},[n._v("8")]),a("br"),a("span",{staticClass:"line-number"},[n._v("9")]),a("br"),a("span",{staticClass:"line-number"},[n._v("10")]),a("br"),a("span",{staticClass:"line-number"},[n._v("11")]),a("br"),a("span",{staticClass:"line-number"},[n._v("12")]),a("br"),a("span",{staticClass:"line-number"},[n._v("13")]),a("br"),a("span",{staticClass:"line-number"},[n._v("14")]),a("br"),a("span",{staticClass:"line-number"},[n._v("15")]),a("br"),a("span",{staticClass:"line-number"},[n._v("16")]),a("br"),a("span",{staticClass:"line-number"},[n._v("17")]),a("br")])]),a("p",[n._v("变量"),a("code",[n._v("f")]),n._v("是一个函数并且它引用了其外部作用域中的"),a("code",[n._v("x")]),n._v("变量，此时"),a("code",[n._v("f")]),n._v("就是一个闭包。 在"),a("code",[n._v("f")]),n._v("的生命周期内，变量"),a("code",[n._v("x")]),n._v("也一直有效。 闭包进阶示例1：")]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("    func adder2(x int) func(int) int {\n    \treturn func(y int) int {\n    \t\tx += y\n    \t\treturn x\n    \t}\n    }\n    func main() {\n    \tvar f = adder2(10)\n    \tfmt.Println(f(10)) //20\n    \tfmt.Println(f(20)) //40\n    \tfmt.Println(f(30)) //70\n    \n    \tf1 := adder2(20)\n    \tfmt.Println(f1(40)) //60\n    \tfmt.Println(f1(50)) //110\n    }\n")])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br"),a("span",{staticClass:"line-number"},[n._v("5")]),a("br"),a("span",{staticClass:"line-number"},[n._v("6")]),a("br"),a("span",{staticClass:"line-number"},[n._v("7")]),a("br"),a("span",{staticClass:"line-number"},[n._v("8")]),a("br"),a("span",{staticClass:"line-number"},[n._v("9")]),a("br"),a("span",{staticClass:"line-number"},[n._v("10")]),a("br"),a("span",{staticClass:"line-number"},[n._v("11")]),a("br"),a("span",{staticClass:"line-number"},[n._v("12")]),a("br"),a("span",{staticClass:"line-number"},[n._v("13")]),a("br"),a("span",{staticClass:"line-number"},[n._v("14")]),a("br"),a("span",{staticClass:"line-number"},[n._v("15")]),a("br"),a("span",{staticClass:"line-number"},[n._v("16")]),a("br")])]),a("p",[n._v("闭包进阶示例2：")]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v('    func makeSuffixFunc(suffix string) func(string) string {\n    \treturn func(name string) string {\n    \t\tif !strings.HasSuffix(name, suffix) {\n    \t\t\treturn name + suffix\n    \t\t}\n    \t\treturn name\n    \t}\n    }\n    \n    func main() {\n    \tjpgFunc := makeSuffixFunc(".jpg")\n    \ttxtFunc := makeSuffixFunc(".txt")\n    \tfmt.Println(jpgFunc("test")) //test.jpg\n    \tfmt.Println(txtFunc("test")) //test.txt\n    }\n')])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br"),a("span",{staticClass:"line-number"},[n._v("5")]),a("br"),a("span",{staticClass:"line-number"},[n._v("6")]),a("br"),a("span",{staticClass:"line-number"},[n._v("7")]),a("br"),a("span",{staticClass:"line-number"},[n._v("8")]),a("br"),a("span",{staticClass:"line-number"},[n._v("9")]),a("br"),a("span",{staticClass:"line-number"},[n._v("10")]),a("br"),a("span",{staticClass:"line-number"},[n._v("11")]),a("br"),a("span",{staticClass:"line-number"},[n._v("12")]),a("br"),a("span",{staticClass:"line-number"},[n._v("13")]),a("br"),a("span",{staticClass:"line-number"},[n._v("14")]),a("br"),a("span",{staticClass:"line-number"},[n._v("15")]),a("br")])]),a("p",[n._v("闭包进阶示例3：")]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("    func calc(base int) (func(int) int, func(int) int) {\n    \tadd := func(i int) int {\n    \t\tbase += i\n    \t\treturn base\n    \t}\n    \n    \tsub := func(i int) int {\n    \t\tbase -= i\n    \t\treturn base\n    \t}\n    \treturn add, sub\n    }\n    \n    func main() {\n    \tf1, f2 := calc(10)\n    \tfmt.Println(f1(1), f2(2)) //11 9\n    \tfmt.Println(f1(3), f2(4)) //12 8\n    \tfmt.Println(f1(5), f2(6)) //13 7\n    }\n")])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br"),a("span",{staticClass:"line-number"},[n._v("5")]),a("br"),a("span",{staticClass:"line-number"},[n._v("6")]),a("br"),a("span",{staticClass:"line-number"},[n._v("7")]),a("br"),a("span",{staticClass:"line-number"},[n._v("8")]),a("br"),a("span",{staticClass:"line-number"},[n._v("9")]),a("br"),a("span",{staticClass:"line-number"},[n._v("10")]),a("br"),a("span",{staticClass:"line-number"},[n._v("11")]),a("br"),a("span",{staticClass:"line-number"},[n._v("12")]),a("br"),a("span",{staticClass:"line-number"},[n._v("13")]),a("br"),a("span",{staticClass:"line-number"},[n._v("14")]),a("br"),a("span",{staticClass:"line-number"},[n._v("15")]),a("br"),a("span",{staticClass:"line-number"},[n._v("16")]),a("br"),a("span",{staticClass:"line-number"},[n._v("17")]),a("br"),a("span",{staticClass:"line-number"},[n._v("18")]),a("br"),a("span",{staticClass:"line-number"},[n._v("19")]),a("br")])]),a("p",[n._v("闭包其实并不复杂，只要牢记"),a("code",[n._v("闭包=函数+引用环境")]),n._v("。")]),n._v(" "),a("h2",{attrs:{id:"defer语句"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#defer语句"}},[n._v("#")]),n._v(" defer语句")]),n._v(" "),a("p",[n._v("Go语言中的"),a("code",[n._v("defer")]),n._v("语句会将其后面跟随的语句进行延迟处理。在"),a("code",[n._v("defer")]),n._v("归属的函数即将返回时，将延迟处理的语句按"),a("code",[n._v("defer")]),n._v("定义的逆序进行执行，也就是说，先被"),a("code",[n._v("defer")]),n._v("的语句最后被执行，最后被"),a("code",[n._v("defer")]),n._v("的语句，最先被执行。")]),n._v(" "),a("p",[n._v("举个例子：")]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v('    func main() {\n    \tfmt.Println("start")\n    \tdefer fmt.Println(1)\n    \tdefer fmt.Println(2)\n    \tdefer fmt.Println(3)\n    \tfmt.Println("end")\n    }\n')])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br"),a("span",{staticClass:"line-number"},[n._v("5")]),a("br"),a("span",{staticClass:"line-number"},[n._v("6")]),a("br"),a("span",{staticClass:"line-number"},[n._v("7")]),a("br")])]),a("p",[n._v("输出结果：")]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("    start\n    end\n    3\n    2\n    1\n")])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br"),a("span",{staticClass:"line-number"},[n._v("5")]),a("br")])]),a("p",[n._v("由于"),a("code",[n._v("defer")]),n._v("语句延迟调用的特性，所以"),a("code",[n._v("defer")]),n._v("语句能非常方便的处理资源释放问题。比如：资源清理、文件关闭、解锁及记录时间等。")]),n._v(" "),a("h3",{attrs:{id:"defer执行时机"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#defer执行时机"}},[n._v("#")]),n._v(" defer执行时机")]),n._v(" "),a("p",[n._v("在Go语言的函数中"),a("code",[n._v("return")]),n._v("语句在底层并不是原子操作，它分为给返回值赋值和RET指令两步。而"),a("code",[n._v("defer")]),n._v("语句执行的时机就在返回值赋值操作后，RET指令执行前。具体如下图所示： "),a("img",{attrs:{src:"/go_img/defer.png",alt:"defer执行时机"}})]),n._v(" "),a("h3",{attrs:{id:"defer经典案例"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#defer经典案例"}},[n._v("#")]),n._v(" defer经典案例")]),n._v(" "),a("p",[n._v("阅读下面的代码，写出最后的打印结果。")]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("    func f1() int {\n    \tx := 5\n    \tdefer func() {\n    \t\tx++\n    \t}()\n    \treturn x\n    }\n    \n    func f2() (x int) {\n    \tdefer func() {\n    \t\tx++\n    \t}()\n    \treturn 5\n    }\n    \n    func f3() (y int) {\n    \tx := 5\n    \tdefer func() {\n    \t\tx++\n    \t}()\n    \treturn x\n    }\n    func f4() (x int) {\n    \tdefer func(x int) {\n    \t\tx++\n    \t}(x)\n    \treturn 5\n    }\n    func main() {\n    \tfmt.Println(f1())\n    \tfmt.Println(f2())\n    \tfmt.Println(f3())\n    \tfmt.Println(f4())\n    }\n")])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br"),a("span",{staticClass:"line-number"},[n._v("5")]),a("br"),a("span",{staticClass:"line-number"},[n._v("6")]),a("br"),a("span",{staticClass:"line-number"},[n._v("7")]),a("br"),a("span",{staticClass:"line-number"},[n._v("8")]),a("br"),a("span",{staticClass:"line-number"},[n._v("9")]),a("br"),a("span",{staticClass:"line-number"},[n._v("10")]),a("br"),a("span",{staticClass:"line-number"},[n._v("11")]),a("br"),a("span",{staticClass:"line-number"},[n._v("12")]),a("br"),a("span",{staticClass:"line-number"},[n._v("13")]),a("br"),a("span",{staticClass:"line-number"},[n._v("14")]),a("br"),a("span",{staticClass:"line-number"},[n._v("15")]),a("br"),a("span",{staticClass:"line-number"},[n._v("16")]),a("br"),a("span",{staticClass:"line-number"},[n._v("17")]),a("br"),a("span",{staticClass:"line-number"},[n._v("18")]),a("br"),a("span",{staticClass:"line-number"},[n._v("19")]),a("br"),a("span",{staticClass:"line-number"},[n._v("20")]),a("br"),a("span",{staticClass:"line-number"},[n._v("21")]),a("br"),a("span",{staticClass:"line-number"},[n._v("22")]),a("br"),a("span",{staticClass:"line-number"},[n._v("23")]),a("br"),a("span",{staticClass:"line-number"},[n._v("24")]),a("br"),a("span",{staticClass:"line-number"},[n._v("25")]),a("br"),a("span",{staticClass:"line-number"},[n._v("26")]),a("br"),a("span",{staticClass:"line-number"},[n._v("27")]),a("br"),a("span",{staticClass:"line-number"},[n._v("28")]),a("br"),a("span",{staticClass:"line-number"},[n._v("29")]),a("br"),a("span",{staticClass:"line-number"},[n._v("30")]),a("br"),a("span",{staticClass:"line-number"},[n._v("31")]),a("br"),a("span",{staticClass:"line-number"},[n._v("32")]),a("br"),a("span",{staticClass:"line-number"},[n._v("33")]),a("br"),a("span",{staticClass:"line-number"},[n._v("34")]),a("br")])]),a("h3",{attrs:{id:"defer面试题"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#defer面试题"}},[n._v("#")]),n._v(" defer面试题")]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v('    func calc(index string, a, b int) int {\n    \tret := a + b\n    \tfmt.Println(index, a, b, ret)\n    \treturn ret\n    }\n    \n    func main() {\n    \tx := 1\n    \ty := 2\n    \tdefer calc("AA", x, calc("A", x, y))\n    \tx = 10\n    \tdefer calc("BB", x, calc("B", x, y))\n    \ty = 20\n    }\n')])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br"),a("span",{staticClass:"line-number"},[n._v("5")]),a("br"),a("span",{staticClass:"line-number"},[n._v("6")]),a("br"),a("span",{staticClass:"line-number"},[n._v("7")]),a("br"),a("span",{staticClass:"line-number"},[n._v("8")]),a("br"),a("span",{staticClass:"line-number"},[n._v("9")]),a("br"),a("span",{staticClass:"line-number"},[n._v("10")]),a("br"),a("span",{staticClass:"line-number"},[n._v("11")]),a("br"),a("span",{staticClass:"line-number"},[n._v("12")]),a("br"),a("span",{staticClass:"line-number"},[n._v("13")]),a("br"),a("span",{staticClass:"line-number"},[n._v("14")]),a("br")])]),a("p",[n._v("问，上面代码的输出结果是？（提示：defer注册要延迟执行的函数时该函数所有的参数都需要确定其值）")]),n._v(" "),a("h2",{attrs:{id:"内置函数介绍"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#内置函数介绍"}},[n._v("#")]),n._v(" 内置函数介绍")]),n._v(" "),a("table",[a("thead",[a("tr",[a("th",[n._v("内置函数")]),n._v(" "),a("th",[n._v("介绍")])])]),n._v(" "),a("tbody",[a("tr",[a("td",[n._v("close")]),n._v(" "),a("td",[n._v("主要用来关闭channel")])]),n._v(" "),a("tr",[a("td",[n._v("len")]),n._v(" "),a("td",[n._v("用来求长度，比如string、array、slice、map、channel")])]),n._v(" "),a("tr",[a("td",[n._v("new")]),n._v(" "),a("td",[n._v("用来分配内存，主要用来分配值类型，比如int、struct。返回的是指针")])]),n._v(" "),a("tr",[a("td",[n._v("make")]),n._v(" "),a("td",[n._v("用来分配内存，主要用来分配引用类型，比如chan、map、slice")])]),n._v(" "),a("tr",[a("td",[n._v("append")]),n._v(" "),a("td",[n._v("用来追加元素到数组、slice中")])]),n._v(" "),a("tr",[a("td",[n._v("panic和recover")]),n._v(" "),a("td",[n._v("用来做错误处理")])])])]),n._v(" "),a("h3",{attrs:{id:"panic-recover"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#panic-recover"}},[n._v("#")]),n._v(" panic/recover")]),n._v(" "),a("p",[n._v("Go语言中目前（Go1.12）是没有异常机制，但是使用"),a("code",[n._v("panic/recover")]),n._v("模式来处理错误。 "),a("code",[n._v("panic")]),n._v("可以在任何地方引发，但"),a("code",[n._v("recover")]),n._v("只有在"),a("code",[n._v("defer")]),n._v("调用的函数中有效。 首先来看一个例子：")]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v('    func funcA() {\n    \tfmt.Println("func A")\n    }\n    \n    func funcB() {\n    \tpanic("panic in B")\n    }\n    \n    func funcC() {\n    \tfmt.Println("func C")\n    }\n    func main() {\n    \tfuncA()\n    \tfuncB()\n    \tfuncC()\n    }\n')])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br"),a("span",{staticClass:"line-number"},[n._v("5")]),a("br"),a("span",{staticClass:"line-number"},[n._v("6")]),a("br"),a("span",{staticClass:"line-number"},[n._v("7")]),a("br"),a("span",{staticClass:"line-number"},[n._v("8")]),a("br"),a("span",{staticClass:"line-number"},[n._v("9")]),a("br"),a("span",{staticClass:"line-number"},[n._v("10")]),a("br"),a("span",{staticClass:"line-number"},[n._v("11")]),a("br"),a("span",{staticClass:"line-number"},[n._v("12")]),a("br"),a("span",{staticClass:"line-number"},[n._v("13")]),a("br"),a("span",{staticClass:"line-number"},[n._v("14")]),a("br"),a("span",{staticClass:"line-number"},[n._v("15")]),a("br"),a("span",{staticClass:"line-number"},[n._v("16")]),a("br")])]),a("p",[n._v("输出：")]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("    func A\n    panic: panic in B\n    \n    goroutine 1 [running]:\n    main.funcB(...)\n            .../code/func/main.go:12\n    main.main()\n            .../code/func/main.go:20 +0x98\n")])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br"),a("span",{staticClass:"line-number"},[n._v("5")]),a("br"),a("span",{staticClass:"line-number"},[n._v("6")]),a("br"),a("span",{staticClass:"line-number"},[n._v("7")]),a("br"),a("span",{staticClass:"line-number"},[n._v("8")]),a("br")])]),a("p",[n._v("程序运行期间"),a("code",[n._v("funcB")]),n._v("中引发了"),a("code",[n._v("panic")]),n._v("导致程序崩溃，异常退出了。这个时候我们就可以通过"),a("code",[n._v("recover")]),n._v("将程序恢复回来，继续往后执行。")]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v('    func funcA() {\n    \tfmt.Println("func A")\n    }\n    \n    func funcB() {\n    \tdefer func() {\n    \t\terr := recover()\n    \t\t//如果程序出出现了panic错误,可以通过recover恢复过来\n    \t\tif err != nil {\n    \t\t\tfmt.Println("recover in B")\n    \t\t}\n    \t}()\n    \tpanic("panic in B")\n    }\n    \n    func funcC() {\n    \tfmt.Println("func C")\n    }\n    func main() {\n    \tfuncA()\n    \tfuncB()\n    \tfuncC()\n    }\n')])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br"),a("span",{staticClass:"line-number"},[n._v("5")]),a("br"),a("span",{staticClass:"line-number"},[n._v("6")]),a("br"),a("span",{staticClass:"line-number"},[n._v("7")]),a("br"),a("span",{staticClass:"line-number"},[n._v("8")]),a("br"),a("span",{staticClass:"line-number"},[n._v("9")]),a("br"),a("span",{staticClass:"line-number"},[n._v("10")]),a("br"),a("span",{staticClass:"line-number"},[n._v("11")]),a("br"),a("span",{staticClass:"line-number"},[n._v("12")]),a("br"),a("span",{staticClass:"line-number"},[n._v("13")]),a("br"),a("span",{staticClass:"line-number"},[n._v("14")]),a("br"),a("span",{staticClass:"line-number"},[n._v("15")]),a("br"),a("span",{staticClass:"line-number"},[n._v("16")]),a("br"),a("span",{staticClass:"line-number"},[n._v("17")]),a("br"),a("span",{staticClass:"line-number"},[n._v("18")]),a("br"),a("span",{staticClass:"line-number"},[n._v("19")]),a("br"),a("span",{staticClass:"line-number"},[n._v("20")]),a("br"),a("span",{staticClass:"line-number"},[n._v("21")]),a("br"),a("span",{staticClass:"line-number"},[n._v("22")]),a("br"),a("span",{staticClass:"line-number"},[n._v("23")]),a("br")])]),a("p",[a("strong",[n._v("注意：")])]),n._v(" "),a("ol",[a("li",[a("code",[n._v("recover()")]),n._v("必须搭配"),a("code",[n._v("defer")]),n._v("使用。")]),n._v(" "),a("li",[a("code",[n._v("defer")]),n._v("一定要在可能引发"),a("code",[n._v("panic")]),n._v("的语句之前定义。")])]),n._v(" "),a("h2",{attrs:{id:"练习题"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#练习题"}},[n._v("#")]),n._v(" 练习题")]),n._v(" "),a("ol",[a("li",[n._v("分金币")])]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v('    /*\n    你有50枚金币，需要分配给以下几个人：Matthew,Sarah,Augustus,Heidi,Emilie,Peter,Giana,Adriano,Aaron,Elizabeth。\n    分配规则如下：\n    a. 名字中每包含1个\'e\'或\'E\'分1枚金币\n    b. 名字中每包含1个\'i\'或\'I\'分2枚金币\n    c. 名字中每包含1个\'o\'或\'O\'分3枚金币\n    d: 名字中每包含1个\'u\'或\'U\'分4枚金币\n    写一个程序，计算每个用户分到多少金币，以及最后剩余多少金币？\n    程序结构如下，请实现 ‘dispatchCoin’ 函数\n    */\n    var (\n    \tcoins = 50\n    \tusers = []string{\n    \t\t"Matthew", "Sarah", "Augustus", "Heidi", "Emilie", "Peter", "Giana", "Adriano", "Aaron", "Elizabeth",\n    \t}\n    \tdistribution = make(map[string]int, len(users))\n    )\n    \n    func main() {\n    \tleft := dispatchCoin()\n    \tfmt.Println("剩下：", left)\n    }\n')])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br"),a("span",{staticClass:"line-number"},[n._v("5")]),a("br"),a("span",{staticClass:"line-number"},[n._v("6")]),a("br"),a("span",{staticClass:"line-number"},[n._v("7")]),a("br"),a("span",{staticClass:"line-number"},[n._v("8")]),a("br"),a("span",{staticClass:"line-number"},[n._v("9")]),a("br"),a("span",{staticClass:"line-number"},[n._v("10")]),a("br"),a("span",{staticClass:"line-number"},[n._v("11")]),a("br"),a("span",{staticClass:"line-number"},[n._v("12")]),a("br"),a("span",{staticClass:"line-number"},[n._v("13")]),a("br"),a("span",{staticClass:"line-number"},[n._v("14")]),a("br"),a("span",{staticClass:"line-number"},[n._v("15")]),a("br"),a("span",{staticClass:"line-number"},[n._v("16")]),a("br"),a("span",{staticClass:"line-number"},[n._v("17")]),a("br"),a("span",{staticClass:"line-number"},[n._v("18")]),a("br"),a("span",{staticClass:"line-number"},[n._v("19")]),a("br"),a("span",{staticClass:"line-number"},[n._v("20")]),a("br"),a("span",{staticClass:"line-number"},[n._v("21")]),a("br"),a("span",{staticClass:"line-number"},[n._v("22")]),a("br")])])])}),[],!1,null,null,null);s.default=e.exports}}]);