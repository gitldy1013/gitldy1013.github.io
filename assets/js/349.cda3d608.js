(window.webpackJsonp=window.webpackJsonp||[]).push([[349],{1046:function(s,a,e){"use strict";e.r(a);var t=e(5),n=Object(t.a)({},(function(){var s=this,a=s.$createElement,e=s._self._c||a;return e("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[e("h1",{attrs:{id:"使用-gitlab-持续集成"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#使用-gitlab-持续集成"}},[s._v("#")]),s._v(" 使用 GitLab 持续集成")]),s._v(" "),e("h2",{attrs:{id:"简介"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#简介"}},[s._v("#")]),s._v(" 简介")]),s._v(" "),e("p",[s._v("从 GitLab 8.0 开始，GitLab CI 就已经集成在 GitLab 中，我们只要在项目中添加一个 "),e("code",[s._v(".gitlab-ci.yml")]),s._v(" 文件，然后添加一个 Runner，即可进行持续集成。 而且随着 GitLab 的升级，GitLab CI 变得越来越强大。")]),s._v(" "),e("h2",{attrs:{id:"概念"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#概念"}},[s._v("#")]),s._v(" 概念")]),s._v(" "),e("h3",{attrs:{id:"pipeline"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#pipeline"}},[s._v("#")]),s._v(" Pipeline")]),s._v(" "),e("p",[s._v("一次 Pipeline 其实相当于一次构建任务，里面可以包含多个流程，如安装依赖、运行测试、编译、部署测试服务器、部署生产服务器等流程。")]),s._v(" "),e("p",[s._v("任何提交或者 Merge Request 的合并都可以触发 Pipeline，如下图所示：")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("    +------------------+           +----------------+\n    |                  |  trigger  |                |\n    |   Commit / MR    +----------\x3e+    Pipeline    |\n    |                  |           |                |\n    +------------------+           +----------------+\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br")])]),e("h3",{attrs:{id:"stages"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#stages"}},[s._v("#")]),s._v(" Stages")]),s._v(" "),e("p",[s._v("Stages 表示构建阶段，说白了就是上面提到的流程。我们可以在一次 Pipeline 中定义多个 Stages，这些 Stages 会有以下特点：")]),s._v(" "),e("ul",[e("li",[s._v("所有 Stages 会按照顺序运行，即当一个 Stage 完成后，下一个 Stage 才会开始")]),s._v(" "),e("li",[s._v("只有当所有 Stages 完成后，该构建任务 (Pipeline) 才会成功")]),s._v(" "),e("li",[s._v("如果任何一个 Stage 失败，那么后面的 Stages 不会执行，该构建任务 (Pipeline) 失败")])]),s._v(" "),e("p",[s._v("因此，Stages 和 Pipeline 的关系就是：")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("    +--------------------------------------------------------+\n    |                                                        |\n    |  Pipeline                                              |\n    |                                                        |\n    |  +-----------+     +------------+      +------------+  |\n    |  |  Stage 1  |----\x3e|   Stage 2  |-----\x3e|   Stage 3  |  |\n    |  +-----------+     +------------+      +------------+  |\n    |                                                        |\n    +--------------------------------------------------------+\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br")])]),e("h3",{attrs:{id:"jobs"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#jobs"}},[s._v("#")]),s._v(" Jobs")]),s._v(" "),e("p",[s._v("Jobs 表示构建工作，表示某个 Stage 里面执行的工作。我们可以在 Stages 里面定义多个 Jobs，这些 Jobs 会有以下特点：")]),s._v(" "),e("ul",[e("li",[s._v("相同 Stage 中的 Jobs 会并行执行")]),s._v(" "),e("li",[s._v("相同 Stage 中的 Jobs 都执行成功时，该 Stage 才会成功")]),s._v(" "),e("li",[s._v("如果任何一个 Job 失败，那么该 Stage 失败，即该构建任务 (Pipeline) 失败")])]),s._v(" "),e("p",[s._v("所以，Jobs 和 Stage 的关系图就是：")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("    +------------------------------------------+\n    |                                          |\n    |  Stage 1                                 |\n    |                                          |\n    |  +---------+  +---------+  +---------+   |\n    |  |  Job 1  |  |  Job 2  |  |  Job 3  |   |\n    |  +---------+  +---------+  +---------+   |\n    |                                          |\n    +------------------------------------------+\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br")])])])}),[],!1,null,null,null);a.default=n.exports}}]);