(window.webpackJsonp=window.webpackJsonp||[]).push([[593],{1290:function(t,e,o){"use strict";o.r(e);var r=o(5),a=Object(r.a)({},(function(){var t=this,e=t.$createElement,o=t._self._c||e;return o("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[o("h1",{attrs:{id:"apache-dubbo-zookeeper"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#apache-dubbo-zookeeper"}},[t._v("#")]),t._v(" Apache Dubbo Zookeeper")]),t._v(" "),o("p",[t._v("目前市场上主流的 "),o("strong",[t._v("第二套微服务架构解决方案：Spring Boot + Dubbo + Zookeeper")])]),t._v(" "),o("ul",[o("li",[t._v("Apache Dubbo (incubating) |ˈdʌbəʊ| 是一款高性能、轻量级的开源 Java RPC 框架。")]),t._v(" "),o("li",[t._v("ZooKeeper 是一种分布式协调服务，用于管理大型主机。在分布式环境中协调和管理服务是一个复杂的过程。")])]),t._v(" "),o("h2",{attrs:{id:"分布式协调框架-zookeeper"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#分布式协调框架-zookeeper"}},[t._v("#")]),t._v(" 分布式协调框架 Zookeeper")]),t._v(" "),o("p",[t._v("ZooKeeper 是一种分布式协调服务，用于管理大型主机。在分布式环境中协调和管理服务是一个复杂的过程。ZooKeeper 通过其简单的架构和 API 解决了这个问题。ZooKeeper 允许开发人员专注于核心应用程序逻辑，而不必担心应用程序的分布式特性。")]),t._v(" "),o("p",[o("RouterLink",{attrs:{to:"/zh/apache-dubbo-zookeeper/"}},[o("strong",[t._v("资料")])])],1),t._v(" "),o("h2",{attrs:{id:"高性能-java-rpc-框架-dubbo"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#高性能-java-rpc-框架-dubbo"}},[t._v("#")]),t._v(" 高性能 Java RPC 框架 Dubbo")]),t._v(" "),o("p",[t._v("Apache Dubbo (incubating) |ˈdʌbəʊ| 是一款高性能、轻量级的开源 Java RPC 分布式服务框架，它提供了三大核心能力：面向接口的远程方法调用，智能容错和负载均衡，以及服务自动注册和发现。她最大的特点是按照分层的方式来架构，使用这种方式可以使各个层之间解耦合（或者最大限度地松耦合）。从服务模型的角度来看，Dubbo 采用的是一种非常简单的模型，要么是提供方提供服务，要么是消费方消费服务，所以基于这一点可以抽象出服务提供方（Provider）和服务消费方（Consumer）两个角色。")]),t._v(" "),o("p",[o("RouterLink",{attrs:{to:"/zh/apache-dubbo-rpc/"}},[o("strong",[t._v("资料")])])],1),t._v(" "),o("h2",{attrs:{id:"开发前的准备"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#开发前的准备"}},[t._v("#")]),t._v(" 开发前的准备")]),t._v(" "),o("p",[t._v("正式开发之前咱们先学习一下什么是 "),o("strong",[t._v("敏捷开发")]),t._v(" 和 "),o("strong",[t._v("XP 极限编程")]),t._v("，在实际工作中我们都会采用一些 "),o("strong",[t._v("编程方法论")]),t._v(" 给我们指引方向，让我们少走弯路。")]),t._v(" "),o("p",[o("RouterLink",{attrs:{to:"/zh/apache-dubbo-prepare/"}},[o("strong",[t._v("资料")])])],1),t._v(" "),o("h2",{attrs:{id:"持续集成与持续交付"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#持续集成与持续交付"}},[t._v("#")]),t._v(" 持续集成与持续交付")]),t._v(" "),o("p",[t._v("互联网软件的开发和发布，已经形成了一套标准流程，最重要的组成部分就是持续集成（Continuous integration，简称 CI）")]),t._v(" "),o("ul",[o("li",[t._v("持续集成指的是，频繁地（一天多次）将代码集成到主干")]),t._v(" "),o("li",[t._v("持续交付（Continuous delivery）指的是，频繁地将软件的新版本，交付给质量团队或者用户，以供评审。如果评审通过，代码就进入生产阶段。")])]),t._v(" "),o("p",[o("RouterLink",{attrs:{to:"/zh/apache-dubbo-ci/"}},[o("strong",[t._v("资料")])])],1),t._v(" "),o("h2",{attrs:{id:"正式进入开发"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#正式进入开发"}},[t._v("#")]),t._v(" 正式进入开发")]),t._v(" "),o("p",[t._v("该综合练习项目是将之前的 "),o("RouterLink",{attrs:{to:"/zh/guide/走向单体地狱.html#走向单体地狱"}},[o("strong",[t._v("走向单体地狱")])]),t._v(" MyShop 从传统的 "),o("strong",[t._v("SSM")]),t._v(" 项目改造成基于 Spring Boot + Dubbo + Zookeeper 的微服务架构项目，旨在帮助大家更好的理解 "),o("strong",[t._v("架构是演化而来的，不是设计出来的")]),t._v(" 思想；当传统方式已经不能满足我们的需求时，我们就需要寻找新的解决方案了；")],1),t._v(" "),o("p",[o("RouterLink",{attrs:{to:"/zh/apache-dubbo-codeing/"}},[o("strong",[t._v("资料")])])],1)])}),[],!1,null,null,null);e.default=a.exports}}]);