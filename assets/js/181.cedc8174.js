(window.webpackJsonp=window.webpackJsonp||[]).push([[181],{878:function(n,s,e){"use strict";e.r(s);var a=e(5),t=Object(a.a)({},(function(){var n=this,s=n.$createElement,e=n._self._c||s;return e("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[e("h1",{attrs:{id:"ribbon实现负载均衡"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#ribbon实现负载均衡"}},[n._v("#")]),n._v(" Ribbon实现负载均衡")]),n._v(" "),e("p",[n._v("Ribbon目前已经进入了维护模式，但是目前主流还是使用Ribbon")]),n._v(" "),e("p",[n._v("Spring Cloud想通过LoadBalancer用于替换Ribbon")]),n._v(" "),e("h2",{attrs:{id:"概念"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#概念"}},[n._v("#")]),n._v(" 概念")]),n._v(" "),e("p",[n._v("Spring Cloud Ribbon是基于Netflix Ribbon实现的一套客户端，负载均衡的工具")]),n._v(" "),e("p",[n._v("简单的说，Ribbon是NetFlix发布的开源项目，主要功能是提供客户端的软件负载均衡算法和服务调用。Ribbon客户端组件提供了一系列完善的配置项如连接超时，重试等。简单的说，就是在配置文件中列出Load Balancer（简称LB）后面所有的机器，Ribbon会自动的帮助你基于某种规则（如简单轮询，随机连接等）去连接这些机器。我们很容易使用Ribbon实现自定义的负载均衡算法。")]),n._v(" "),e("h2",{attrs:{id:"lb负载均衡是什么"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#lb负载均衡是什么"}},[n._v("#")]),n._v(" LB负载均衡是什么")]),n._v(" "),e("p",[n._v("Load Balance，简单来说就是将用户的请求平摊的分配到多个服务上，从而达到系统的HA（高可用）。常见的负载均衡有软件Nginx，LVS，硬件F5等。")]),n._v(" "),e("ul",[e("li",[n._v("集中式LB：即在服务的消费方和提供方之间使用独立的LB设施（可以是硬件，如F5，也可以是软件，如Nginx），由该设施负责把访问请求通过某种策略转发至服务的提供方")]),n._v(" "),e("li",[n._v("进程内LB：将LB逻辑集成到消费方，消费方从服务注册中心获知有哪些地址可用，然后自己再从这些地址中选择出一个合适的服务器。Ribbon就属于进程内LB，它只是一个类库，集成于消费方进程，消费方通过它来获取到服务提供方的地址。")])]),n._v(" "),e("h2",{attrs:{id:"ribbon本地负载均衡客户端-vs-nginx服务端负载均衡"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#ribbon本地负载均衡客户端-vs-nginx服务端负载均衡"}},[n._v("#")]),n._v(" Ribbon本地负载均衡客户端 VS Nginx服务端负载均衡")]),n._v(" "),e("p",[n._v("Nginx是服务器负载均衡，客户端所有的请求都会交给nginx，然后由nginx实现转发请求，即负载均衡是由服务端实现的。")]),n._v(" "),e("p",[n._v("Ribbon本地负载均衡，在调用微服务接口的时候，会在注册中心上获取注册信息服务列表之后，缓存到JVM本地，从而在本地实现RPC远程调用的技术。")]),n._v(" "),e("p",[n._v("一句话就是：RIbbon = 负载均衡 + RestTemplate调用")]),n._v(" "),e("h2",{attrs:{id:"ribbon工作原理"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#ribbon工作原理"}},[n._v("#")]),n._v(" Ribbon工作原理")]),n._v(" "),e("p",[n._v("Ribbon其实就是一个软负载均衡的客户端组件，它可以和其它所需请求的客户端结合使用，和Eureka结合只是其中的一个实例。")]),n._v(" "),e("p",[e("img",{attrs:{src:"/images/image-20200408104948953.png",alt:"image-20200408104948953"}})]),n._v(" "),e("p",[n._v("Ribbon在工作时分成两步")]),n._v(" "),e("ul",[e("li",[n._v("首先先选择EurekaServer，它优先选择在同一个区域内负载较少的Server")]),n._v(" "),e("li",[n._v("再根据用户的指定的策略，从Server取到服务注册列表中选择一个地址")]),n._v(" "),e("li",[n._v("其中Ribbon提供了多种策略：比如轮询，随机和根据响应时间加权")])]),n._v(" "),e("h2",{attrs:{id:"引入ribbon"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#引入ribbon"}},[n._v("#")]),n._v(" 引入Ribbon")]),n._v(" "),e("p",[n._v("新版的Eureka已经默认引入Ribbon了，不需要额外引入")]),n._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("\x3c!--Eureka客户端--\x3e\n<dependency>\n    <groupId>org.springframework.cloud</groupId>\n    <artifactId>spring-cloud-starter-netflix-eureka-client</artifactId>\n</dependency>\n")])]),n._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[n._v("1")]),e("br"),e("span",{staticClass:"line-number"},[n._v("2")]),e("br"),e("span",{staticClass:"line-number"},[n._v("3")]),e("br"),e("span",{staticClass:"line-number"},[n._v("4")]),e("br"),e("span",{staticClass:"line-number"},[n._v("5")]),e("br")])]),e("p",[e("img",{attrs:{src:"/images/image-20200408105549983.png",alt:"image-20200408105549983"}})]),n._v(" "),e("h2",{attrs:{id:"resttemplate"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#resttemplate"}},[n._v("#")]),n._v(" RestTemplate")]),n._v(" "),e("p",[n._v("主要方法为：")]),n._v(" "),e("ul",[e("li",[n._v("reseTemplate.getForObject")]),n._v(" "),e("li",[n._v("reseTemplate.posttForObject")])]),n._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v('    @GetMapping("/consumer/payment/create")\n    public CommonResult<Payment> create(Payment payment) {\n        return restTemplate.postForObject(PAYMENT_URL + "/payment/create", payment, CommonResult.class);\n    }\n\n    @GetMapping("/consumer/payment/get/{id}")\n    public CommonResult<Payment> getPayment(@PathVariable("id") Long id) {\n        return restTemplate.getForObject(PAYMENT_URL + "/payment/get/" + id, CommonResult.class);\n    }\n    @GetMapping("/consumer/payment/getForEntity/{id}")\n    public CommonResult<Payment> getForEntity(@PathVariable("id") Long id) {\n        ResponseEntity<CommonResult> entity = restTemplate.getForEntity(PAYMENT_URL + "/payment/get/" + id, CommonResult.class);\n        if (entity.getStatusCode().is2xxSuccessful()){\n            return entity.getBody();\n        }else {\n            return new CommonResult<>(444,"操作失败");\n        }\n    }\n')])]),n._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[n._v("1")]),e("br"),e("span",{staticClass:"line-number"},[n._v("2")]),e("br"),e("span",{staticClass:"line-number"},[n._v("3")]),e("br"),e("span",{staticClass:"line-number"},[n._v("4")]),e("br"),e("span",{staticClass:"line-number"},[n._v("5")]),e("br"),e("span",{staticClass:"line-number"},[n._v("6")]),e("br"),e("span",{staticClass:"line-number"},[n._v("7")]),e("br"),e("span",{staticClass:"line-number"},[n._v("8")]),e("br"),e("span",{staticClass:"line-number"},[n._v("9")]),e("br"),e("span",{staticClass:"line-number"},[n._v("10")]),e("br"),e("span",{staticClass:"line-number"},[n._v("11")]),e("br"),e("span",{staticClass:"line-number"},[n._v("12")]),e("br"),e("span",{staticClass:"line-number"},[n._v("13")]),e("br"),e("span",{staticClass:"line-number"},[n._v("14")]),e("br"),e("span",{staticClass:"line-number"},[n._v("15")]),e("br"),e("span",{staticClass:"line-number"},[n._v("16")]),e("br"),e("span",{staticClass:"line-number"},[n._v("17")]),e("br"),e("span",{staticClass:"line-number"},[n._v("18")]),e("br")])]),e("h2",{attrs:{id:"ribbon核心组件irule"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#ribbon核心组件irule"}},[n._v("#")]),n._v(" Ribbon核心组件IRule")]),n._v(" "),e("p",[n._v("Ribbon默认是使用轮询作为负载均衡算法")]),n._v(" "),e("p",[n._v("IRule根据特定算法从服务列表中选取一个要访问的服务，IRule是一个接口")]),n._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("public interface IRule {\n    Server choose(Object var1);\n\n    void setLoadBalancer(ILoadBalancer var1);\n\n    ILoadBalancer getLoadBalancer();\n}\n")])]),n._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[n._v("1")]),e("br"),e("span",{staticClass:"line-number"},[n._v("2")]),e("br"),e("span",{staticClass:"line-number"},[n._v("3")]),e("br"),e("span",{staticClass:"line-number"},[n._v("4")]),e("br"),e("span",{staticClass:"line-number"},[n._v("5")]),e("br"),e("span",{staticClass:"line-number"},[n._v("6")]),e("br"),e("span",{staticClass:"line-number"},[n._v("7")]),e("br")])]),e("p",[n._v("然后对该接口，进行特定的实现")]),n._v(" "),e("p",[e("img",{attrs:{src:"/images/image-20200408111538902.png",alt:"image-20200408111538902"}})]),n._v(" "),e("h3",{attrs:{id:"负载均衡算法"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#负载均衡算法"}},[n._v("#")]),n._v(" 负载均衡算法")]),n._v(" "),e("p",[n._v("IRule的实现主要有以下七种")]),n._v(" "),e("ul",[e("li",[n._v("RoundRobinRule：轮询")]),n._v(" "),e("li",[n._v("RandomRule：随机")]),n._v(" "),e("li",[n._v("RetryRUle：先按照RoundRobinRule的策略获取服务，如果获取服务失败则在指定时间内会进行重试，获取可用服务")]),n._v(" "),e("li",[n._v("WeightedResponseTimeRule：对RoundRobinRule的扩展，响应速度越快的实例选择的权重越大，越容易被选择")]),n._v(" "),e("li",[n._v("BestAvailableRule：会先过滤掉由于多次访问故障而处于短路跳闸状态的服务，然后选择一个并发量最小的服务")]),n._v(" "),e("li",[n._v("AvailabilityFilteringRule：先过滤掉故障实例，在选择并发较小的实例")]),n._v(" "),e("li",[n._v("ZoneAvoidanceRule：默认规则，符合判断server所在区域的性能和server的可用性选择服务器")])]),n._v(" "),e("h3",{attrs:{id:"默认负载均衡算法替换"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#默认负载均衡算法替换"}},[n._v("#")]),n._v(" 默认负载均衡算法替换")]),n._v(" "),e("p",[n._v("官网警告：自定义的配置类不能放在@ComponentScanner所扫描的当前包下以及子包下，否者我们自定义的这个配置类就会被所有的Ribbon客户端所共享，达不到特殊化定制的目的了")]),n._v(" "),e("p",[e("img",{attrs:{src:"/images/image-20200408112458892.png",alt:"image-20200408112458892"}})]),n._v(" "),e("p",[n._v("然后我们创建自定义Rule接口")]),n._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("@Configuration\npublic class MySelfRule {\n    @Bean\n    public IRule myRule(){\n        return new RandomRule();//自定义为随机\n    }\n}\n")])]),n._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[n._v("1")]),e("br"),e("span",{staticClass:"line-number"},[n._v("2")]),e("br"),e("span",{staticClass:"line-number"},[n._v("3")]),e("br"),e("span",{staticClass:"line-number"},[n._v("4")]),e("br"),e("span",{staticClass:"line-number"},[n._v("5")]),e("br"),e("span",{staticClass:"line-number"},[n._v("6")]),e("br"),e("span",{staticClass:"line-number"},[n._v("7")]),e("br")])]),e("p",[n._v("在主启动类中，添加"),e("code",[n._v("@RibbonClient")])]),n._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v('@SpringBootApplication\n@EnableDiscoveryClient\n@RibbonClient(name="CLOUD-PAYMENT-SERVICE",configuration = MySelfRule.class)\npublic class OrderMain80 {\n    public static void main(String[] args) {\n        SpringApplication.run(OrderMain80.class,args);\n    }\n}\n')])]),n._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[n._v("1")]),e("br"),e("span",{staticClass:"line-number"},[n._v("2")]),e("br"),e("span",{staticClass:"line-number"},[n._v("3")]),e("br"),e("span",{staticClass:"line-number"},[n._v("4")]),e("br"),e("span",{staticClass:"line-number"},[n._v("5")]),e("br"),e("span",{staticClass:"line-number"},[n._v("6")]),e("br"),e("span",{staticClass:"line-number"},[n._v("7")]),e("br"),e("span",{staticClass:"line-number"},[n._v("8")]),e("br")])]),e("h2",{attrs:{id:"手写ribbon负载均衡算法"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#手写ribbon负载均衡算法"}},[n._v("#")]),n._v(" 手写Ribbon负载均衡算法")]),n._v(" "),e("h3",{attrs:{id:"原理"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#原理"}},[n._v("#")]),n._v(" 原理")]),n._v(" "),e("p",[n._v("负载均衡算法：rest接口第几次请求数 % 服务器集群总数量 = 实际调用服务器位置下标，每次服务重启后rest接口计数从1开始。")]),n._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("假设现在有2台机器，同时 List = 2 instance（也就是服务注册列表中，有两台）\n1 % 2 = 1 -> index = list.get(1)\n\n2 % 2 = 0 -> index = list.get(0)\n\n3 % 2 = 1 -> index = list.get(1)\n\n....\n")])]),n._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[n._v("1")]),e("br"),e("span",{staticClass:"line-number"},[n._v("2")]),e("br"),e("span",{staticClass:"line-number"},[n._v("3")]),e("br"),e("span",{staticClass:"line-number"},[n._v("4")]),e("br"),e("span",{staticClass:"line-number"},[n._v("5")]),e("br"),e("span",{staticClass:"line-number"},[n._v("6")]),e("br"),e("span",{staticClass:"line-number"},[n._v("7")]),e("br"),e("span",{staticClass:"line-number"},[n._v("8")]),e("br")])]),e("p",[n._v("这就是轮询的原理，即")]),n._v(" "),e("p",[e("img",{attrs:{src:"/images/image-20200408114805042.png",alt:"image-20200408114805042"}})]),n._v(" "),e("h3",{attrs:{id:"源码"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#源码"}},[n._v("#")]),n._v(" 源码")]),n._v(" "),e("p",[n._v("我们查看RandomRule的源码发现，其实内部就是利用的取余的技术，同时为了保证同步机制，还是使用了AtomicInteger原子整型类")]),n._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v('public class RandomRule extends AbstractLoadBalancerRule {\n    public RandomRule() {\n    }\n\n    @SuppressWarnings({"RCN_REDUNDANT_NULLCHECK_OF_NULL_VALUE"})\n    public Server choose(ILoadBalancer lb, Object key) {\n        if (lb == null) {\n            return null;\n        } else {\n            Server server = null;\n\n            while(server == null) {\n                if (Thread.interrupted()) {\n                    return null;\n                }\n\n                List<Server> upList = lb.getReachableServers();\n                List<Server> allList = lb.getAllServers();\n                int serverCount = allList.size();\n                if (serverCount == 0) {\n                    return null;\n                }\n\n                int index = this.chooseRandomInt(serverCount);\n                server = (Server)upList.get(index);\n                if (server == null) {\n                    Thread.yield();\n                } else {\n                    if (server.isAlive()) {\n                        return server;\n                    }\n\n                    server = null;\n                    Thread.yield();\n                }\n            }\n\n            return server;\n        }\n    }\n\n    protected int chooseRandomInt(int serverCount) {\n        return ThreadLocalRandom.current().nextInt(serverCount);\n    }\n\n    public Server choose(Object key) {\n        return this.choose(this.getLoadBalancer(), key);\n    }\n\n    public void initWithNiwsConfig(IClientConfig clientConfig) {\n    }\n}\n')])]),n._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[n._v("1")]),e("br"),e("span",{staticClass:"line-number"},[n._v("2")]),e("br"),e("span",{staticClass:"line-number"},[n._v("3")]),e("br"),e("span",{staticClass:"line-number"},[n._v("4")]),e("br"),e("span",{staticClass:"line-number"},[n._v("5")]),e("br"),e("span",{staticClass:"line-number"},[n._v("6")]),e("br"),e("span",{staticClass:"line-number"},[n._v("7")]),e("br"),e("span",{staticClass:"line-number"},[n._v("8")]),e("br"),e("span",{staticClass:"line-number"},[n._v("9")]),e("br"),e("span",{staticClass:"line-number"},[n._v("10")]),e("br"),e("span",{staticClass:"line-number"},[n._v("11")]),e("br"),e("span",{staticClass:"line-number"},[n._v("12")]),e("br"),e("span",{staticClass:"line-number"},[n._v("13")]),e("br"),e("span",{staticClass:"line-number"},[n._v("14")]),e("br"),e("span",{staticClass:"line-number"},[n._v("15")]),e("br"),e("span",{staticClass:"line-number"},[n._v("16")]),e("br"),e("span",{staticClass:"line-number"},[n._v("17")]),e("br"),e("span",{staticClass:"line-number"},[n._v("18")]),e("br"),e("span",{staticClass:"line-number"},[n._v("19")]),e("br"),e("span",{staticClass:"line-number"},[n._v("20")]),e("br"),e("span",{staticClass:"line-number"},[n._v("21")]),e("br"),e("span",{staticClass:"line-number"},[n._v("22")]),e("br"),e("span",{staticClass:"line-number"},[n._v("23")]),e("br"),e("span",{staticClass:"line-number"},[n._v("24")]),e("br"),e("span",{staticClass:"line-number"},[n._v("25")]),e("br"),e("span",{staticClass:"line-number"},[n._v("26")]),e("br"),e("span",{staticClass:"line-number"},[n._v("27")]),e("br"),e("span",{staticClass:"line-number"},[n._v("28")]),e("br"),e("span",{staticClass:"line-number"},[n._v("29")]),e("br"),e("span",{staticClass:"line-number"},[n._v("30")]),e("br"),e("span",{staticClass:"line-number"},[n._v("31")]),e("br"),e("span",{staticClass:"line-number"},[n._v("32")]),e("br"),e("span",{staticClass:"line-number"},[n._v("33")]),e("br"),e("span",{staticClass:"line-number"},[n._v("34")]),e("br"),e("span",{staticClass:"line-number"},[n._v("35")]),e("br"),e("span",{staticClass:"line-number"},[n._v("36")]),e("br"),e("span",{staticClass:"line-number"},[n._v("37")]),e("br"),e("span",{staticClass:"line-number"},[n._v("38")]),e("br"),e("span",{staticClass:"line-number"},[n._v("39")]),e("br"),e("span",{staticClass:"line-number"},[n._v("40")]),e("br"),e("span",{staticClass:"line-number"},[n._v("41")]),e("br"),e("span",{staticClass:"line-number"},[n._v("42")]),e("br"),e("span",{staticClass:"line-number"},[n._v("43")]),e("br"),e("span",{staticClass:"line-number"},[n._v("44")]),e("br"),e("span",{staticClass:"line-number"},[n._v("45")]),e("br"),e("span",{staticClass:"line-number"},[n._v("46")]),e("br"),e("span",{staticClass:"line-number"},[n._v("47")]),e("br"),e("span",{staticClass:"line-number"},[n._v("48")]),e("br"),e("span",{staticClass:"line-number"},[n._v("49")]),e("br"),e("span",{staticClass:"line-number"},[n._v("50")]),e("br"),e("span",{staticClass:"line-number"},[n._v("51")]),e("br"),e("span",{staticClass:"line-number"},[n._v("52")]),e("br")])]),e("h3",{attrs:{id:"手写负载均衡算法"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#手写负载均衡算法"}},[n._v("#")]),n._v(" 手写负载均衡算法")]),n._v(" "),e("p",[n._v("原理 + JUC（CAS+自旋锁）")]),n._v(" "),e("p",[n._v("首先需要在RestTemplate的配置上将 @LoadBalanced注解删除")]),n._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("    @Bean\n    //@LoadBalanced 赋予RestTemplate负载均衡的能力\n    public RestTemplate getRestTemplate() {\n        return new RestTemplate();\n    }\n")])]),n._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[n._v("1")]),e("br"),e("span",{staticClass:"line-number"},[n._v("2")]),e("br"),e("span",{staticClass:"line-number"},[n._v("3")]),e("br"),e("span",{staticClass:"line-number"},[n._v("4")]),e("br"),e("span",{staticClass:"line-number"},[n._v("5")]),e("br")])]),e("p",[n._v("然后创建一个LoadBalanced接口")]),n._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("/**\n * 自定义负载均衡算法\n * @Author: TianTian\n * @Date: 2020/3/7 19:53\n */\npublic interface LoadBalancer {\n    // 获取注册的一个实例\n    ServiceInstance instances(List<ServiceInstance> serviceInstances);\n}\n")])]),n._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[n._v("1")]),e("br"),e("span",{staticClass:"line-number"},[n._v("2")]),e("br"),e("span",{staticClass:"line-number"},[n._v("3")]),e("br"),e("span",{staticClass:"line-number"},[n._v("4")]),e("br"),e("span",{staticClass:"line-number"},[n._v("5")]),e("br"),e("span",{staticClass:"line-number"},[n._v("6")]),e("br"),e("span",{staticClass:"line-number"},[n._v("7")]),e("br"),e("span",{staticClass:"line-number"},[n._v("8")]),e("br"),e("span",{staticClass:"line-number"},[n._v("9")]),e("br")])]),e("p",[n._v("创建一个实现类，首先LoadBalanced接口")]),n._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v('@Component\npublic class MyLB implements LoadBalancer {\n\n    // 创建原子整型类\n    private AtomicInteger atomicInteger = new AtomicInteger(0);\n\n    /**\n     * 获取Rest调用的次数\n     * @return\n     */\n    public final int getAndIncrement(){\n        int current;\n        int next;\n        // 自旋锁\n        do{\n            // 获取当前值\n            current=this.atomicInteger.get();\n\n            /*2147483647:整型最大值*/\n            // 发生越界，从0开始计数\n            next= current >=2147483647 ? 0:current+1;\n\n            // 比较并交换\n        }while (!this.atomicInteger.compareAndSet(current,next));\n\n        System.out.println("******第几次访问next"+next);\n        return next;\n    }\n\n    //负载均衡算法：第几次请求%服务器总数量=实际访问。服务每次启动从1开始\n    @Override\n    public ServiceInstance instances(List<ServiceInstance> serviceInstances) {\n\n        // 获取当前计数 模  实例总数\n        int index= getAndIncrement() % serviceInstances.size();\n\n        // 返回选择的实例\n        return serviceInstances.get(index);\n    }\n}\n')])]),n._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[n._v("1")]),e("br"),e("span",{staticClass:"line-number"},[n._v("2")]),e("br"),e("span",{staticClass:"line-number"},[n._v("3")]),e("br"),e("span",{staticClass:"line-number"},[n._v("4")]),e("br"),e("span",{staticClass:"line-number"},[n._v("5")]),e("br"),e("span",{staticClass:"line-number"},[n._v("6")]),e("br"),e("span",{staticClass:"line-number"},[n._v("7")]),e("br"),e("span",{staticClass:"line-number"},[n._v("8")]),e("br"),e("span",{staticClass:"line-number"},[n._v("9")]),e("br"),e("span",{staticClass:"line-number"},[n._v("10")]),e("br"),e("span",{staticClass:"line-number"},[n._v("11")]),e("br"),e("span",{staticClass:"line-number"},[n._v("12")]),e("br"),e("span",{staticClass:"line-number"},[n._v("13")]),e("br"),e("span",{staticClass:"line-number"},[n._v("14")]),e("br"),e("span",{staticClass:"line-number"},[n._v("15")]),e("br"),e("span",{staticClass:"line-number"},[n._v("16")]),e("br"),e("span",{staticClass:"line-number"},[n._v("17")]),e("br"),e("span",{staticClass:"line-number"},[n._v("18")]),e("br"),e("span",{staticClass:"line-number"},[n._v("19")]),e("br"),e("span",{staticClass:"line-number"},[n._v("20")]),e("br"),e("span",{staticClass:"line-number"},[n._v("21")]),e("br"),e("span",{staticClass:"line-number"},[n._v("22")]),e("br"),e("span",{staticClass:"line-number"},[n._v("23")]),e("br"),e("span",{staticClass:"line-number"},[n._v("24")]),e("br"),e("span",{staticClass:"line-number"},[n._v("25")]),e("br"),e("span",{staticClass:"line-number"},[n._v("26")]),e("br"),e("span",{staticClass:"line-number"},[n._v("27")]),e("br"),e("span",{staticClass:"line-number"},[n._v("28")]),e("br"),e("span",{staticClass:"line-number"},[n._v("29")]),e("br"),e("span",{staticClass:"line-number"},[n._v("30")]),e("br"),e("span",{staticClass:"line-number"},[n._v("31")]),e("br"),e("span",{staticClass:"line-number"},[n._v("32")]),e("br"),e("span",{staticClass:"line-number"},[n._v("33")]),e("br"),e("span",{staticClass:"line-number"},[n._v("34")]),e("br"),e("span",{staticClass:"line-number"},[n._v("35")]),e("br"),e("span",{staticClass:"line-number"},[n._v("36")]),e("br"),e("span",{staticClass:"line-number"},[n._v("37")]),e("br"),e("span",{staticClass:"line-number"},[n._v("38")]),e("br"),e("span",{staticClass:"line-number"},[n._v("39")]),e("br"),e("span",{staticClass:"line-number"},[n._v("40")]),e("br")])]),e("p",[n._v("具体使用")]),n._v(" "),e("p",[n._v("步骤就是，首先我们通过discoveryClient获取所有的注册实例，然后调用该实现类，获取到调用的地址")]),n._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v('    /**\n     * 在这边我为了以上程序的正常执行：把自定义接口注释掉，不用自定义负载均衡算法，若想再次启动\n     * 请操作一下步骤：\n     *          1.注释掉@LoadBalanced（在config下面），放开下方注释，同时会导致上方不可用，因为找不到具体服务\n     */\n\n    @GetMapping(value = "/consumer/payment/lb")\n    public String getPaymentLB(){\n        List<ServiceInstance> instances = discoveryClient.getInstances("CLOUD-PAYMENT-SERVICE");\n        if (instances ==null || instances.size()<=0){\n            return null;\n        }\n        //传入自己的\n        ServiceInstance serviceInstance = loadBalancer.instances(instances);\n        URI uri = serviceInstance.getUri();\n        return restTemplate.getForObject(uri+"/payment/lb",String.class);\n    }\n')])]),n._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[n._v("1")]),e("br"),e("span",{staticClass:"line-number"},[n._v("2")]),e("br"),e("span",{staticClass:"line-number"},[n._v("3")]),e("br"),e("span",{staticClass:"line-number"},[n._v("4")]),e("br"),e("span",{staticClass:"line-number"},[n._v("5")]),e("br"),e("span",{staticClass:"line-number"},[n._v("6")]),e("br"),e("span",{staticClass:"line-number"},[n._v("7")]),e("br"),e("span",{staticClass:"line-number"},[n._v("8")]),e("br"),e("span",{staticClass:"line-number"},[n._v("9")]),e("br"),e("span",{staticClass:"line-number"},[n._v("10")]),e("br"),e("span",{staticClass:"line-number"},[n._v("11")]),e("br"),e("span",{staticClass:"line-number"},[n._v("12")]),e("br"),e("span",{staticClass:"line-number"},[n._v("13")]),e("br"),e("span",{staticClass:"line-number"},[n._v("14")]),e("br"),e("span",{staticClass:"line-number"},[n._v("15")]),e("br"),e("span",{staticClass:"line-number"},[n._v("16")]),e("br"),e("span",{staticClass:"line-number"},[n._v("17")]),e("br")])])])}),[],!1,null,null,null);s.default=t.exports}}]);