(window.webpackJsonp=window.webpackJsonp||[]).push([[166],{865:function(a,s,t){"use strict";t.r(s);var e=t(5),r=Object(e.a)({},(function(){var a=this,s=a.$createElement,t=a._self._c||s;return t("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[t("h1",{attrs:{id:"使用devtools实现springboot项目热部署"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#使用devtools实现springboot项目热部署"}},[a._v("#")]),a._v(" 使用DevTools实现SpringBoot项目热部署")]),a._v(" "),t("h2",{attrs:{id:"前言"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#前言"}},[a._v("#")]),a._v(" 前言")]),a._v(" "),t("p",[a._v("最近在开发的时候，每次改动代码都需要启动项目，因为有的时候改动的服务比较多，所以重启的次数也就比较多了，想着每次重启等待也挺麻烦的，就打算使用DevTools工具实现项目的热部署")]),a._v(" "),t("h2",{attrs:{id:"热部署是什么"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#热部署是什么"}},[a._v("#")]),a._v(" 热部署是什么")]),a._v(" "),t("p",[a._v("大家都知道在项目开发过程中，常常会改动页面数据或者修改数据结构，为了显示改动效果，往往需要重启应用查看改变效果，其实就是重新编译生成了新的Class文件，这个文件里记录着和代码等对应的各种信息，然后Class文件将被虚拟机的ClassLoader加载。")]),a._v(" "),t("p",[a._v("而热部署正是利用了这个特点，它监听到如果有Class文件改动了，就会创建一个新的ClaassLoader进行加载该文件，经过一系列的过程，最终将结果呈现在我们眼前")]),a._v(" "),t("h2",{attrs:{id:"类加载机制"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#类加载机制"}},[a._v("#")]),a._v(" 类加载机制")]),a._v(" "),t("p",[a._v("Java中的类经过编译器可以把代码编译为存储字节码的Class文件，该Class文件存储了各种信息，最终要加载到虚拟机中运行使用。类加载机制（摘自《深入理解 Java 虚拟机》）虚拟机把描述类的数据从Class文件加载到内存中，并对数据进行校验、转换解析和初始化，最终形成可以被虚拟机直接使用的Java类型。")]),a._v(" "),t("h2",{attrs:{id:"添加依赖"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#添加依赖"}},[a._v("#")]),a._v(" 添加依赖")]),a._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("<dependency>\n\t<groupId>org.springframework.boot</groupId>\n\t<artifactId>spring-boot-devtools</artifactId>\n\t<optional>true</optional>\n</dependency>\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br"),t("span",{staticClass:"line-number"},[a._v("3")]),t("br"),t("span",{staticClass:"line-number"},[a._v("4")]),t("br"),t("span",{staticClass:"line-number"},[a._v("5")]),t("br")])]),t("h2",{attrs:{id:"devtools的配置"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#devtools的配置"}},[a._v("#")]),a._v(" DevTools的配置")]),a._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("#热部署生效\nspring.devtools.restart.enabled: true\n\n#设置重启的目录\nspring.devtools.restart.additional-paths: src/main/java\n\n#classpath目录下的WEB-INF文件夹内容修改不重启\nspring.devtools.restart.exclude: WEB-INF/**\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br"),t("span",{staticClass:"line-number"},[a._v("3")]),t("br"),t("span",{staticClass:"line-number"},[a._v("4")]),t("br"),t("span",{staticClass:"line-number"},[a._v("5")]),t("br"),t("span",{staticClass:"line-number"},[a._v("6")]),t("br"),t("span",{staticClass:"line-number"},[a._v("7")]),t("br"),t("span",{staticClass:"line-number"},[a._v("8")]),t("br")])]),t("h2",{attrs:{id:"idea需要的配置"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#idea需要的配置"}},[a._v("#")]),a._v(" IDEA需要的配置")]),a._v(" "),t("p",[a._v("当我们修改了Java类后，IDEA默认是不自动编译的，而spring-boot-devtools又是监测classpath下的文件发生变化才会重启应用，所以需要设置IDEA的自动编译：")]),a._v(" "),t("ul",[t("li",[t("p",[a._v("File-Settings-Compiler-Build Project automatically")]),a._v(" "),t("p",[t("img",{attrs:{src:"/images/image-20200120095021685.png",alt:"image-20200120095021685"}})])]),a._v(" "),t("li",[t("p",[a._v("ctrl + shift + alt + /,选择Registry,勾上 compiler.automake.allow.when.app.running")])])]),a._v(" "),t("p",[t("img",{attrs:{src:"/images/image-20200120095107686.png",alt:"image-20200120095107686"}})])])}),[],!1,null,null,null);s.default=r.exports}}]);