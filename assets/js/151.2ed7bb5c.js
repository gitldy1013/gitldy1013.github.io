(window.webpackJsonp=window.webpackJsonp||[]).push([[151],{847:function(s,a,t){"use strict";t.r(a);var n=t(5),e=Object(n.a)({},(function(){var s=this,a=s.$createElement,t=s._self._c||a;return t("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[t("h1",{attrs:{id:"从底层了解io多路复用模型"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#从底层了解io多路复用模型"}},[s._v("#")]),s._v(" 从底层了解IO多路复用模型")]),s._v(" "),t("h2",{attrs:{id:"前言"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#前言"}},[s._v("#")]),s._v(" 前言")]),s._v(" "),t("p",[s._v("当我们去面试的时候，问到了 redis，nginx，netty他们的底层模型分别是什么？")]),s._v(" "),t("ul",[t("li",[s._v("redis -> epoll")]),s._v(" "),t("li",[s._v("nginx-> epoll")]),s._v(" "),t("li",[s._v("netty-> epoll?")])]),s._v(" "),t("p",[s._v("需要从操作系统的层面上来谈")]),s._v(" "),t("h2",{attrs:{id:"bio"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#bio"}},[s._v("#")]),s._v(" BIO")]),s._v(" "),t("p",[s._v("当我们开机的时候，首先被加载进内存的是我们的Kernel（内核），内核是用于管理我们的硬件的，同时内核还会创建一个GDT表，然后划分两个空间（用户空间和内核空间），同时空间中的内容是开启了保护模式，无法被修改的。")]),s._v(" "),t("p",[s._v("同时还有一个CPU的概念，CPU有自己的指令集，并且指令集是分了几个级别的，分别是从0~3的，Kernel属于0级别。APP只能用级别为3的指令集。")]),s._v(" "),t("p",[s._v("从上面我们可以知道，我们的应用程序是无法直接访问我们的Kernel的，也就是程序不能直接访问我们的磁盘，声卡，网卡等设备，只有内核才可以访问，那我们怎么办？")]),s._v(" "),t("p",[s._v("只有APP通过调用Kernel提供的 syscall（系统软中断和硬中断）来获取硬件中的内容。")]),s._v(" "),t("ul",[t("li",[s._v("软中断")]),s._v(" "),t("li",[s._v("硬中断：硬中断指的是我们的键盘，按下一个按键的时候，就会触发我们的硬中断，也就是内核会有一个中断号，然后得到一个callback的回调函数")])]),s._v(" "),t("p",[s._v("说到这里，其实就是为了引出一个 概念，就是 IO 和 内核之间的成本问题")]),s._v(" "),t("p",[t("img",{attrs:{src:"/images/image-20200701203511839.png",alt:"image-20200701203511839"}})]),s._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/**\n * 服务器读取文件\n * @author: 陌溪\n * @create: 2020-07-01-20:40\n */")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("TestSocket")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("static")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("main")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" args"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("throws")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("IOException")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ServerSocket")]),s._v(" server "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ServerSocket")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("8090")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("System")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("out"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("println")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"step1: new ServerSocket(8090)"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("while")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("true")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n            "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Socket")]),s._v(" client "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" server"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("accept")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n            "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("System")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("out"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("println")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"step2: client "')]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" client"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("getPort")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n            "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Thread")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("->")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n                "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("try")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n                    "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("InputStream")]),s._v(" in "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" client"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("getInputStream")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n                    "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("BufferedReader")]),s._v(" reader "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("BufferedReader")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("InputStreamReader")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("in"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n                    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("while")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("true")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n                        "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("System")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("out"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("println")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("reader"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("readLine")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n                    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n                "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("catch")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("IOException")]),s._v(" e"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n                    e"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("printStackTrace")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n                "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n            "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"t1"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("start")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br"),t("span",{staticClass:"line-number"},[s._v("19")]),t("br"),t("span",{staticClass:"line-number"},[s._v("20")]),t("br"),t("span",{staticClass:"line-number"},[s._v("21")]),t("br"),t("span",{staticClass:"line-number"},[s._v("22")]),t("br"),t("span",{staticClass:"line-number"},[s._v("23")]),t("br"),t("span",{staticClass:"line-number"},[s._v("24")]),t("br"),t("span",{staticClass:"line-number"},[s._v("25")]),t("br"),t("span",{staticClass:"line-number"},[s._v("26")]),t("br")])]),t("p",[s._v("抓取程序对内核有没有系统调用，然后输出")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("strace -ff -o ./ooxx java TestSocket\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[s._v("然后我们执行上面的程序，得到我们的结果")]),s._v(" "),t("p",[t("img",{attrs:{src:"/images/image-20200701205141858.png",alt:"image-20200701205141858"}})]),s._v(" "),t("p",[s._v("然后我们在通过jps命令，查看当前TestSocket的进程号")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("jps\n\n2912 Jps\n2878 TestSocket\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br")])]),t("p",[s._v("然后我们在进入下面的这个目录下，启动2878是线程的id号，这个目录就是存放该线程的一些信息")]),s._v(" "),t("div",{staticClass:"language-shell script line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-shell"}},[t("code",[t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("cd")]),s._v(" /proc/2878\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[s._v("我们可以看到2878进程下的，通过查看task目录，可以看到所有线程数")]),s._v(" "),t("p",[t("img",{attrs:{src:"/images/image-20200701205539126.png",alt:"image-20200701205539126"}})]),s._v(" "),t("p",[s._v("还有一个目录，就是 fd目录，在该目录下，就是我们的一些IO流")]),s._v(" "),t("p",[t("img",{attrs:{src:"/images/image-20200701205750115.png",alt:"image-20200701205750115"}})]),s._v(" "),t("p",[s._v("上面的0,1,2，分别对应着 输入流，输出流和错误流。在java里面我们流就是对象，而在linux系统中，流就是一个个的文件。后面的4,5 就对应着我们的socket通信，分别对应着ipv4 和 ipv6")]),s._v(" "),t("p",[t("img",{attrs:{src:"/images/image-20200701205958499.png",alt:"image-20200701205958499"}})]),s._v(" "),t("p",[s._v("通过netstat命令查看")]),s._v(" "),t("p",[t("img",{attrs:{src:"/images/image-20200701210121933.png",alt:"image-20200701210121933"}})]),s._v(" "),t("p",[s._v("然后我们使用nc连接 8090端口")]),s._v(" "),t("div",{staticClass:"language-shell script line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-shell"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function"}},[s._v("nc")]),s._v(" localhost "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("8090")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[s._v("我们执行完后，通过netstat命令查看  ，发现多了个连接的状态")]),s._v(" "),t("p",[t("img",{attrs:{src:"/images/image-20200701210428515.png",alt:"image-20200701210428515"}})]),s._v(" "),t("p",[s._v("然后在看文件里面，也多了一个socket")]),s._v(" "),t("p",[t("img",{attrs:{src:"/images/image-20200701210733202.png",alt:"image-20200701210733202"}})]),s._v(" "),t("p",[s._v("我们查看系统调用，发现通过系统调用接收了一个58181端口号的请求，在前面我们还能够看到5，这个5其实就是对应的上图里面的socket，走的是ipv4。")]),s._v(" "),t("p",[t("img",{attrs:{src:"/images/image-20200701210907287.png",alt:"image-20200701210907287"}})]),s._v(" "),t("p",[s._v("从这里其实我们就可以知道了，我们原来调用中写的代码")]),s._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Socket")]),s._v(" client "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" server"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("accept")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[s._v("对应到系统层面，也是调用了系统的方法。")]),s._v(" "),t("p",[s._v("同时关于系统调用，有以下几种方式")]),s._v(" "),t("ul",[t("li",[s._v("bind")]),s._v(" "),t("li",[s._v("connect")]),s._v(" "),t("li",[s._v("listen")]),s._v(" "),t("li",[s._v("select")]),s._v(" "),t("li",[s._v("socket")])]),s._v(" "),t("p",[s._v("首先我们需要知道，java其实是一种解释型语言，通过JVM 虚拟机将我们的.java文件转换为字节码文件，然后调用我们os中的syscall方法，我们必须明确的是，无论怎么调用，一定最后要通过调用内核的方法，然后调用我们的硬件。")]),s._v(" "),t("p",[t("img",{attrs:{src:"/images/image-20200701213855739.png",alt:"image-20200701213855739"}})]),s._v(" "),t("p",[s._v("上述的模型，就是BIO的通信，是这里面有很多阻塞，我们只能够通过多个线程来避免主线程的阻塞。")]),s._v(" "),t("p",[s._v("但是从上面我们可以知道，如果有大量的连接过来，那服务器需要创建很多个线程与之对应，并且线程的创建也是需要消耗资源的，因为线程使用的栈是独占的（栈大小默认1MB），同时CPU的资源调度也是需要浪费。")]),s._v(" "),t("p",[s._v("最根本的原因就是因为 BIO是阻塞的，才会造成上面的问题。")]),s._v(" "),t("h2",{attrs:{id:"nio"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#nio"}},[s._v("#")]),s._v(" NIO")]),s._v(" "),t("p",[s._v("因为BIO存在线程阻塞的问题，后面就提出了NIO的概念，在NIO中，有C10K的问题，C10K = 10000个客户端。但是在和你连接的服务器中，其实没有多少给你发送数据了，所以我们需要做的就是，每当有人发送消息的时候，我才和它进行连接。")]),s._v(" "),t("p",[t("img",{attrs:{src:"/images/image-20200701215310148.png",alt:"image-20200701215310148"}})]),s._v(" "),t("p",[s._v("也就是每次都需要遍历10000个客户端，是非常耗费时间呢，因为很多客户端可能就没有请求的发送。")]),s._v(" "),t("h2",{attrs:{id:"多路复用"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#多路复用"}},[s._v("#")]),s._v(" 多路复用")]),s._v(" "),t("p",[s._v("这个时候，我们就不需要遍历10K个客户端了，而是把我们的fds文件发送给内核，然后内核去判断最后需要连接诶的客户端，这样就不用遍历全部的了。所以这里的Select就是多路复用器，通过多路复用返回的是状态，然后我们需要程序去判断这些状态。")]),s._v(" "),t("p",[s._v("说白了，就是通过一个多路复用器，来判断哪些路可以走通，然后不需要轮询全部的。")]),s._v(" "),t("p",[t("img",{attrs:{src:"/images/image-20200701215254768.png",alt:"image-20200701215254768"}})]),s._v(" "),t("p",[s._v("这个模型，是通过select，将fds文件交给内核来做了，也就是内核需要完成10K个文件的主动遍历，这个10K个调用，对比之前的10K次系统调用来说，是更省时间的，存在以下的问题")]),s._v(" "),t("ul",[t("li",[s._v("每次传递很多数据（重复劳动）")]),s._v(" "),t("li",[s._v("然后内核需要主动去遍历（ 复杂度O(N) ）")])]),s._v(" "),t("p",[s._v("解决方法，通过在内核中，开辟一个空间，当每次来一个客户端，就把这个文件丢到内核中，这样不需要每次把10K个文件传递到内核了。")]),s._v(" "),t("p",[s._v("然后在使用一个基于事件驱动的模型，如下图所示就是一个异步事件驱动的流程")]),s._v(" "),t("p",[t("img",{attrs:{src:"/images/image-20200702081602327.png",alt:"image-20200702081602327"}})]),s._v(" "),t("h2",{attrs:{id:"同样使用epoll-redis是轮询-nginx是阻塞"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#同样使用epoll-redis是轮询-nginx是阻塞"}},[s._v("#")]),s._v(" 同样使用epoll，Redis是轮询，Nginx是阻塞？")]),s._v(" "),t("p",[s._v("我们通过strace命令，查看nginx 和 redis的运行流程，能够发现 同样是使用了 epoll，但是nginx是阻塞的，而redis它是轮询（非阻塞）的。")]),s._v(" "),t("p",[s._v("首先那是因为Redis只有一个线程，而这个线程要做很多事情，例如 接收客户端，LRU，LFU（淘汰过滤）、RDB/AOF（fork线程进行数据备份）。")]),s._v(" "),t("p",[s._v("也就是说对于Redis中的C10K问题，redis也是通过epoll的事件驱动来进行处理的，也就是通过epoll将每个需要读取的客户端的操作放在一个原子串行化的队列中，并且一个客户端包含以下的几个操作：read、计算、write等")]),s._v(" "),t("p",[t("img",{attrs:{src:"/images/image-20200702083635139.png",alt:"image-20200702083635139"}})]),s._v(" "),t("p",[s._v("在redis 6.X版本中，还有一个IO threads的概念，首先它为了留住串行化原子性的特点，也就是计算的时候还是串行化的处理，但是在读取数据的时候，使用的是多线程进行并发IO读取")]),s._v(" "),t("p",[s._v("为什么要多线程读呢？首先因为读操作需要发生CPU的系统调用，如果通过多个线程读取，能够充分发挥CPU的多核作用")]),s._v(" "),t("p",[t("img",{attrs:{src:"/images/image-20200702084219155.png",alt:"image-20200702084219155"}})]),s._v(" "),t("p",[s._v("而nginx只需要做一件事，就是等着客户端过来，不需要做其他的事情，所以也就设置成阻塞。")]),s._v(" "),t("h2",{attrs:{id:"零拷贝"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#零拷贝"}},[s._v("#")]),s._v(" 零拷贝")]),s._v(" "),t("p",[s._v("用kafka来讲，首先这里面有两个角色，一个是消息生产者，一个是消息消费者")]),s._v(" "),t("p",[t("img",{attrs:{src:"/images/image-20200702090307355.png",alt:"image-20200702090307355"}})]),s._v(" "),t("p",[s._v("也就是说，我们通过开辟了一个内存空间，能够直接抵达磁盘，能够减少kernel的系统调用。")]),s._v(" "),t("p",[s._v("在读取的时候，如果是原来的做法，就需要首先请求kernel，然后kernel发起一个read请求，读取磁盘的文件到内核中，然后kafka在读取kernel中的信息。")]),s._v(" "),t("p",[s._v("那么什么是零拷贝呢？零拷贝就是不发生拷贝的情况，零拷贝的前提就是数据不需要加工，在JVM中有一个RandomAccessFile，它能够直接开辟一个堆内空间，或者堆外空间。")])])}),[],!1,null,null,null);a.default=e.exports}}]);