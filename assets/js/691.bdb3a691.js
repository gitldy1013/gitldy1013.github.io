(window.webpackJsonp=window.webpackJsonp||[]).push([[691],{1388:function(_,v,t){"use strict";t.r(v);var o=t(5),r=Object(o.a)({},(function(){var _=this,v=_.$createElement,t=_._self._c||v;return t("ContentSlotsDistributor",{attrs:{"slot-key":_.$parent.slotKey}},[t("h1",{attrs:{id:"分布式事务"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#分布式事务"}},[_._v("#")]),_._v(" 分布式事务")]),_._v(" "),t("h2",{attrs:{id:"分布式一致性"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#分布式一致性"}},[_._v("#")]),_._v(" 分布式一致性")]),_._v(" "),t("p",[_._v("在分布式系统中，为了保证数据的高可用，通常，我们会将数据保留多个副本(replica)，这些副本会放置在不同的物理的机器上。为了对用户提供正确的 CRUD 等语义，我们需要保证这些放置在不同物理机器上的副本是一致的。")]),_._v(" "),t("p",[_._v("为了解决这种分布式一致性问题，前人在性能和数据一致性的反反复复权衡过程中总结了许多典型的协议和算法。其中比较著名的有"),t("strong",[_._v("二阶提交协议（Two Phase Commitment Protocol）")]),_._v("、"),t("strong",[_._v("三阶提交协议（Three Phase Commitment Protocol）")]),_._v(" 和 "),t("strong",[_._v("Paxos 算法")]),_._v("。")]),_._v(" "),t("h2",{attrs:{id:"分布式事务-2"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#分布式事务-2"}},[_._v("#")]),_._v(" 分布式事务")]),_._v(" "),t("blockquote",[t("p",[_._v("分布式事务是指会涉及到操作多个数据库的事务。其实就是将对同一库事务的概念扩大到了对多个库的事务。目的是为了保证分布式系统中的数据一致性。分布式事务处理的关键是必须有一种方法可以知道事务在任何地方所做的所有动作，提交或回滚事务的决定必须产生统一的结果（全部提交或全部回滚）")])]),_._v(" "),t("p",[_._v("在分布式系统中，各个节点之间在物理上相互独立，通过网络进行沟通和协调。由于存在事务机制，可以保证每个独立节点上的数据操作可以满足 ACID。但是，相互独立的节点之间无法准确的知道其他节点中的事务执行情况。所以从理论上讲，两台机器理论上无法达到一致的状态。如果想让分布式部署的多台机器中的数据保持一致性，那么就要保证在所有节点的数据写操作，要不全部都执行，要么全部的都不执行。但是，一台机器在执行本地事务的时候无法知道其他机器中的本地事务的执行结果。所以他也就不知道本次事务到底应该 commit 还是 rollback。所以，常规的解决办法就是引入一个“协调者”的组件来统一调度所有分布式节点的执行。")]),_._v(" "),t("h2",{attrs:{id:"xa-规范"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#xa-规范"}},[_._v("#")]),_._v(" XA 规范")]),_._v(" "),t("p",[_._v("X/Open 组织（即现在的 Open Group ）定义了分布式事务处理模型。 X/Open DTP 模型（ 1994 ）包括应用程序（ AP ）、事务管理器（ TM ）、资源管理器（ RM ）、通信资源管理器（ CRM ）四部分。一般，常见的事务管理器（ TM ）是交易中间件，常见的资源管理器（ RM ）是数据库，常见的通信资源管理器（ CRM ）是消息中间件。 通常把一个数据库内部的事务处理，如对多个表的操作，作为本地事务看待。数据库的事务处理对象是本地事务，而分布式事务处理的对象是全局事务。 所谓全局事务，是指分布式事务处理环境中，多个数据库可能需要共同完成一个工作，这个工作即是一个全局事务，例如，一个事务中可能更新几个不同的数据库。对数据库的操作发生在系统的各处但必须全部被提交或回滚。此时一个数据库对自己内部所做操作的提交不仅依赖本身操作是否成功，还要依赖与全局事务相关的其它数据库的操作是否成功，如果任一数据库的任一操作失败，则参与此事务的所有数据库所做的所有操作都必须回滚。 一般情况下，某一数据库无法知道其它数据库在做什么，因此，在一个 DTP 环境中，交易中间件是必需的，由它通知和协调相关数据库的提交或回滚。而一个数据库只将其自己所做的操作（可恢复）影射到全局事务中。")]),_._v(" "),t("blockquote",[t("p",[_._v("XA 就是 X/Open DTP 定义的交易中间件与数据库之间的接口规范（即接口函数），交易中间件用它来通知数据库事务的开始、结束以及提交、回滚等。 XA 接口函数由数据库厂商提供。")])]),_._v(" "),t("p",[_._v("二阶提交协议和三阶提交协议就是根据这一思想衍生出来的。可以说二阶段提交其实就是实现 XA 分布式事务的关键(确切地说：两阶段提交主要保证了分布式事务的原子性：即所有结点要么全做要么全不做)")]),_._v(" "),t("h2",{attrs:{id:"_2pc"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2pc"}},[_._v("#")]),_._v(" 2PC")]),_._v(" "),t("blockquote",[t("p",[_._v("二阶段提交(Two-phaseCommit)是指，在计算机网络以及数据库领域内，为了使基于分布式系统架构下的所有节点在进行事务提交时保持一致性而设计的一种算法(Algorithm)。通常，二阶段提交也被称为是一种协议(Protocol))。在分布式系统中，每个节点虽然可以知晓自己的操作时成功或者失败，却无法知道其他节点的操作的成功或失败。当一个事务跨越多个节点时，为了保持事务的ACID特性，需要引入一个作为协调者的组件来统一掌控所有节点(称作参与者)的操作结果并最终指示这些节点是否要把操作结果进行真正的提交(比如将更新后的数据写入磁盘等等)。因此，"),t("strong",[_._v("二阶段提交的算法思路可以概括为：参与者将操作成败通知协调者，再由协调者根据所有参与者的反馈情报决定各参与者是否要提交操作还是中止操作")]),_._v("。")])]),_._v(" "),t("p",[_._v("所谓的两个阶段是指：第一阶段："),t("strong",[_._v("准备阶段(投票阶段)")]),_._v(" 和第二阶段："),t("strong",[_._v("提交阶段（执行阶段）")]),_._v("。")]),_._v(" "),t("h3",{attrs:{id:"准备阶段"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#准备阶段"}},[_._v("#")]),_._v(" 准备阶段")]),_._v(" "),t("p",[_._v("事务协调者(事务管理器)给每个参与者(资源管理器)发送 Prepare 消息，每个参与者要么直接返回失败(如权限验证失败)，要么在本地执行事务，写本地的 redo 和 undo 日志，但不提交，到达一种“万事俱备，只欠东风”的状态。")]),_._v(" "),t("p",[_._v("可以进一步将准备阶段分为以下三个步骤：")]),_._v(" "),t("ol",[t("li",[_._v("协调者节点向所有参与者节点询问是否可以执行提交操作(vote)，并开始等待各参与者节点的响应。")]),_._v(" "),t("li",[_._v("参与者节点执行询问发起为止的所有事务操作，并将 Undo 信息和 Redo 信息写入日志。（注意：若成功这里其实每个参与者已经执行了事务操作）")]),_._v(" "),t("li",[_._v("各参与者节点响应协调者节点发起的询问。如果参与者节点的事务操作实际执行成功，则它返回一个”同意”消息；如果参与者节点的事务操作实际执行失败，则它返回一个”中止”消息。")])]),_._v(" "),t("h3",{attrs:{id:"提交阶段"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#提交阶段"}},[_._v("#")]),_._v(" 提交阶段")]),_._v(" "),t("p",[_._v("如果协调者收到了参与者的失败消息或者超时，直接给每个参与者发送回滚( Rollback )消息；否则，发送提交( Commit )消息；参与者根据协调者的指令执行提交或者回滚操作，释放所有事务处理过程中使用的锁资源。(注意:必须在最后阶段释放锁资源)")]),_._v(" "),t("p",[_._v("接下来分两种情况分别讨论提交阶段的过程。")]),_._v(" "),t("p",[_._v("当协调者节点从所有参与者节点获得的相应消息都为”同意”时：")]),_._v(" "),t("p",[t("img",{attrs:{src:"/img/success.png",alt:""}})]),_._v(" "),t("ol",[t("li",[_._v("协调者节点向所有参与者节点发出”正式提交( commit )”的请求。")]),_._v(" "),t("li",[_._v("参与者节点正式完成操作，并释放在整个事务期间内占用的资源。")]),_._v(" "),t("li",[_._v("参与者节点向协调者节点发送”完成”消息。")]),_._v(" "),t("li",[_._v("协调者节点受到所有参与者节点反馈的”完成”消息后，完成事务。")])]),_._v(" "),t("p",[_._v("如果任一参与者节点在第一阶段返回的响应消息为”中止”，或者 协调者节点在第一阶段的询问超时之前无法获取所有参与者节点的响应消息时：")]),_._v(" "),t("p",[t("img",{attrs:{src:"/img/fail.png",alt:""}})]),_._v(" "),t("ol",[t("li",[_._v("协调者节点向所有参与者节点发出”回滚操作( rollback )”的请求。")]),_._v(" "),t("li",[_._v("参与者节点利用之前写入的 Undo 信息执行回滚，并释放在整个事务期间内占用的资源。")]),_._v(" "),t("li",[_._v("参与者节点向协调者节点发送”回滚完成”消息。")]),_._v(" "),t("li",[_._v("协调者节点受到所有参与者节点反馈的”回滚完成”消息后，取消事务。")])]),_._v(" "),t("p",[t("strong",[_._v("不管最后结果如何，第二阶段都会结束当前事务。")])]),_._v(" "),t("p",[_._v("二阶段提交看起来确实能够提供原子性的操作，但是不幸的事，二阶段提交还是有几个"),t("strong",[_._v("缺点")]),_._v("的：")]),_._v(" "),t("ol",[t("li",[t("strong",[_._v("同步阻塞问题")]),_._v("：执行过程中，所有参与节点都是事务阻塞型的。当参与者占有公共资源时，其他第三方节点访问公共资源不得不处于阻塞状态。")]),_._v(" "),t("li",[t("strong",[_._v("单点故障")]),_._v("：由于协调者的重要性，一旦协调者发生故障。参与者会一直阻塞下去。尤其在第二阶段，协调者发生故障，那么所有的参与者还都处于锁定事务资源的状态中，而无法继续完成事务操作。（如果是协调者挂掉，可以重新选举一个协调者，但是无法解决因为协调者宕机导致的参与者处于阻塞状态的问题）")]),_._v(" "),t("li",[t("strong",[_._v("数据不一致")]),_._v("：在二阶段提交的阶段二中，当协调者向参与者发送 commit 请求之后，发生了局部网络异常或者在发送 commit 请求过程中协调者发生了故障，这回导致只有一部分参与者接受到了 commit 请求。而在这部分参与者接到 commit 请求之后就会执行 commit 操作。但是其他部分未接到 commit 请求的机器则无法执行事务提交。于是整个分布式系统便出现了数据部一致性的现象。")]),_._v(" "),t("li",[_._v("二阶段无法解决的问题：协调者再发出 commit 消息之后宕机，而唯一接收到这条消息的参与者同时也宕机了。那么即使协调者通过选举协议产生了新的协调者，这条事务的状态也是不确定的，没人知道事务是否被已经提交。")])]),_._v(" "),t("p",[_._v("由于二阶段提交存在着诸如同步阻塞、单点问题、脑裂等缺陷，所以，研究者们在二阶段提交的基础上做了改进，提出了三阶段提交。")]),_._v(" "),t("h2",{attrs:{id:"_3pc"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3pc"}},[_._v("#")]),_._v(" 3PC")]),_._v(" "),t("blockquote",[t("p",[_._v("三阶段提交（Three-phase commit），也叫三阶段提交协议（Three-phase commit protocol），是二阶段提交（2PC）的改进版本。")])]),_._v(" "),t("p",[t("img",{attrs:{src:"/ing/3pccommit.png",alt:""}})]),_._v(" "),t("p",[_._v("与两阶段提交不同的是，三阶段提交有两个改动点。")]),_._v(" "),t("ol",[t("li",[_._v("引入超时机制。同时在协调者和参与者中都引入超时机制。")]),_._v(" "),t("li",[_._v("在第一阶段和第二阶段中插入一个准备阶段。保证了在最后提交阶段之前各参与节点的状态是一致的。")])]),_._v(" "),t("p",[_._v("也就是说，除了引入超时机制之外，3PC 把 2PC 的准备阶段再次一分为二，这样三阶段提交就有 "),t("code",[_._v("CanCommit")]),_._v("、"),t("code",[_._v("PreCommit")]),_._v("、"),t("code",[_._v("DoCommit")]),_._v(" 三个阶段。")]),_._v(" "),t("h3",{attrs:{id:"cancommit-阶段"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#cancommit-阶段"}},[_._v("#")]),_._v(" CanCommit 阶段")]),_._v(" "),t("p",[_._v("3PC 的 CanCommit 阶段其实和 2PC 的准备阶段很像。协调者向参与者发送 commit 请求，参与者如果可以提交就返回 Yes 响应，否则返回 No 响应。")]),_._v(" "),t("ol",[t("li",[t("strong",[_._v("事务询问")]),_._v("：协调者向参与者发送CanCommit请求。询问是否可以执行事务提交操作。然后开始等待参与者的响应。")]),_._v(" "),t("li",[t("strong",[_._v("响应反馈")]),_._v("：参与者接到CanCommit请求之后，正常情况下，如果其自身认为可以顺利执行事务，则返回Yes响应，并进入预备状态。否则反馈No")])]),_._v(" "),t("h3",{attrs:{id:"precommit-阶段"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#precommit-阶段"}},[_._v("#")]),_._v(" PreCommit 阶段")]),_._v(" "),t("p",[_._v("协调者根据参与者的反应情况来决定是否可以记性事务的 PreCommit 操作。根据响应情况，有以下两种可能。")]),_._v(" "),t("p",[t("strong",[_._v("1. 假如协调者从所有的参与者获得的反馈都是 Yes 响应，那么就会执行事务的预执行。")])]),_._v(" "),t("ul",[t("li",[_._v("发送预提交请求：协调者向参与者发送 PreCommit 请求，并进入 Prepared 阶段。")]),_._v(" "),t("li",[_._v("事务预提交：参与者接收到 PreCommit 请求后，会执行事务操作，并将 undo 和 redo 信息记录到事务日志中。")]),_._v(" "),t("li",[_._v("响应反馈：如果参与者成功的执行了事务操作，则返回 ACK 响应，同时开始等待最终指令。")])]),_._v(" "),t("p",[t("strong",[_._v("2. 假如有任何一个参与者向协调者发送了 No 响应，或者等待超时之后，协调者都没有接到参与者的响应，那么就执行事务的中断。")])]),_._v(" "),t("ul",[t("li",[_._v("发送中断请求：协调者向所有参与者发送 abort 请求。")]),_._v(" "),t("li",[_._v("中断事务：参与者收到来自协调者的 abort 请求之后（或超时之后，仍未收到协调者的请求），执行事务的中断。")])]),_._v(" "),t("h3",{attrs:{id:"docommit-阶段"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#docommit-阶段"}},[_._v("#")]),_._v(" doCommit 阶段")]),_._v(" "),t("p",[_._v("该阶段进行真正的事务提交，也可以分为以下两种情况。")]),_._v(" "),t("p",[t("strong",[_._v("1. 执行提交")])]),_._v(" "),t("ul",[t("li",[_._v("发送提交请求：协调接收到参与者发送的 ACK 响应，那么他将从预提交状态进入到提交状态。并向所有参与者发送 doCommit 请求。")]),_._v(" "),t("li",[_._v("事务提交：参与者接收到 doCommit 请求之后，执行正式的事务提交。并在完成事务提交之后释放所有事务资源。")]),_._v(" "),t("li",[_._v("响应反馈：事务提交完之后，向协调者发送 ACK 响应。")]),_._v(" "),t("li",[_._v("完成事务：协调者接收到所有参与者的 ACK 响应之后，完成事务。")])]),_._v(" "),t("p",[t("strong",[_._v("2. 中断事务")])]),_._v(" "),t("p",[_._v("协调者没有接收到参与者发送的 ACK 响应（可能是接受者发送的不是 ACK 响应，也可能响应超时），那么就会执行中断事务。")]),_._v(" "),t("ul",[t("li",[_._v("发送中断请求：协调者向所有参与者发送 abort 请求")]),_._v(" "),t("li",[_._v("事务回滚：参与者接收到 abort 请求之后，利用其在阶段二记录的 undo 信息来执行事务的回滚操作，并在完成回滚之后释放所有的事务资源。")]),_._v(" "),t("li",[_._v("反馈结果：参与者完成事务回滚之后，向协调者发送 ACK 消息")]),_._v(" "),t("li",[_._v("中断事务：协调者接收到参与者反馈的ACK消息之后，执行事务的中断。")])]),_._v(" "),t("blockquote",[t("p",[_._v("在 "),t("code",[_._v("doCommit")]),_._v(" 阶段，如果参与者无法及时接收到来自协调者的 "),t("code",[_._v("doCommit")]),_._v(" 或者 "),t("code",[_._v("abort")]),_._v(" 请求时，会在等待超时之后，会继续进行事务的提交。（其实这个应该是基于概率来决定的，当进入第三阶段时，说明参与者在第二阶段已经收到了 "),t("code",[_._v("PreCommit")]),_._v(" 请求，那么协调者产生 "),t("code",[_._v("PreCommit")]),_._v(" 请求的前提条件是他在第二阶段开始之前，收到所有参与者的 "),t("code",[_._v("CanCommit")]),_._v(" 响应都是 "),t("code",[_._v("Yes")]),_._v("。（一旦参与者收到了 "),t("code",[_._v("PreCommit")]),_._v("，意味他知道大家其实都同意修改了）所以，一句话概括就是，当进入第三阶段时，由于网络超时等原因，虽然参与者没有收到 "),t("code",[_._v("commit")]),_._v(" 或者 "),t("code",[_._v("abort")]),_._v(" 响应，但是他有理由相信：成功提交的几率很大。）")])]),_._v(" "),t("h2",{attrs:{id:"_2pc-与-3pc-的区别"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2pc-与-3pc-的区别"}},[_._v("#")]),_._v(" 2PC 与 3PC 的区别")]),_._v(" "),t("p",[_._v("相对于 2PC，3PC 主要解决的单点故障问题，并减少阻塞，因为一旦参与者无法及时收到来自协调者的信息之后，他会默认执行 commit。而不会一直持有事务资源并处于阻塞状态。但是这种机制也会导致数据一致性问题，因为，由于网络原因，协调者发送的 abort 响应没有及时被参与者接收到，那么参与者在等待超时之后执行了 commit 操作。这样就和其他接到 abort 命令并执行回滚的参与者之间存在数据不一致的情况。")])])}),[],!1,null,null,null);v.default=r.exports}}]);