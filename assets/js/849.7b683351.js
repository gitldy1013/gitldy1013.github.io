(window.webpackJsonp=window.webpackJsonp||[]).push([[849],{1545:function(v,t,_){"use strict";_.r(t);var s=_(5),i=Object(s.a)({},(function(){var v=this,t=v.$createElement,_=v._self._c||t;return _("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[_("h1",{attrs:{id:"istio-非侵入式服务网格系统"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#istio-非侵入式服务网格系统"}},[v._v("#")]),v._v(" Istio-非侵入式服务网格系统")]),v._v(" "),_("h2",{attrs:{id:"什么是服务网格"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#什么是服务网格"}},[v._v("#")]),v._v(" 什么是服务网格")]),v._v(" "),_("p",[v._v("术语服务网格（Service Mesh）用于描述微服务之间的网络，以及通过此网络进行的服务之间的交互。随着服务数量和复杂度的增加，服务网格将变的难以理解和管理，对服务网格的需求包括：")]),v._v(" "),_("ul",[_("li",[v._v("服务发现")]),v._v(" "),_("li",[v._v("负载均衡")]),v._v(" "),_("li",[v._v("故障恢复")]),v._v(" "),_("li",[v._v("指标和监控")]),v._v(" "),_("li",[v._v("A / B 测试")]),v._v(" "),_("li",[v._v("金丝雀发布")]),v._v(" "),_("li",[v._v("流量控制")]),v._v(" "),_("li",[v._v("访问控制")]),v._v(" "),_("li",[v._v("端对端身份验证")])]),v._v(" "),_("h2",{attrs:{id:"什么是-istio"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#什么是-istio"}},[v._v("#")]),v._v(" 什么是 Istio")]),v._v(" "),_("p",[v._v("Istio 是运行于分布式应用程序之上的 "),_("strong",[v._v("非侵入式（无代码入侵）服务网格系统")]),v._v("，它的主要目的是为了更好更轻松的解决服务治理问题（Istio 是一套非侵入式一站式服务治理解决方案）")]),v._v(" "),_("p",[v._v("Istio 的实现原理是，为每个微服务部署一个 "),_("strong",[v._v("Sidecar")]),v._v("，代理微服务之间的所有网络通信。在此基础上你可以通过 Istio 的控制平面实现：")]),v._v(" "),_("ul",[_("li",[v._v("针对 HTTP、gRPC、WebSocket、TCP 流量的负载均衡")]),v._v(" "),_("li",[v._v("细粒度的流量控制行为，包括路由、重试、故障转移、故障注入")]),v._v(" "),_("li",[v._v("可拔插的策略层 + 配置 API，实现访问控制、限速、配额")]),v._v(" "),_("li",[v._v("自动收集指标、日志，跟踪集群内所有流量，包括 Ingress/Egress")]),v._v(" "),_("li",[v._v("基于强身份认证和授权来保护服务之间的通信")])]),v._v(" "),_("p",[_("img",{attrs:{src:"/images/7d7c87922e9becf.png",alt:""}})]),v._v(" "),_("h2",{attrs:{id:"istio-核心特性"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#istio-核心特性"}},[v._v("#")]),v._v(" Istio 核心特性")]),v._v(" "),_("h3",{attrs:{id:"流量管理"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#流量管理"}},[v._v("#")]),v._v(" 流量管理")]),v._v(" "),_("p",[v._v("使用 Istio 你可以很容易的通过配置，对流量和 API 调用进行控制。服务级别的可配置属性包括断路器、超时、重试，Istio 支持基于流量百分比切分的 A/B 测试、金丝雀滚动发布、分阶段滚动发布")]),v._v(" "),_("h3",{attrs:{id:"安全性"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#安全性"}},[v._v("#")]),v._v(" 安全性")]),v._v(" "),_("p",[v._v("可以提供安全信道，管理身份验证和授权，加密通信流量，联用 K8S 的网络策略可以获得更多益处，例如保护 Pod-to-Pod 之间的通信")]),v._v(" "),_("h3",{attrs:{id:"可观察性"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#可观察性"}},[v._v("#")]),v._v(" 可观察性")]),v._v(" "),_("p",[v._v("Istio 强大的跟踪、监控、日志能力，让服务网格内部结构更容易观察（一个服务的性能对上下游的影响可以直观的展现在仪表盘上）")]),v._v(" "),_("h2",{attrs:{id:"istio-架构"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#istio-架构"}},[v._v("#")]),v._v(" Istio 架构")]),v._v(" "),_("p",[v._v("从整体上看，Istio 的服务网格由数据平面、控制平面两部分组成：")]),v._v(" "),_("ul",[_("li",[_("strong",[v._v("数据平面：")]),v._v(" 由一系列作为 Sidecar 部署的智能代理（Envoy）构成。这些代理联合 Mixer， 中继、控制所有微服务之间的网络通信。需要注意，还有一些 Envoy 是独立部署（而非 Sidecar）的，用来实现 K8S Ingress 控制器、Istio 的 Ingress/Egress 网关")]),v._v(" "),_("li",[_("strong",[v._v("控制平面：")]),v._v(" 负责管理、配置智能代理，实现流量路由；配置 Citadel 实现 TLS 证书管理；配置 Mixers 来应用策略、收集指标")])]),v._v(" "),_("p",[_("img",{attrs:{src:"/images/00bc329e0423184.png",alt:""}})]),v._v(" "),_("h3",{attrs:{id:"envoy"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#envoy"}},[v._v("#")]),v._v(" Envoy")]),v._v(" "),_("p",[v._v("Istio 使用一个扩展过的 Envoy 版本。Envoy 是基于 C++ 开发的高性能代理，Istio 使用它的以下特性：")]),v._v(" "),_("ul",[_("li",[v._v("动态服务发现")]),v._v(" "),_("li",[v._v("负载均衡")]),v._v(" "),_("li",[v._v("TLS termination（可将后端的 HTTP 服务包装为 HTTPS）")]),v._v(" "),_("li",[v._v("HTTP/2 和 gRPC 代理")]),v._v(" "),_("li",[v._v("断路器")]),v._v(" "),_("li",[v._v("健康检查")]),v._v(" "),_("li",[v._v("分阶段（基于流量百分比）发布")]),v._v(" "),_("li",[v._v("故障注入")]),v._v(" "),_("li",[v._v("丰富的监控指标")])]),v._v(" "),_("p",[v._v("一般情况下 Envoy 在和目标服务的相同 Pod 中，以 Sidecar 形式部署。少量的 Istio 组件的主进程就是 Envoy，包括 Ingress 控制器、Ingress/Egress 网关")]),v._v(" "),_("h3",{attrs:{id:"mixer"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#mixer"}},[v._v("#")]),v._v(" Mixer")]),v._v(" "),_("p",[v._v("一个平台无关的组件：")]),v._v(" "),_("ul",[_("li",[v._v("为服务网格应用访问控制策略")]),v._v(" "),_("li",[v._v("从 Envoy 和其它服务中收集指标")]),v._v(" "),_("li",[v._v("Envoy 收集的请求级别的属性，被发送到 Mixer 进行分析")])]),v._v(" "),_("p",[v._v("Mixer 提供了一个灵活的插件模型，让 Istio 能够灵活的和多种宿主机环境、基础设施后端进行对接")]),v._v(" "),_("h3",{attrs:{id:"pilot"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#pilot"}},[v._v("#")]),v._v(" Pilot")]),v._v(" "),_("p",[v._v("该组件是 Istio 的控制器，它会监控各种规则、策略（通常存储在 K8S 中），一旦配置文件发生变化，就会提取、处理，并同步给 Envoy：")]),v._v(" "),_("ul",[_("li",[v._v("为 Envoy 提供服务发现")]),v._v(" "),_("li",[v._v("为智能路由（AB 测试、金丝雀部署）提供流量管理能力")]),v._v(" "),_("li",[v._v("提供弹性（超时、重试、断路器）")]),v._v(" "),_("li",[v._v("分发身份验证策略给 Envoy")])]),v._v(" "),_("p",[v._v("Pilot 将高级别的路由规则转换为 Envoy 理解的配置信息，并在运行时将这些配置传播到 Sidecars，Pilot 将平台相关的服务发现机制抽象为标准的（Envoy data plane API，xDS）格式，这让 Istio 可以在 K8S、Consul、Nomad 等多种环境下运行")]),v._v(" "),_("h3",{attrs:{id:"citadel"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#citadel"}},[v._v("#")]),v._v(" Citadel")]),v._v(" "),_("p",[v._v("提供服务与服务之间、或者针对终端用户的身份验证功能，可以加密服务网格中的流量")]),v._v(" "),_("h3",{attrs:{id:"kiali"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#kiali"}},[v._v("#")]),v._v(" Kiali")]),v._v(" "),_("p",[v._v("为我们提供了查看相关服务与配置提供了统一化的可视化界面，并且能在其中展示他们的关联；同时他还提供了界面让我们可以很方便的验证 istio 配置与错误提示")]),v._v(" "),_("h2",{attrs:{id:"完成"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#完成"}},[v._v("#")]),v._v(" 完成")])])}),[],!1,null,null,null);t.default=i.exports}}]);