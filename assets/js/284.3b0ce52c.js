(window.webpackJsonp=window.webpackJsonp||[]).push([[284],{983:function(a,s,e){"use strict";e.r(s);var n=e(5),t=Object(n.a)({},(function(){var a=this,s=a.$createElement,e=a._self._c||s;return e("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[e("h1",{attrs:{id:"jvm参数调优"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#jvm参数调优"}},[a._v("#")]),a._v(" JVM参数调优")]),a._v(" "),e("h2",{attrs:{id:"前言"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#前言"}},[a._v("#")]),a._v(" 前言")]),a._v(" "),e("p",[a._v("你说你做过JVM调优和参数配置，请问如何盘点查看JVM系统默认值")]),a._v(" "),e("p",[a._v("使用jps和jinfo进行查看")]),a._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("-Xms：初始堆空间\n-Xmx：堆最大值\n-Xss：栈空间\n")])]),a._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[a._v("1")]),e("br"),e("span",{staticClass:"line-number"},[a._v("2")]),e("br"),e("span",{staticClass:"line-number"},[a._v("3")]),e("br")])]),e("p",[a._v("-Xms 和 -Xmx最好调整一致，防止JVM频繁进行收集和回收")]),a._v(" "),e("h2",{attrs:{id:"jvm参数类型"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#jvm参数类型"}},[a._v("#")]),a._v(" JVM参数类型")]),a._v(" "),e("ul",[e("li",[a._v("标配参数（从JDK1.0 - Java12都在，很稳定）\n"),e("ul",[e("li",[a._v("-version")]),a._v(" "),e("li",[a._v("-help")]),a._v(" "),e("li",[a._v("java -showversion")])])]),a._v(" "),e("li",[a._v("X参数（了解）\n"),e("ul",[e("li",[a._v("-Xint：解释执行")]),a._v(" "),e("li",[a._v("-Xcomp：第一次使用就编译成本地代码")]),a._v(" "),e("li",[a._v("-Xmixed：混合模式")])])]),a._v(" "),e("li",[a._v("XX参数（重点）\n"),e("ul",[e("li",[a._v("Boolean类型\n"),e("ul",[e("li",[a._v("公式：-XX:+ 或者-某个属性   + 表示开启，-表示关闭")]),a._v(" "),e("li",[a._v("Case：-XX:-PrintGCDetails：表示关闭了GC详情输出")])])]),a._v(" "),e("li",[a._v("key-value类型\n"),e("ul",[e("li",[a._v("公式：-XX:属性key=属性value")]),a._v(" "),e("li",[a._v("不满意初始值，可以通过下列命令调整")]),a._v(" "),e("li",[a._v("case：如何：-XX:MetaspaceSize=21807104：查看Java元空间的值")])])])])])]),a._v(" "),e("h2",{attrs:{id:"查看运行的java程序-jvm参数是否开启-具体值为多少"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#查看运行的java程序-jvm参数是否开启-具体值为多少"}},[a._v("#")]),a._v(" 查看运行的Java程序，JVM参数是否开启，具体值为多少？")]),a._v(" "),e("p",[a._v("首先我们运行一个HelloGC的java程序")]),a._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v('/**\n * @author: 陌溪\n * @create: 2020-03-19-12:14\n */\npublic class HelloGC {\n\n    public static void main(String[] args) throws InterruptedException {\n        System.out.println("hello GC");\n        Thread.sleep(Integer.MAX_VALUE);\n    }\n}\n')])]),a._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[a._v("1")]),e("br"),e("span",{staticClass:"line-number"},[a._v("2")]),e("br"),e("span",{staticClass:"line-number"},[a._v("3")]),e("br"),e("span",{staticClass:"line-number"},[a._v("4")]),e("br"),e("span",{staticClass:"line-number"},[a._v("5")]),e("br"),e("span",{staticClass:"line-number"},[a._v("6")]),e("br"),e("span",{staticClass:"line-number"},[a._v("7")]),e("br"),e("span",{staticClass:"line-number"},[a._v("8")]),e("br"),e("span",{staticClass:"line-number"},[a._v("9")]),e("br"),e("span",{staticClass:"line-number"},[a._v("10")]),e("br"),e("span",{staticClass:"line-number"},[a._v("11")]),e("br")])]),e("p",[a._v("然后使用下列命令查看它的默认参数")]),a._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("jps：查看java的后台进程\njinfo：查看正在运行的java程序\n")])]),a._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[a._v("1")]),e("br"),e("span",{staticClass:"line-number"},[a._v("2")]),e("br")])]),e("p",[a._v("具体使用：")]),a._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("jps -l得到进程号\n")])]),a._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[a._v("1")]),e("br")])]),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("12608 com.moxi.interview.study.GC.HelloGC\n15200 sun.tools.jps.Jps\n15296 org.jetbrains.idea.maven.server.RemoteMavenServer36\n4528\n12216 org.jetbrains.jps.cmdline.Launcher\n9772 org.jetbrains.kotlin.daemon.KotlinCompileDaemon\n")])]),a._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[a._v("1")]),e("br"),e("span",{staticClass:"line-number"},[a._v("2")]),e("br"),e("span",{staticClass:"line-number"},[a._v("3")]),e("br"),e("span",{staticClass:"line-number"},[a._v("4")]),e("br"),e("span",{staticClass:"line-number"},[a._v("5")]),e("br"),e("span",{staticClass:"line-number"},[a._v("6")]),e("br")])]),e("p",[a._v("查看到HelloGC的进程号为：12608")]),a._v(" "),e("p",[a._v("我们使用jinfo -flag 然后查看是否开启PrintGCDetails这个参数")]),a._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("jinfo -flag PrintGCDetails 12608\n")])]),a._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[a._v("1")]),e("br")])]),e("p",[a._v("得到的内容为")]),a._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("-XX:-PrintGCDetails\n")])]),a._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[a._v("1")]),e("br")])]),e("p",[a._v("上面提到了，-号表示关闭，即没有开启PrintGCDetails这个参数")]),a._v(" "),e("p",[a._v("下面我们需要在启动HelloGC的时候，增加 PrintGCDetails这个参数，需要在运行程序的时候配置JVM参数")]),a._v(" "),e("p",[e("img",{attrs:{src:"/images/image-20200319122922264.png",alt:"image-20200319122922264"}})]),a._v(" "),e("p",[a._v("然后在VM Options中加入下面的代码，现在+号表示开启")]),a._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("-XX:+PrintGCDetails\n")])]),a._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[a._v("1")]),e("br")])]),e("p",[a._v("然后在使用jinfo查看我们的配置")]),a._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("jps -l\njinfo -flag PrintGCDetails 13540\n")])]),a._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[a._v("1")]),e("br"),e("span",{staticClass:"line-number"},[a._v("2")]),e("br")])]),e("p",[a._v("得到的结果为")]),a._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("-XX:+PrintGCDetails\n")])]),a._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[a._v("1")]),e("br")])]),e("p",[a._v("我们看到原来的-号变成了+号，说明我们通过 VM Options配置的JVM参数已经生效了")]),a._v(" "),e("p",[a._v("使用下列命令，会把jvm的全部默认参数输出")]),a._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("jinfo -flags ***\n")])]),a._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[a._v("1")]),e("br")])]),e("h2",{attrs:{id:"题外话-坑题"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#题外话-坑题"}},[a._v("#")]),a._v(" 题外话（坑题）")]),a._v(" "),e("p",[a._v("两个经典参数：-Xms  和 -Xmx，这两个参数 如何解释")]),a._v(" "),e("p",[a._v("这两个参数，还是属于XX参数，因为取了别名")]),a._v(" "),e("ul",[e("li",[a._v("-Xms  等价于 -XX:InitialHeapSize  ：初始化堆内存（默认只会用最大物理内存的64分1）")]),a._v(" "),e("li",[a._v("-Xmx 等价于 -XX:MaxHeapSize    ：最大堆内存（默认只会用最大物理内存的4分1）")])]),a._v(" "),e("h2",{attrs:{id:"查看jvm默认参数"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#查看jvm默认参数"}},[a._v("#")]),a._v(" 查看JVM默认参数")]),a._v(" "),e("ul",[e("li",[e("p",[a._v("-XX:+PrintFlagsInitial")]),a._v(" "),e("ul",[e("li",[a._v("主要是查看初始默认值")]),a._v(" "),e("li",[a._v("公式\n"),e("ul",[e("li",[a._v("java -XX:+PrintFlagsInitial -version")]),a._v(" "),e("li",[a._v("java -XX:+PrintFlagsInitial（重要参数）")])])])]),a._v(" "),e("p",[e("img",{attrs:{src:"/images/image-20200320212256284.png",alt:"image-20200320212256284"}})])]),a._v(" "),e("li",[e("p",[a._v("-XX:+PrintFlagsFinal：表示修改以后，最终的值")])])]),a._v(" "),e("p",[a._v("​         会将JVM的各个结果都进行打印")]),a._v(" "),e("p",[a._v("​         如果有  := 表示修改过的， = 表示没有修改过的")]),a._v(" "),e("h2",{attrs:{id:"工作中常用的jvm基本配置参数"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#工作中常用的jvm基本配置参数"}},[a._v("#")]),a._v(" 工作中常用的JVM基本配置参数")]),a._v(" "),e("p",[e("img",{attrs:{src:"/images/image-20200322163252777.png",alt:"image-20200322163252777"}})]),a._v(" "),e("h3",{attrs:{id:"查看堆内存"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#查看堆内存"}},[a._v("#")]),a._v(" 查看堆内存")]),a._v(" "),e("p",[a._v("查看JVM的初始化堆内存 -Xms 和最大堆内存 Xmx")]),a._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v('/**\n * @author: 陌溪\n * @create: 2020-03-19-12:14\n */\npublic class HelloGC {\n\n    public static void main(String[] args) throws InterruptedException {\n        // 返回Java虚拟机中内存的总量\n        long totalMemory = Runtime.getRuntime().totalMemory();\n\n        // 返回Java虚拟机中试图使用的最大内存量\n        long maxMemory = Runtime.getRuntime().maxMemory();\n\n        System.out.println("TOTAL_MEMORY(-Xms) = " + totalMemory + "(字节)、" + (totalMemory / (double)1024 / 1024) + "MB");\n        System.out.println("MAX_MEMORY(-Xmx) = " + maxMemory + "(字节)、" + (maxMemory / (double)1024 / 1024) + "MB");\n\n    }\n}\n')])]),a._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[a._v("1")]),e("br"),e("span",{staticClass:"line-number"},[a._v("2")]),e("br"),e("span",{staticClass:"line-number"},[a._v("3")]),e("br"),e("span",{staticClass:"line-number"},[a._v("4")]),e("br"),e("span",{staticClass:"line-number"},[a._v("5")]),e("br"),e("span",{staticClass:"line-number"},[a._v("6")]),e("br"),e("span",{staticClass:"line-number"},[a._v("7")]),e("br"),e("span",{staticClass:"line-number"},[a._v("8")]),e("br"),e("span",{staticClass:"line-number"},[a._v("9")]),e("br"),e("span",{staticClass:"line-number"},[a._v("10")]),e("br"),e("span",{staticClass:"line-number"},[a._v("11")]),e("br"),e("span",{staticClass:"line-number"},[a._v("12")]),e("br"),e("span",{staticClass:"line-number"},[a._v("13")]),e("br"),e("span",{staticClass:"line-number"},[a._v("14")]),e("br"),e("span",{staticClass:"line-number"},[a._v("15")]),e("br"),e("span",{staticClass:"line-number"},[a._v("16")]),e("br"),e("span",{staticClass:"line-number"},[a._v("17")]),e("br"),e("span",{staticClass:"line-number"},[a._v("18")]),e("br")])]),e("p",[a._v("运行结果为：")]),a._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("TOTAL_MEMORY(-Xms) = 257425408(字节)、245.5MB\nMAX_MEMORY(-Xmx) = 3790077952(字节)、3614.5MB\n")])]),a._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[a._v("1")]),e("br"),e("span",{staticClass:"line-number"},[a._v("2")]),e("br")])]),e("p",[a._v("-Xms 初始堆内存为：物理内存的1/64          -Xmx 最大堆内存为：系统物理内存的 1/4")]),a._v(" "),e("h3",{attrs:{id:"打印jvm默认参数"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#打印jvm默认参数"}},[a._v("#")]),a._v(" 打印JVM默认参数")]),a._v(" "),e("p",[a._v("使用 "),e("code",[a._v("-XX:+PrintCommandLineFlags")]),a._v(" 打印出JVM的默认的简单初始化参数")]),a._v(" "),e("p",[a._v("比如我的机器输出为：")]),a._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("-XX:InitialHeapSize=266376000 -XX:MaxHeapSize=4262016000 -XX:+PrintCommandLineFlags -XX:+UseCompressedClassPointers -XX:+UseCompressedOops -XX:-UseLargePagesIndividualAllocation -XX:+UseParallelGC \n")])]),a._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[a._v("1")]),e("br")])]),e("h3",{attrs:{id:"生活常用调优参数"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#生活常用调优参数"}},[a._v("#")]),a._v(" 生活常用调优参数")]),a._v(" "),e("ul",[e("li",[a._v("-Xms：初始化堆内存，默认为物理内存的1/64，等价于 -XX:initialHeapSize")]),a._v(" "),e("li",[a._v("-Xmx：最大堆内存，默认为物理内存的1/4，等价于-XX:MaxHeapSize")]),a._v(" "),e("li",[a._v("-Xss：设计单个线程栈的大小，一般默认为512K~1024K，等价于 -XX:ThreadStackSize\n"),e("ul",[e("li",[a._v("使用 jinfo -flag ThreadStackSize   会发现 -XX:ThreadStackSize = 0")]),a._v(" "),e("li",[a._v("这个值的大小是取决于平台的")]),a._v(" "),e("li",[a._v("Linux/x64:1024KB")]),a._v(" "),e("li",[a._v("OS X：1024KB")]),a._v(" "),e("li",[a._v("Oracle Solaris：1024KB")]),a._v(" "),e("li",[a._v("Windows：取决于虚拟内存的大小")])])]),a._v(" "),e("li",[a._v("-Xmn：设置年轻代大小")]),a._v(" "),e("li",[a._v("-XX:MetaspaceSize：设置元空间大小\n"),e("ul",[e("li",[a._v("元空间的本质和永久代类似，都是对JVM规范中方法区的实现，不过元空间与永久代之间最大的区别在于：元空间并不在虚拟机中，而是使用本地内存，因此，默认情况下，元空间的大小仅受本地内存限制。")]),a._v(" "),e("li",[a._v("-Xms10m -Xmx10m -XX:MetaspaceSize=1024m  -XX:+PrintFlagsFinal")]),a._v(" "),e("li",[a._v("但是默认的元空间大小：只有20多M")]),a._v(" "),e("li",[a._v("为了防止在频繁的实例化对象的时候，让元空间出现OOM，因此可以把元空间设置的大一些")])])]),a._v(" "),e("li",[a._v("-XX:PrintGCDetails：输出详细GC收集日志信息\n"),e("ul",[e("li",[a._v("GC")]),a._v(" "),e("li",[a._v("Full GC")])])])]),a._v(" "),e("p",[a._v("GC日志收集流程图")]),a._v(" "),e("p",[e("img",{attrs:{src:"/images/image-20200322185639902.png",alt:"image-20200322185639902"}})]),a._v(" "),e("p",[a._v("我们使用一段代码，制造出垃圾回收的过程")]),a._v(" "),e("p",[a._v("首先我们设置一下程序的启动配置:  设置初始堆内存为10M，最大堆内存为10M")]),a._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("-Xms10m -Xmx10m -XX:+PrintGCDetails\n")])]),a._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[a._v("1")]),e("br")])]),e("p",[a._v("然后用下列代码，创建一个 非常大空间的byte类型数组")]),a._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("byte [] byteArray = new byte[50 * 1024 * 1024];\n")])]),a._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[a._v("1")]),e("br")])]),e("p",[a._v("运行后，发现会出现下列错误，这就是OOM：java内存溢出，也就是堆空间不足")]),a._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v('Exception in thread "main" java.lang.OutOfMemoryError: Java heap space\n\tat com.moxi.interview.study.GC.HelloGC.main(HelloGC.java:22)\n')])]),a._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[a._v("1")]),e("br"),e("span",{staticClass:"line-number"},[a._v("2")]),e("br")])]),e("p",[a._v("同时还打印出了GC垃圾回收时候的详情")]),a._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("[GC (Allocation Failure) [PSYoungGen: 1972K->504K(2560K)] 1972K->740K(9728K), 0.0156109 secs] [Times: user=0.00 sys=0.00, real=0.03 secs] \n[GC (Allocation Failure) [PSYoungGen: 504K->480K(2560K)] 740K->772K(9728K), 0.0007815 secs] [Times: user=0.00 sys=0.00, real=0.00 secs] \n[Full GC (Allocation Failure) [PSYoungGen: 480K->0K(2560K)] [ParOldGen: 292K->648K(7168K)] 772K->648K(9728K), [Metaspace: 3467K->3467K(1056768K)], 0.0080505 secs] [Times: user=0.00 sys=0.00, real=0.01 secs] \n[GC (Allocation Failure) [PSYoungGen: 0K->0K(2560K)] 648K->648K(9728K), 0.0003035 secs] [Times: user=0.00 sys=0.00, real=0.00 secs] \n[Full GC (Allocation Failure) [PSYoungGen: 0K->0K(2560K)] [ParOldGen: 648K->630K(7168K)] 648K->630K(9728K), [Metaspace: 3467K->3467K(1056768K)], 0.0058502 secs] [Times: user=0.00 sys=0.00, real=0.01 secs] \nHeap\n PSYoungGen      total 2560K, used 80K [0x00000000ffd00000, 0x0000000100000000, 0x0000000100000000)\n  eden space 2048K, 3% used [0x00000000ffd00000,0x00000000ffd143d8,0x00000000fff00000)\n  from space 512K, 0% used [0x00000000fff00000,0x00000000fff00000,0x00000000fff80000)\n  to   space 512K, 0% used [0x00000000fff80000,0x00000000fff80000,0x0000000100000000)\n ParOldGen       total 7168K, used 630K [0x00000000ff600000, 0x00000000ffd00000, 0x00000000ffd00000)\n  object space 7168K, 8% used [0x00000000ff600000,0x00000000ff69dbd0,0x00000000ffd00000)\n Metaspace       used 3510K, capacity 4500K, committed 4864K, reserved 1056768K\n  class space    used 389K, capacity 392K, committed 512K, reserved 1048576K\n")])]),a._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[a._v("1")]),e("br"),e("span",{staticClass:"line-number"},[a._v("2")]),e("br"),e("span",{staticClass:"line-number"},[a._v("3")]),e("br"),e("span",{staticClass:"line-number"},[a._v("4")]),e("br"),e("span",{staticClass:"line-number"},[a._v("5")]),e("br"),e("span",{staticClass:"line-number"},[a._v("6")]),e("br"),e("span",{staticClass:"line-number"},[a._v("7")]),e("br"),e("span",{staticClass:"line-number"},[a._v("8")]),e("br"),e("span",{staticClass:"line-number"},[a._v("9")]),e("br"),e("span",{staticClass:"line-number"},[a._v("10")]),e("br"),e("span",{staticClass:"line-number"},[a._v("11")]),e("br"),e("span",{staticClass:"line-number"},[a._v("12")]),e("br"),e("span",{staticClass:"line-number"},[a._v("13")]),e("br"),e("span",{staticClass:"line-number"},[a._v("14")]),e("br")])]),e("p",[a._v("问题发生的原因：")]),a._v(" "),e("p",[a._v("因为们通过 -Xms10m  和 -Xmx10m 只给Java堆栈设置了10M的空间，但是创建了50M的对象，因此就会出现空间不足，而导致出错")]),a._v(" "),e("p",[a._v("同时在垃圾收集的时候，我们看到有两个对象：GC 和 Full GC")]),a._v(" "),e("h4",{attrs:{id:"gc垃圾收集"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#gc垃圾收集"}},[a._v("#")]),a._v(" GC垃圾收集")]),a._v(" "),e("p",[a._v("GC在新生区")]),a._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("[GC (Allocation Failure) [PSYoungGen: 1972K->504K(2560K)] 1972K->740K(9728K), 0.0156109 secs] [Times: user=0.00 sys=0.00, real=0.03 secs]\n")])]),a._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[a._v("1")]),e("br")])]),e("p",[a._v("GC (Allocation Failure)：表示分配失败，那么就需要触发年轻代空间中的内容被回收")]),a._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("[PSYoungGen: 1972K->504K(2560K)] 1972K->740K(9728K), 0.0156109 secs]\n")])]),a._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[a._v("1")]),e("br")])]),e("p",[a._v("参数对应的图为：")]),a._v(" "),e("p",[e("img",{attrs:{src:"/images/image-20200323124000865.png",alt:"image-20200323124000865"}})]),a._v(" "),e("h4",{attrs:{id:"full-gc垃圾回收"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#full-gc垃圾回收"}},[a._v("#")]),a._v(" Full GC垃圾回收")]),a._v(" "),e("p",[a._v("Full GC大部分发生在养老区")]),a._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("[Full GC (Allocation Failure) [PSYoungGen: 0K->0K(2560K)] [ParOldGen: 648K->630K(7168K)] 648K->630K(9728K), [Metaspace: 3467K->3467K(1056768K)], 0.0058502 secs] [Times: user=0.00 sys=0.00, real=0.01 secs] \n")])]),a._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[a._v("1")]),e("br")])]),e("p",[e("img",{attrs:{src:"/images/image-20200323125839653.png",alt:"image-20200323125839653"}})]),a._v(" "),e("p",[a._v("规律：")]),a._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("[名称： GC前内存占用 -> GC后内存占用 (该区内存总大小)]\n")])]),a._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[a._v("1")]),e("br")])]),e("p",[a._v("当我们出现了老年代都扛不住的时候，就会出现OOM异常")]),a._v(" "),e("h3",{attrs:{id:"xx-survivorratio"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#xx-survivorratio"}},[a._v("#")]),a._v(" -XX:SurvivorRatio")]),a._v(" "),e("p",[a._v("调节新生代中 eden 和 S0、S1的空间比例，默认为 -XX:SuriviorRatio=8，Eden:S0:S1 = 8:1:1")]),a._v(" "),e("p",[a._v("加入设置成 -XX:SurvivorRatio=4，则为 Eden:S0:S1 = 4:1:1")]),a._v(" "),e("p",[a._v("SurvivorRatio值就是设置eden区的比例占多少，S0和S1相同")]),a._v(" "),e("p",[a._v("Java堆从GC的角度还可以细分为：新生代（Eden区，From Survivor区合To Survivor区）和老年代")]),a._v(" "),e("p",[e("img",{attrs:{src:"/images/image-20200323130442088.png",alt:"image-20200323130442088"}})]),a._v(" "),e("ul",[e("li",[a._v("eden、SurvivorFrom复制到SurvivorTo，年龄 + 1")])]),a._v(" "),e("p",[a._v("首先，当Eden区满的时候会触发第一次GC，把还活着的对象拷贝到SurvivorFrom去，当Eden区再次触发GC的时候会扫描Eden区合From区域，对这两个区域进行垃圾回收，经过这次回收后还存活的对象，则直接复制到To区域（如果对象的年龄已经到达老年的标准，则赋值到老年代区），通知把这些对象的年龄 + 1")]),a._v(" "),e("ul",[e("li",[a._v("清空eden、SurvivorFrom")])]),a._v(" "),e("p",[a._v("然后，清空eden，SurvivorFrom中的对象，也即复制之后有交换，谁空谁是to")]),a._v(" "),e("ul",[e("li",[a._v("SurvivorTo和SurvivorFrom互换")])]),a._v(" "),e("p",[a._v("最后，SurvivorTo和SurvivorFrom互换，原SurvivorTo成为下一次GC时的SurvivorFrom区，部分对象会在From和To区域中复制来复制去，如此交换15次（由JVM参数MaxTenuringThreshold决定，这个参数默认为15），最终如果还是存活，就存入老年代")]),a._v(" "),e("p",[e("img",{attrs:{src:"/images/image-20200323150946414.png",alt:"image-20200323150946414"}})]),a._v(" "),e("h3",{attrs:{id:"xx-newratio-了解"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#xx-newratio-了解"}},[a._v("#")]),a._v(" -XX:NewRatio（了解）")]),a._v(" "),e("p",[a._v("配置年轻代new 和老年代old 在堆结构的占比")]),a._v(" "),e("p",[a._v("默认： -XX:NewRatio=2 新生代占1，老年代2，年轻代占整个堆的1/3")]),a._v(" "),e("p",[a._v("-XX:NewRatio=4：新生代占1，老年代占4，年轻代占整个堆的1/5，NewRadio值就是设置老年代的占比，剩下的1个新生代")]),a._v(" "),e("p",[a._v("新生代特别小，会造成频繁的进行GC收集")]),a._v(" "),e("h3",{attrs:{id:"xx-maxtenuringthreshold"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#xx-maxtenuringthreshold"}},[a._v("#")]),a._v(" -XX:MaxTenuringThreshold")]),a._v(" "),e("p",[a._v("设置垃圾最大年龄，SurvivorTo和SurvivorFrom互换，原SurvivorTo成为下一次GC时的SurvivorFrom区，部分对象会在From和To区域中复制来复制去，如此交换15次（由JVM参数MaxTenuringThreshold决定，这个参数默认为15），最终如果还是存活，就存入老年代")]),a._v(" "),e("p",[a._v("这里就是调整这个次数的，默认是15，并且设置的值 在 0~15之间")]),a._v(" "),e("p",[a._v("查看默认进入老年代年龄：jinfo -flag MaxTenuringThreshold 17344")]),a._v(" "),e("p",[a._v("-XX:MaxTenuringThreshold=0：设置垃圾最大年龄。如果设置为0的话，则年轻对象不经过Survivor区，直接进入老年代。对于年老代比较多的应用，可以提高效率。如果将此值设置为一个较大的值，则年轻代对象会在Survivor区进行多次复制，这样可以增加对象再年轻代的存活时间，增加在年轻代即被回收的概念")])])}),[],!1,null,null,null);s.default=t.exports}}]);