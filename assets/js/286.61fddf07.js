(window.webpackJsonp=window.webpackJsonp||[]).push([[286],{982:function(a,e,s){"use strict";s.r(e);var n=s(5),t=Object(n.a)({},(function(){var a=this,e=a.$createElement,s=a._self._c||e;return s("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[s("h1",{attrs:{id:"java内存溢出oom"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#java内存溢出oom"}},[a._v("#")]),a._v(" Java内存溢出OOM")]),a._v(" "),s("h2",{attrs:{id:"经典错误"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#经典错误"}},[a._v("#")]),a._v(" 经典错误")]),a._v(" "),s("p",[a._v("JVM中常见的两个错误")]),a._v(" "),s("p",[a._v("StackoverFlowError ：栈溢出")]),a._v(" "),s("p",[a._v("OutofMemoryError: java heap space：堆溢出")]),a._v(" "),s("p",[a._v("除此之外，还有以下的错误")]),a._v(" "),s("ul",[s("li",[a._v("java.lang.StackOverflowError")]),a._v(" "),s("li",[a._v("java.lang.OutOfMemoryError：java heap space")]),a._v(" "),s("li",[a._v("java.lang.OutOfMemoryError：GC overhead limit exceeeded")]),a._v(" "),s("li",[a._v("java.lang.OutOfMemoryError：Direct buffer memory")]),a._v(" "),s("li",[a._v("java.lang.OutOfMemoryError：unable to create new native thread")]),a._v(" "),s("li",[a._v("java.lang.OutOfMemoryError：Metaspace")])]),a._v(" "),s("h2",{attrs:{id:"架构"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#架构"}},[a._v("#")]),a._v(" 架构")]),a._v(" "),s("p",[a._v("OutOfMemoryError和StackOverflowError是属于Error，不是Exception")]),a._v(" "),s("p",[s("img",{attrs:{src:"/images/image-20200324144802828.png",alt:"image-20200324144802828"}})]),a._v(" "),s("h2",{attrs:{id:"stackoverflowerror"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#stackoverflowerror"}},[a._v("#")]),a._v(" StackoverFlowError")]),a._v(" "),s("p",[a._v("堆栈溢出，我们有最简单的一个递归调用，就会造成堆栈溢出，也就是深度的方法调用")]),a._v(" "),s("p",[a._v("栈一般是512K，不断的深度调用，直到栈被撑破")]),a._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v('/**\n * @author: 陌溪\n * @create: 2020-03-24-14:42\n */\npublic class StackOverflowErrorDemo {\n\n    public static void main(String[] args) {\n        stackOverflowError();\n    }\n    /**\n     * 栈一般是512K，不断的深度调用，直到栈被撑破\n     * Exception in thread "main" java.lang.StackOverflowError\n     */\n    private static void stackOverflowError() {\n        stackOverflowError();\n    }\n}\n')])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br"),s("span",{staticClass:"line-number"},[a._v("3")]),s("br"),s("span",{staticClass:"line-number"},[a._v("4")]),s("br"),s("span",{staticClass:"line-number"},[a._v("5")]),s("br"),s("span",{staticClass:"line-number"},[a._v("6")]),s("br"),s("span",{staticClass:"line-number"},[a._v("7")]),s("br"),s("span",{staticClass:"line-number"},[a._v("8")]),s("br"),s("span",{staticClass:"line-number"},[a._v("9")]),s("br"),s("span",{staticClass:"line-number"},[a._v("10")]),s("br"),s("span",{staticClass:"line-number"},[a._v("11")]),s("br"),s("span",{staticClass:"line-number"},[a._v("12")]),s("br"),s("span",{staticClass:"line-number"},[a._v("13")]),s("br"),s("span",{staticClass:"line-number"},[a._v("14")]),s("br"),s("span",{staticClass:"line-number"},[a._v("15")]),s("br"),s("span",{staticClass:"line-number"},[a._v("16")]),s("br"),s("span",{staticClass:"line-number"},[a._v("17")]),s("br")])]),s("p",[a._v("运行结果")]),a._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v('Exception in thread "main" java.lang.StackOverflowError\n\tat com.moxi.interview.study.oom.StackOverflowErrorDemo.stackOverflowError(StackOverflowErrorDemo.java:17)\n')])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br")])]),s("h2",{attrs:{id:"outofmemoryerror"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#outofmemoryerror"}},[a._v("#")]),a._v(" OutOfMemoryError")]),a._v(" "),s("h3",{attrs:{id:"java-heap-space"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#java-heap-space"}},[a._v("#")]),a._v(" java heap space")]),a._v(" "),s("p",[a._v("创建了很多对象，导致堆空间不够存储")]),a._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("/**\n * Java堆内存不足\n * @author: 陌溪\n * @create: 2020-03-24-14:50\n */\npublic class JavaHeapSpaceDemo {\n    public static void main(String[] args) {\n\n        // 堆空间的大小 -Xms10m -Xmx10m\n        // 创建一个 80M的字节数组\n        byte [] bytes = new byte[80 * 1024 * 1024];\n    }\n}\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br"),s("span",{staticClass:"line-number"},[a._v("3")]),s("br"),s("span",{staticClass:"line-number"},[a._v("4")]),s("br"),s("span",{staticClass:"line-number"},[a._v("5")]),s("br"),s("span",{staticClass:"line-number"},[a._v("6")]),s("br"),s("span",{staticClass:"line-number"},[a._v("7")]),s("br"),s("span",{staticClass:"line-number"},[a._v("8")]),s("br"),s("span",{staticClass:"line-number"},[a._v("9")]),s("br"),s("span",{staticClass:"line-number"},[a._v("10")]),s("br"),s("span",{staticClass:"line-number"},[a._v("11")]),s("br"),s("span",{staticClass:"line-number"},[a._v("12")]),s("br"),s("span",{staticClass:"line-number"},[a._v("13")]),s("br")])]),s("p",[a._v("我们创建一个80M的数组，会直接出现Java heap space")]),a._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v('Exception in thread "main" java.lang.OutOfMemoryError: Java heap space\n')])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br")])]),s("h3",{attrs:{id:"gc-overhead-limit-exceeded"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#gc-overhead-limit-exceeded"}},[a._v("#")]),a._v(" GC overhead limit exceeded")]),a._v(" "),s("p",[a._v("GC回收时间过长时会抛出OutOfMemoryError，过长的定义是，超过了98%的时间用来做GC，并且回收了不到2%的堆内存")]),a._v(" "),s("p",[a._v("连续多次GC都只回收了不到2%的极端情况下，才会抛出。假设不抛出GC overhead limit 错误会造成什么情况呢？")]),a._v(" "),s("p",[a._v("那就是GC清理的这点内存很快会再次被填满，迫使GC再次执行，这样就形成了恶性循环，CPU的使用率一直都是100%，而GC却没有任何成果。")]),a._v(" "),s("p",[s("img",{attrs:{src:"/images/image-20200324150646260.png",alt:"image-20200324150646260"}})]),a._v(" "),s("p",[a._v("代码演示：")]),a._v(" "),s("p",[a._v("为了更快的达到效果，我们首先需要设置JVM启动参数")]),a._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("-Xms10m -Xmx10m -XX:+PrintGCDetails -XX:MaxDirectMemorySize=5m\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br")])]),s("p",[a._v("这个异常出现的步骤就是，我们不断的像list中插入String对象，直到启动GC回收")]),a._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v('/**\n * GC 回收超时\n * JVM参数配置: -Xms10m -Xmx10m -XX:+PrintGCDetails -XX:MaxDirectMemorySize=5m\n * @author: 陌溪\n * @create: 2020-03-24-15:14\n */\npublic class GCOverheadLimitDemo {\n    public static void main(String[] args) {\n        int i = 0;\n        List<String> list = new ArrayList<>();\n        try {\n            while(true) {\n                list.add(String.valueOf(++i).intern());\n            }\n        } catch (Exception e) {\n            System.out.println("***************i:" + i);\n            e.printStackTrace();\n            throw e;\n        } finally {\n\n        }\n\n    }\n}\n')])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br"),s("span",{staticClass:"line-number"},[a._v("3")]),s("br"),s("span",{staticClass:"line-number"},[a._v("4")]),s("br"),s("span",{staticClass:"line-number"},[a._v("5")]),s("br"),s("span",{staticClass:"line-number"},[a._v("6")]),s("br"),s("span",{staticClass:"line-number"},[a._v("7")]),s("br"),s("span",{staticClass:"line-number"},[a._v("8")]),s("br"),s("span",{staticClass:"line-number"},[a._v("9")]),s("br"),s("span",{staticClass:"line-number"},[a._v("10")]),s("br"),s("span",{staticClass:"line-number"},[a._v("11")]),s("br"),s("span",{staticClass:"line-number"},[a._v("12")]),s("br"),s("span",{staticClass:"line-number"},[a._v("13")]),s("br"),s("span",{staticClass:"line-number"},[a._v("14")]),s("br"),s("span",{staticClass:"line-number"},[a._v("15")]),s("br"),s("span",{staticClass:"line-number"},[a._v("16")]),s("br"),s("span",{staticClass:"line-number"},[a._v("17")]),s("br"),s("span",{staticClass:"line-number"},[a._v("18")]),s("br"),s("span",{staticClass:"line-number"},[a._v("19")]),s("br"),s("span",{staticClass:"line-number"},[a._v("20")]),s("br"),s("span",{staticClass:"line-number"},[a._v("21")]),s("br"),s("span",{staticClass:"line-number"},[a._v("22")]),s("br"),s("span",{staticClass:"line-number"},[a._v("23")]),s("br"),s("span",{staticClass:"line-number"},[a._v("24")]),s("br")])]),s("p",[a._v("运行结果")]),a._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v('[Full GC (Ergonomics) [PSYoungGen: 2047K->2047K(2560K)] [ParOldGen: 7106K->7106K(7168K)] 9154K->9154K(9728K), [Metaspace: 3504K->3504K(1056768K)], 0.0311093 secs] [Times: user=0.13 sys=0.00, real=0.03 secs] \n[Full GC (Ergonomics) [PSYoungGen: 2047K->0K(2560K)] [ParOldGen: 7136K->667K(7168K)] 9184K->667K(9728K), [Metaspace: 3540K->3540K(1056768K)], 0.0058093 secs] [Times: user=0.00 sys=0.00, real=0.01 secs] \nHeap\n PSYoungGen      total 2560K, used 114K [0x00000000ffd00000, 0x0000000100000000, 0x0000000100000000)\n  eden space 2048K, 5% used [0x00000000ffd00000,0x00000000ffd1c878,0x00000000fff00000)\n  from space 512K, 0% used [0x00000000fff80000,0x00000000fff80000,0x0000000100000000)\n  to   space 512K, 0% used [0x00000000fff00000,0x00000000fff00000,0x00000000fff80000)\n ParOldGen       total 7168K, used 667K [0x00000000ff600000, 0x00000000ffd00000, 0x00000000ffd00000)\n  object space 7168K, 9% used [0x00000000ff600000,0x00000000ff6a6ff8,0x00000000ffd00000)\n Metaspace       used 3605K, capacity 4540K, committed 4864K, reserved 1056768K\n  class space    used 399K, capacity 428K, committed 512K, reserved 1048576K\n  \n \nException in thread "main" java.lang.OutOfMemoryError: GC overhead limit exceeded\n\tat java.lang.Integer.toString(Integer.java:403)\n\tat java.lang.String.valueOf(String.java:3099)\n\tat com.moxi.interview.study.oom.GCOverheadLimitDemo.main(GCOverheadLimitDemo.java:18)\n')])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br"),s("span",{staticClass:"line-number"},[a._v("3")]),s("br"),s("span",{staticClass:"line-number"},[a._v("4")]),s("br"),s("span",{staticClass:"line-number"},[a._v("5")]),s("br"),s("span",{staticClass:"line-number"},[a._v("6")]),s("br"),s("span",{staticClass:"line-number"},[a._v("7")]),s("br"),s("span",{staticClass:"line-number"},[a._v("8")]),s("br"),s("span",{staticClass:"line-number"},[a._v("9")]),s("br"),s("span",{staticClass:"line-number"},[a._v("10")]),s("br"),s("span",{staticClass:"line-number"},[a._v("11")]),s("br"),s("span",{staticClass:"line-number"},[a._v("12")]),s("br"),s("span",{staticClass:"line-number"},[a._v("13")]),s("br"),s("span",{staticClass:"line-number"},[a._v("14")]),s("br"),s("span",{staticClass:"line-number"},[a._v("15")]),s("br"),s("span",{staticClass:"line-number"},[a._v("16")]),s("br"),s("span",{staticClass:"line-number"},[a._v("17")]),s("br")])]),s("p",[a._v("我们能够看到 多次Full GC，并没有清理出空间，在多次执行GC操作后，就抛出异常 GC overhead limit")]),a._v(" "),s("h3",{attrs:{id:"direct-buffer-memory"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#direct-buffer-memory"}},[a._v("#")]),a._v(" Direct buffer memory")]),a._v(" "),s("p",[a._v("Netty + NIO：这是由于NIO引起的")]),a._v(" "),s("p",[a._v("写NIO程序的时候经常会使用ByteBuffer来读取或写入数据，这是一种基于通道(Channel) 与 缓冲区(Buffer)的I/O方式，它可以使用Native 函数库直接分配堆外内存，然后通过一个存储在Java堆里面的DirectByteBuffer对象作为这块内存的引用进行操作。这样能在一些场景中显著提高性能，因为避免了在Java堆和Native堆中来回复制数据。")]),a._v(" "),s("p",[a._v("ByteBuffer.allocate(capability)：第一种方式是分配JVM堆内存，属于GC管辖范围，由于需要拷贝所以速度相对较慢")]),a._v(" "),s("p",[a._v("ByteBuffer.allocteDirect(capability)：第二种方式是分配OS本地内存，不属于GC管辖范围，由于不需要内存的拷贝，所以速度相对较快")]),a._v(" "),s("p",[a._v("但如果不断分配本地内存，堆内存很少使用，那么JVM就不需要执行GC，DirectByteBuffer对象就不会被回收，这时候怼内存充足，但本地内存可能已经使用光了，再次尝试分配本地内存就会出现OutOfMemoryError，那么程序就奔溃了。")]),a._v(" "),s("p",[a._v("一句话说：本地内存不足，但是堆内存充足的时候，就会出现这个问题")]),a._v(" "),s("p",[a._v("我们使用 -XX:MaxDirectMemorySize=5m 配置能使用的堆外物理内存为5M")]),a._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("-Xms10m -Xmx10m -XX:+PrintGCDetails -XX:MaxDirectMemorySize=5m\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br")])]),s("p",[a._v("然后我们申请一个6M的空间")]),a._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("// 只设置了5M的物理内存使用，但是却分配 6M的空间\nByteBuffer bb = ByteBuffer.allocateDirect(6 * 1024 * 1024);\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br")])]),s("p",[a._v("这个时候，运行就会出现问题了")]),a._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v('配置的maxDirectMemory：5.0MB\n[GC (System.gc()) [PSYoungGen: 2030K->488K(2560K)] 2030K->796K(9728K), 0.0008326 secs] [Times: user=0.00 sys=0.00, real=0.00 secs] \n[Full GC (System.gc()) [PSYoungGen: 488K->0K(2560K)] [ParOldGen: 308K->712K(7168K)] 796K->712K(9728K), [Metaspace: 3512K->3512K(1056768K)], 0.0052052 secs] [Times: user=0.09 sys=0.00, real=0.00 secs] \nException in thread "main" java.lang.OutOfMemoryError: Direct buffer memory\n\tat java.nio.Bits.reserveMemory(Bits.java:693)\n\tat java.nio.DirectByteBuffer.<init>(DirectByteBuffer.java:123)\n\tat java.nio.ByteBuffer.allocateDirect(ByteBuffer.java:311)\n\tat com.moxi.interview.study.oom.DIrectBufferMemoryDemo.main(DIrectBufferMemoryDemo.java:19)\n')])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br"),s("span",{staticClass:"line-number"},[a._v("3")]),s("br"),s("span",{staticClass:"line-number"},[a._v("4")]),s("br"),s("span",{staticClass:"line-number"},[a._v("5")]),s("br"),s("span",{staticClass:"line-number"},[a._v("6")]),s("br"),s("span",{staticClass:"line-number"},[a._v("7")]),s("br"),s("span",{staticClass:"line-number"},[a._v("8")]),s("br")])]),s("h3",{attrs:{id:"unable-to-create-new-native-thread"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#unable-to-create-new-native-thread"}},[a._v("#")]),a._v(" unable to create new native thread")]),a._v(" "),s("p",[a._v("不能够创建更多的新的线程了，也就是说创建线程的上限达到了")]),a._v(" "),s("p",[a._v("在高并发场景的时候，会应用到")]),a._v(" "),s("p",[a._v("高并发请求服务器时，经常会出现如下异常"),s("code",[a._v("java.lang.OutOfMemoryError:unable to create new native thread")]),a._v("，准确说该native thread异常与对应的平台有关")]),a._v(" "),s("p",[a._v("导致原因：")]),a._v(" "),s("ul",[s("li",[a._v("应用创建了太多线程，一个应用进程创建多个线程，超过系统承载极限")]),a._v(" "),s("li",[a._v("服务器并不允许你的应用程序创建这么多线程，linux系统默认运行单个进程可以创建的线程为1024个，如果应用创建超过这个数量，就会报 "),s("code",[a._v("java.lang.OutOfMemoryError:unable to create new native thread")])])]),a._v(" "),s("p",[a._v("解决方法：")]),a._v(" "),s("ol",[s("li",[a._v("想办法降低你应用程序创建线程的数量，分析应用是否真的需要创建这么多线程，如果不是，改代码将线程数降到最低")]),a._v(" "),s("li",[a._v("对于有的应用，确实需要创建很多线程，远超过linux系统默认1024个线程限制，可以通过修改linux服务器配置，扩大linux默认限制")])]),a._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v('/**\n * 无法创建更多的线程\n *\n * @author: 陌溪\n * @create: 2020-03-24-17:02\n */\npublic class UnableCreateNewThreadDemo {\n    public static void main(String[] args) {\n        for (int i = 0; ; i++) {\n            System.out.println("************** i = " + i);\n            new Thread(() -> {\n                try {\n                    TimeUnit.SECONDS.sleep(Integer.MAX_VALUE);\n                } catch (InterruptedException e) {\n                    e.printStackTrace();\n                }\n            }, String.valueOf(i)).start();\n        }\n    }\n}\n')])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br"),s("span",{staticClass:"line-number"},[a._v("3")]),s("br"),s("span",{staticClass:"line-number"},[a._v("4")]),s("br"),s("span",{staticClass:"line-number"},[a._v("5")]),s("br"),s("span",{staticClass:"line-number"},[a._v("6")]),s("br"),s("span",{staticClass:"line-number"},[a._v("7")]),s("br"),s("span",{staticClass:"line-number"},[a._v("8")]),s("br"),s("span",{staticClass:"line-number"},[a._v("9")]),s("br"),s("span",{staticClass:"line-number"},[a._v("10")]),s("br"),s("span",{staticClass:"line-number"},[a._v("11")]),s("br"),s("span",{staticClass:"line-number"},[a._v("12")]),s("br"),s("span",{staticClass:"line-number"},[a._v("13")]),s("br"),s("span",{staticClass:"line-number"},[a._v("14")]),s("br"),s("span",{staticClass:"line-number"},[a._v("15")]),s("br"),s("span",{staticClass:"line-number"},[a._v("16")]),s("br"),s("span",{staticClass:"line-number"},[a._v("17")]),s("br"),s("span",{staticClass:"line-number"},[a._v("18")]),s("br"),s("span",{staticClass:"line-number"},[a._v("19")]),s("br"),s("span",{staticClass:"line-number"},[a._v("20")]),s("br")])]),s("p",[a._v("这个时候，就会出现下列的错误，线程数大概在 900多个")]),a._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v('Exception in thread "main" java.lang.OutOfMemoryError: unable to cerate new native thread\n')])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br")])]),s("p",[a._v("如何查看线程数")]),a._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("ulimit -u\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br")])]),s("h3",{attrs:{id:"metaspace"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#metaspace"}},[a._v("#")]),a._v(" Metaspace")]),a._v(" "),s("p",[a._v("元空间内存不足，Matespace元空间应用的是本地内存")]),a._v(" "),s("p",[s("code",[a._v("-XX:MetaspaceSize")]),a._v(" 的处理化大小为20M")]),a._v(" "),s("h4",{attrs:{id:"元空间是什么"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#元空间是什么"}},[a._v("#")]),a._v(" 元空间是什么")]),a._v(" "),s("p",[a._v("元空间就是我们的方法区，存放的是类模板，类信息，常量池等")]),a._v(" "),s("p",[a._v("Metaspace是方法区HotSpot中的实现，它与持久代最大的区别在于：Metaspace并不在虚拟内存中，而是使用本地内存，也即在java8中，class metadata（the virtual machines internal presentation of Java class），被存储在叫做Matespace的native memory")]),a._v(" "),s("p",[a._v("永久代（java8后背元空间Metaspace取代了）存放了以下信息：")]),a._v(" "),s("ul",[s("li",[a._v("虚拟机加载的类信息")]),a._v(" "),s("li",[a._v("常量池")]),a._v(" "),s("li",[a._v("静态变量")]),a._v(" "),s("li",[a._v("即时编译后的代码")])]),a._v(" "),s("p",[a._v("模拟Metaspace空间溢出，我们不断生成类 往元空间里灌输，类占据的空间总会超过Metaspace指定的空间大小")]),a._v(" "),s("h4",{attrs:{id:"代码"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#代码"}},[a._v("#")]),a._v(" 代码")]),a._v(" "),s("p",[a._v("在模拟异常生成时候，因为初始化的元空间为20M，因此我们使用JVM参数调整元空间的大小，为了更好的效果")]),a._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("-XX:MetaspaceSize=8m -XX:MaxMetaspaceSize=8m\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br")])]),s("p",[a._v("代码如下：")]),a._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v('/**\n * 元空间溢出\n *\n * @author: 陌溪\n * @create: 2020-03-24-17:32\n */\npublic class MetaspaceOutOfMemoryDemo {\n\n    // 静态类\n    static class OOMTest {\n\n    }\n\n    public static void main(final String[] args) {\n        // 模拟计数多少次以后发生异常\n        int i =0;\n        try {\n            while (true) {\n                i++;\n                // 使用Spring的动态字节码技术\n                Enhancer enhancer = new Enhancer();\n                enhancer.setSuperclass(OOMTest.class);\n                enhancer.setUseCache(false);\n                enhancer.setCallback(new MethodInterceptor() {\n                    @Override\n                    public Object intercept(Object o, Method method, Object[] objects, MethodProxy methodProxy) throws Throwable {\n                        return methodProxy.invokeSuper(o, args);\n                    }\n                });\n            }\n        } catch (Exception e) {\n            System.out.println("发生异常的次数:" + i);\n            e.printStackTrace();\n        } finally {\n\n        }\n\n    }\n}\n')])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br"),s("span",{staticClass:"line-number"},[a._v("3")]),s("br"),s("span",{staticClass:"line-number"},[a._v("4")]),s("br"),s("span",{staticClass:"line-number"},[a._v("5")]),s("br"),s("span",{staticClass:"line-number"},[a._v("6")]),s("br"),s("span",{staticClass:"line-number"},[a._v("7")]),s("br"),s("span",{staticClass:"line-number"},[a._v("8")]),s("br"),s("span",{staticClass:"line-number"},[a._v("9")]),s("br"),s("span",{staticClass:"line-number"},[a._v("10")]),s("br"),s("span",{staticClass:"line-number"},[a._v("11")]),s("br"),s("span",{staticClass:"line-number"},[a._v("12")]),s("br"),s("span",{staticClass:"line-number"},[a._v("13")]),s("br"),s("span",{staticClass:"line-number"},[a._v("14")]),s("br"),s("span",{staticClass:"line-number"},[a._v("15")]),s("br"),s("span",{staticClass:"line-number"},[a._v("16")]),s("br"),s("span",{staticClass:"line-number"},[a._v("17")]),s("br"),s("span",{staticClass:"line-number"},[a._v("18")]),s("br"),s("span",{staticClass:"line-number"},[a._v("19")]),s("br"),s("span",{staticClass:"line-number"},[a._v("20")]),s("br"),s("span",{staticClass:"line-number"},[a._v("21")]),s("br"),s("span",{staticClass:"line-number"},[a._v("22")]),s("br"),s("span",{staticClass:"line-number"},[a._v("23")]),s("br"),s("span",{staticClass:"line-number"},[a._v("24")]),s("br"),s("span",{staticClass:"line-number"},[a._v("25")]),s("br"),s("span",{staticClass:"line-number"},[a._v("26")]),s("br"),s("span",{staticClass:"line-number"},[a._v("27")]),s("br"),s("span",{staticClass:"line-number"},[a._v("28")]),s("br"),s("span",{staticClass:"line-number"},[a._v("29")]),s("br"),s("span",{staticClass:"line-number"},[a._v("30")]),s("br"),s("span",{staticClass:"line-number"},[a._v("31")]),s("br"),s("span",{staticClass:"line-number"},[a._v("32")]),s("br"),s("span",{staticClass:"line-number"},[a._v("33")]),s("br"),s("span",{staticClass:"line-number"},[a._v("34")]),s("br"),s("span",{staticClass:"line-number"},[a._v("35")]),s("br"),s("span",{staticClass:"line-number"},[a._v("36")]),s("br"),s("span",{staticClass:"line-number"},[a._v("37")]),s("br"),s("span",{staticClass:"line-number"},[a._v("38")]),s("br"),s("span",{staticClass:"line-number"},[a._v("39")]),s("br")])]),s("p",[a._v("会出现以下错误：")]),a._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("发生异常的次数: 201\njava.lang.OutOfMemoryError:Metaspace\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br")])])])}),[],!1,null,null,null);e.default=t.exports}}]);