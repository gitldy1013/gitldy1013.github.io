(window.webpackJsonp=window.webpackJsonp||[]).push([[875],{1570:function(e,r,t){"use strict";t.r(r);var a=t(5),n=Object(a.a)({},(function(){var e=this,r=e.$createElement,t=e._self._c||r;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h1",{attrs:{id:"dubbo想要个网关怎么办-试试整合spring-cloud-gateway"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#dubbo想要个网关怎么办-试试整合spring-cloud-gateway"}},[e._v("#")]),e._v(" Dubbo想要个网关怎么办？试试整合Spring Cloud Gateway")]),e._v(" "),t("p",[e._v("2020.06.28 08:27 1239浏览")]),e._v(" "),t("p",[t("img",{attrs:{src:"/img/5ef60e000001eaa710800264.jpg",alt:"图片描述"}})]),e._v(" "),t("h2",{attrs:{id:"_1-背景"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-背景"}},[e._v("#")]),e._v(" 1.背景")]),e._v(" "),t("p",[e._v("在微服务架构中 "),t("strong",[e._v("API网关")]),e._v(" 非常重要，网关作为全局流量入口并不单单是一个反向路由，更多的是把各个边缘服务(Web层)的各种共性需求抽取出来放在一个公共的“服务”(网关)中实现，例如安全认证、权限控制、限流熔断、监控、跨域处理、聚合API文档等公共功能。")]),e._v(" "),t("p",[e._v("在以 "),t("strong",[e._v("Dubbo")]),e._v(" 框架体系来构建的微服务架构下想要增加API网关，如果不想自研开发的情况下在目前的开源社区中几乎没有找到支持dubbo协议的主流网关，但是 Spring Cloud 体系下却有两个非常热门的开源API网关可以选择；本文主要介绍如何通过 "),t("code",[e._v("Nacos")]),e._v(" 整合 "),t("code",[e._v("Spring Cloud Gateway")]),e._v(" 与 "),t("code",[e._v("Dubbo 服务")]),e._v("。")]),e._v(" "),t("h2",{attrs:{id:"_2-传统-dubbo-架构"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-传统-dubbo-架构"}},[e._v("#")]),e._v(" 2.传统 dubbo 架构")]),e._v(" "),t("p",[e._v("dubbo属于rpc调用，所以必须提供一个web层的服务作为http入口给客户端调用，并在上面提供安全认证等基础功能，而web层前面对接Nginx等反向代理用于统一入口和负载均衡。")]),e._v(" "),t("blockquote",[t("p",[e._v("web层一般是根据业务模块来切分的，用于聚合某个业务模块所依赖的各个service服务")])]),e._v(" "),t("p",[t("img",{attrs:{src:"/img/5ef60e180001f0b908201093.jpg",alt:"图片描述"}}),t("br"),e._v(" "),t("strong",[e._v("PS")]),e._v("：我们能否把上图中的web层全部整合在一起成为一个API网关呢？(不建议这样做)")]),e._v(" "),t("p",[e._v("因为这样的web层并没有实现 "),t("strong",[e._v("泛化调用")]),e._v(" (不需要引入接口 jar 包，而是直接通过 GenericService 接口来发起服务调用，参数及返回值中的所有 pojo均用 map 表示。泛化调用对于服务端无需关注，按正常服务进行暴露即可。) 必须引入所有dubbo服务的api依赖，会使得网关变得非常不稳定，任何服务的接口变更都需要修改网关中的api依赖！")]),e._v(" "),t("h2",{attrs:{id:"_3-整合-srping-cloud-gateway-网关"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-整合-srping-cloud-gateway-网关"}},[e._v("#")]),e._v(" 3.整合 Srping Cloud Gateway 网关")]),e._v(" "),t("p",[e._v("下面就开始聊聊直接拿热门的 "),t("code",[e._v("Srping Cloud Gateway")]),e._v(" 来作为dubbo架构体系的网关是否可行，首先该API网关是属于 Spring Cloud 体系下的组件之一，要整合dubbo的话需要解决以下问题：")]),e._v(" "),t("ol",[t("li",[e._v("打通注册中心：spring cloud gateway 需要通过注册中心发现下游服务，而 dubbo 也需要通过注册中心实现服务的注册与发现，如果两者的注册中心不能打通的话就会变成双注册中心架构就非常复杂了！")]),e._v(" "),t("li",[e._v("协议转换： gateway 使用http传输协议调用下游服务，而dubbo服务默认使用的是tcp传输协议")])]),e._v(" "),t("blockquote",[t("p",[e._v("上面提到的第一个问题“打通注册中心”其实已经不是问题了，目前dubbo支持 "),t("code",[e._v("Zookeeper")]),e._v(" 与 "),t("code",[e._v("Nacos")]),e._v(" 两个注册中心，而 Spring Cloud 自从把 "),t("code",[e._v("@EnableEurekaClient")]),e._v(" 改为 "),t("code",[e._v("@EnableDiscoveryClient")]),e._v(" 之后已经基本上支持所有主流的注册中心了，本文将使用 "),t("code",[e._v("Nacos")]),e._v(" 作为注册中心打通两者")])]),e._v(" "),t("h3",{attrs:{id:"_3-1-方式一"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-方式一"}},[e._v("#")]),e._v(" 3.1. 方式一")]),e._v(" "),t("p",[e._v("把传统dubbo架构中的 "),t("code",[e._v("Nginx")]),e._v(" 替换为 "),t("code",[e._v("Spring Cloud Gateway")]),e._v(" ，并把 "),t("code",[e._v("安全认证")]),e._v(" 等共性功能前移至网关处实现"),t("br"),e._v(" "),t("img",{attrs:{src:"/img/5ef60e6e0001187108581057.jpg",alt:"图片描述"}})]),e._v(" "),t("blockquote",[t("p",[e._v("由于web层服务本身提供的就是http接口，所以网关层无需作协议转换，但是由于 "),t("code",[e._v("安全认证")]),e._v(" 前移至网关了需要通过网络隔离的手段防止被绕过网关直接请求后面的web层")])]),e._v(" "),t("h3",{attrs:{id:"_3-2-方式二"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-2-方式二"}},[e._v("#")]),e._v(" 3.2. 方式二")]),e._v(" "),t("p",[e._v("dubbo服务本身修改或添加 "),t("code",[e._v("rest")]),e._v(" 传输协议的支持，这样网关就可以通过http传输协议与dubbo服务通信了")]),e._v(" "),t("blockquote",[t("p",[e._v("rest传输协议：基于标准的Java REST API——JAX-RS 2.0（Java API for RESTful Web Services的简写）实现的REST调用支持")])]),e._v(" "),t("p",[t("img",{attrs:{src:"/img/5ef60e7d000122d108590775.jpg",alt:"图片描述"}})]),e._v(" "),t("blockquote",[t("p",[e._v("目前版本的dubbo已经支持dubbo、rest、rmi、hessian、http、webservice、thrift、redis等10种传输协议了，并且还支持同一个服务同时定义多种协议，例如配置 protocol = { “dubbo”, “rest” } 则该服务同时支持 "),t("code",[e._v("dubbo")]),e._v(" 与 "),t("code",[e._v("rest")]),e._v(" 两种传输协议")])]),e._v(" "),t("h3",{attrs:{id:"_3-3-总结"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-3-总结"}},[e._v("#")]),e._v(" 3.3. 总结")]),e._v(" "),t("p",[t("strong",[e._v("方式一")]),e._v(" 对比 "),t("strong",[e._v("方式二")]),e._v(" 多了一层web服务所以多了一次网络调用开销，但是优点是各自的职责明确单一，web层可以作为聚合层用于聚合多个service服务的结果经过融合加工一并返回给前端，所以这种架构下能大大减少服务的 "),t("strong",[e._v("循环依赖")])]),e._v(" "),t("h2",{attrs:{id:"_4-代码实践"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-代码实践"}},[e._v("#")]),e._v(" 4.代码实践")]),e._v(" "),t("h3",{attrs:{id:"依赖环境"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#依赖环境"}},[e._v("#")]),e._v(" 依赖环境")]),e._v(" "),t("ul",[t("li",[e._v("lombok")]),e._v(" "),t("li",[e._v("jdk 1.8")]),e._v(" "),t("li",[e._v("Nacos 1.3")]),e._v(" "),t("li",[e._v("Spring Boot 2.2.8.RELEASE")]),e._v(" "),t("li",[e._v("Spring Cloud Hoxton.SR5")]),e._v(" "),t("li",[e._v("Spring Cloud Alibaba 2.2.1.RELEASE")])]),e._v(" "),t("p",[e._v("在根目录的 "),t("code",[e._v("pom.xml")]),e._v(" 中定义全局的依赖版本")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[e._v("    <properties>\n        <maven.compiler.source>1.8</maven.compiler.source>\n        <maven.compiler.target>1.8</maven.compiler.target>\n        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n        <java.version>8</java.version>\n\n        <spring-boot-dependencies.version>2.2.8.RELEASE</spring-boot-dependencies.version>\n        <spring-cloud-dependencies.version>Hoxton.SR5</spring-cloud-dependencies.version>\n        <spring-cloud-alibaba-dependencies.version>2.2.1.RELEASE</spring-cloud-alibaba-dependencies.version>\n        <jaxrs.version>3.12.1.Final</jaxrs.version>\n    </properties>\n\n    <dependencyManagement>\n        <dependencies>\n            <dependency>\n                <groupId>org.springframework.boot</groupId>\n                <artifactId>spring-boot-dependencies</artifactId>\n                <version>${spring-boot-dependencies.version}</version>\n                <type>pom</type>\n                <scope>import</scope>\n            </dependency>\n\n            <dependency>\n                <groupId>org.springframework.cloud</groupId>\n                <artifactId>spring-cloud-dependencies</artifactId>\n                <version>${spring-cloud-dependencies.version}</version>\n                <type>pom</type>\n                <scope>import</scope>\n            </dependency>\n\n            <dependency>\n                <groupId>com.alibaba.cloud</groupId>\n                <artifactId>spring-cloud-alibaba-dependencies</artifactId>\n                <version>${spring-cloud-alibaba-dependencies.version}</version>\n                <type>pom</type>\n                <scope>import</scope>\n            </dependency>\n        </dependencies>\n    </dependencyManagement>\n")])])]),t("h3",{attrs:{id:"_4-1-创建dubbo-api工程"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-1-创建dubbo-api工程"}},[e._v("#")]),e._v(" 4.1. 创建dubbo-api工程")]),e._v(" "),t("p",[e._v("分别定义两个api接口")]),e._v(" "),t("p",[e._v("DubboService 使用dubbo协议的服务")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[e._v("public interface DubboService {\n    String test(String param);\n}\n")])])]),t("p",[e._v("RestService 使用rest协议的服务")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[e._v("public interface RestService {\n    String test(String param);\n}\n")])])]),t("h3",{attrs:{id:"_4-2-创建web-dubbo工程"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-2-创建web-dubbo工程"}},[e._v("#")]),e._v(" 4.2. 创建web-dubbo工程")]),e._v(" "),t("p",[e._v("使用 "),t("strong",[e._v("方式一")]),e._v(" 整合对接网关，这里为了简化在同一个服务下只使用逻辑分层定义controller层与service层，并没有做服务拆分")]),e._v(" "),t("h4",{attrs:{id:"_4-2-1-创建配置"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-2-1-创建配置"}},[e._v("#")]),e._v(" 4.2.1. 创建配置")]),e._v(" "),t("p",[e._v("定义 spring boot 配置")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[e._v("server:\n  port: 8081\n\nspring:\n  application:\n    name: cmcc-web-dubbo\n  main:\n    allow-bean-definition-overriding: true\n  cloud:\n    nacos:\n      server-addr: 192.168.28.130:8848\n      username: nacos\n      password: xxxxx\n")])])]),t("blockquote",[t("p",[t("code",[e._v("server.port")]),e._v("：配置应用服务器暴露的端口")]),e._v(" "),t("p",[t("code",[e._v("spring.cloud.nacos")]),e._v("：配置 spring cloud 的注册中心相关参数，nacos 的配置需要改为自己环境所对应")])]),e._v(" "),t("p",[e._v("定义 dubbo 配置")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[e._v("dubbo:\n  scan:\n    base-packages: org.cmcc.service\n  protocols:\n    dubbo:\n      name: dubbo\n      port: -1\n  registry:\n    address: spring-cloud://localhost\n  consumer:\n    timeout: 5000\n    check: false\n    retries: 0\n  cloud:\n    subscribed-services:\n")])])]),t("blockquote",[t("p",[t("code",[e._v("dubbo.scan.base-packages")]),e._v("：指定 Dubbo 服务实现类的扫描基准包")]),e._v(" "),t("p",[t("code",[e._v("dubbo.protocols")]),e._v("：服务暴露的协议配置，其中子属性 "),t("code",[e._v("name")]),e._v(" 为协议名称，"),t("code",[e._v("port")]),e._v(" 为协议端口（ -1 表示自增端口，从 20880 开始）")]),e._v(" "),t("p",[t("code",[e._v("dubbo.registry.address")]),e._v("：Dubbo 服务注册中心配置，其中子属性 "),t("code",[e._v("address")]),e._v(" 的值 “spring-cloud://localhost”，说明挂载到 Spring Cloud 注册中心")])]),e._v(" "),t("h4",{attrs:{id:"_4-2-2-创建dubboservice的实现类"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-2-2-创建dubboservice的实现类"}},[e._v("#")]),e._v(" 4.2.2. 创建DubboService的实现类")]),e._v(" "),t("p",[e._v("通过 "),t("code",[e._v('protocol = "dubbo"')]),e._v(" 指定使用 "),t("code",[e._v("dubbo协议")]),e._v(" 定义服务")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[e._v('@Service(protocol = "dubbo")\npublic class DubboServiceImpl implements DubboService {\n    @Override\n    public String test(String param) {\n        return "dubbo service: " + param;\n    }\n}\n')])])]),t("h4",{attrs:{id:"_4-2-3-创建controller类"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-2-3-创建controller类"}},[e._v("#")]),e._v(" 4.2.3. 创建Controller类")]),e._v(" "),t("p",[e._v("使用 "),t("code",[e._v("Spring Boot")]),e._v(" 的 "),t("code",[e._v("@RestController")]),e._v(" 注解定义web服务")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[e._v('@RestController\npublic class WebController {\n    @Autowired\n    private DubboService dubboService;\n\n    @GetMapping("/test/{p}")\n    public String test(@PathVariable("p") String param) {\n        return dubboService.test(param);\n    }\n}\n')])])]),t("h3",{attrs:{id:"_4-3-创建rest-dubbo工程"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-3-创建rest-dubbo工程"}},[e._v("#")]),e._v(" 4.3. 创建rest-dubbo工程")]),e._v(" "),t("p",[e._v("使用 "),t("strong",[e._v("方式二")]),e._v(" 整合对接网关，由于该服务是通过dubbo来创建rest服务，所以并不需要使用 Spring Boot 内置应用服务")]),e._v(" "),t("h4",{attrs:{id:"_4-3-1-创建配置"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-3-1-创建配置"}},[e._v("#")]),e._v(" 4.3.1. 创建配置")]),e._v(" "),t("p",[e._v("定义 spring boot 配置")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[e._v("spring:\n  application:\n    name: cmcc-rest-dubbo\n  main:\n    allow-bean-definition-overriding: true\n  cloud:\n    nacos:\n      server-addr: 192.168.28.130:8848\n      username: nacos\n      password: xxxxx\n")])])]),t("blockquote",[t("p",[e._v("因为不使用 Spring Boot 内置的应用服务所以这里并不需要指定 "),t("code",[e._v("server.port")])])]),e._v(" "),t("p",[e._v("定义 dubbo 配置")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[e._v("dubbo:\n  scan:\n    base-packages: org.cmcc.service\n  protocols:\n    dubbo:\n      name: dubbo\n      port: -1\n    rest:\n      name: rest\n      port: 8080\n      server: netty\n  registry:\n    address: spring-cloud://localhost\n  consumer:\n    timeout: 5000\n    check: false\n    retries: 0\n  cloud:\n    subscribed-services:\n")])])]),t("blockquote",[t("p",[t("code",[e._v("dubbo.protocols")]),e._v("：配置两种协议，其中rest协议定义 8080 端口并使用 netty 作为应用服务器")])]),e._v(" "),t("h4",{attrs:{id:"_4-3-2-创建restservice的实现类"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-3-2-创建restservice的实现类"}},[e._v("#")]),e._v(" 4.3.2. 创建RestService的实现类")]),e._v(" "),t("p",[e._v("通过 "),t("code",[e._v('protocol = "rest"')]),e._v(" 指定使用 "),t("code",[e._v("rest协议")]),e._v(" 定义服务")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[e._v('@Service(protocol = "rest")\n@Path("/")\npublic class RestServiceImpl implements RestService {\n    @Override\n    @Path("test/{p}")\n    @GET\n    public String test(@PathParam("p") String param) {\n        return "rest service: " + param;\n    }\n}\n')])])]),t("h3",{attrs:{id:"_4-4-创建spring-cloud-gateway工程"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-4-创建spring-cloud-gateway工程"}},[e._v("#")]),e._v(" 4.4. 创建Spring Cloud Gateway工程")]),e._v(" "),t("p",[e._v("定义 spring boot 配置")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[e._v("server:\n  port: 9900\n\nspring:\n  application:\n    name: sc-gateway\n  main:\n    allow-bean-definition-overriding: true\n  cloud:\n    nacos:\n      server-addr: 192.168.28.130:8848\n      username: nacos\n      password: xxxxx\n")])])]),t("blockquote",[t("p",[t("code",[e._v("server.port")]),e._v("：定义网关端口为 9090")])]),e._v(" "),t("p",[e._v("定义网关配置")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[e._v("spring:\n  cloud:\n    gateway:\n      discovery:\n        locator:\n          lowerCaseServiceId: true\n          enabled: true\n      routes:\n        - id: web\n          uri: lb://cmcc-web-dubbo\n          predicates:\n            - Path=/api-web/**\n          filters:\n            - StripPrefix=1\n        - id: rest\n          uri: lb://cmcc-rest-dubbo\n          predicates:\n            - Path=/api-rest/**\n          filters:\n            - StripPrefix=1\n")])])]),t("p",[e._v("分别定义两个路由策略：")]),e._v(" "),t("ul",[t("li",[e._v("路径 "),t("code",[e._v("/api-web/")]),e._v(" 为请求 "),t("code",[e._v("web-dubbo")]),e._v(" 工程")]),e._v(" "),t("li",[e._v("路径 "),t("code",[e._v("/api-rest/")]),e._v(" 为请求 "),t("code",[e._v("rest-dubbo")]),e._v(" 工程")])]),e._v(" "),t("h3",{attrs:{id:"_4-5-测试"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-5-测试"}},[e._v("#")]),e._v(" 4.5. 测试")]),e._v(" "),t("p",[e._v("分别启动：Nacos、sc-gateway、web-dubbo、rest-dubbo 工程，通过网关的以下两个接口分别测试两种整合方式")]),e._v(" "),t("ol",[t("li",[t("a",{attrs:{href:"http://127.0.0.1:9900/api-web/test/abc",target:"_blank",rel:"noopener noreferrer"}},[e._v("http://127.0.0.1:9900/api-web/test/abc"),t("OutboundLink")],1),e._v(" ：请求 "),t("code",[e._v("web-dubbo")]),e._v(" 工程测试整合方式一")]),e._v(" "),t("li",[t("a",{attrs:{href:"http://127.0.0.1:9900/api-rest/test/abc",target:"_blank",rel:"noopener noreferrer"}},[e._v("http://127.0.0.1:9900/api-rest/test/abc"),t("OutboundLink")],1),e._v(" ：请求 "),t("code",[e._v("rest-dubbo")]),e._v(" 工程测试整合方式二")])]),e._v(" "),t("h2",{attrs:{id:"_5-demo下载"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_5-demo下载"}},[e._v("#")]),e._v(" 5.DEMO下载")]),e._v(" "),t("p",[e._v("ide需要安装 "),t("code",[e._v("lombok")]),e._v(" 插件")]),e._v(" "),t("p",[t("a",{attrs:{href:"https://github.com/gitldy1013/dubboSpringCloud",target:"_blank",rel:"noopener noreferrer"}},[e._v("https://github.com/gitldy1013/dubboSpringCloud"),t("OutboundLink")],1)])])}),[],!1,null,null,null);r.default=n.exports}}]);