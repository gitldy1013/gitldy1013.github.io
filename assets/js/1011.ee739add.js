(window.webpackJsonp=window.webpackJsonp||[]).push([[1011],{1707:function(e,r,t){"use strict";t.r(r);var n=t(5),s=Object(n.a)({},(function(){var e=this,r=e.$createElement,t=e._self._c||r;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h1",{attrs:{id:"第一个-controller-控制器"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#第一个-controller-控制器"}},[e._v("#")]),e._v(" 第一个 Controller 控制器")]),e._v(" "),t("h2",{attrs:{id:"概述"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#概述"}},[e._v("#")]),e._v(" 概述")]),e._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('    package com.cmcc.my.shop.web.controller;\n    \n    import com.cmcc.my.shop.service.UserService;\n    import org.springframework.beans.factory.annotation.Autowired;\n    import org.springframework.stereotype.Controller;\n    import org.springframework.web.bind.annotation.RequestMapping;\n    import org.springframework.web.bind.annotation.RequestMethod;\n    import org.springframework.web.bind.annotation.RequestParam;\n    \n    @Controller\n    public class LoginController {\n    \n        @Autowired\n        private UserService userService;\n    \n        @RequestMapping(value = {"", "login"}, method = RequestMethod.GET)\n        public String login() {\n            return "login";\n        }\n    \n        @RequestMapping(value = "login", method = RequestMethod.POST)\n        public String login(@RequestParam(required = true) String email, @RequestParam(required = true) String password) {\n            return "redirect:/main";\n        }\n    }\n')])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br"),t("span",{staticClass:"line-number"},[e._v("3")]),t("br"),t("span",{staticClass:"line-number"},[e._v("4")]),t("br"),t("span",{staticClass:"line-number"},[e._v("5")]),t("br"),t("span",{staticClass:"line-number"},[e._v("6")]),t("br"),t("span",{staticClass:"line-number"},[e._v("7")]),t("br"),t("span",{staticClass:"line-number"},[e._v("8")]),t("br"),t("span",{staticClass:"line-number"},[e._v("9")]),t("br"),t("span",{staticClass:"line-number"},[e._v("10")]),t("br"),t("span",{staticClass:"line-number"},[e._v("11")]),t("br"),t("span",{staticClass:"line-number"},[e._v("12")]),t("br"),t("span",{staticClass:"line-number"},[e._v("13")]),t("br"),t("span",{staticClass:"line-number"},[e._v("14")]),t("br"),t("span",{staticClass:"line-number"},[e._v("15")]),t("br"),t("span",{staticClass:"line-number"},[e._v("16")]),t("br"),t("span",{staticClass:"line-number"},[e._v("17")]),t("br"),t("span",{staticClass:"line-number"},[e._v("18")]),t("br"),t("span",{staticClass:"line-number"},[e._v("19")]),t("br"),t("span",{staticClass:"line-number"},[e._v("20")]),t("br"),t("span",{staticClass:"line-number"},[e._v("21")]),t("br"),t("span",{staticClass:"line-number"},[e._v("22")]),t("br"),t("span",{staticClass:"line-number"},[e._v("23")]),t("br"),t("span",{staticClass:"line-number"},[e._v("24")]),t("br"),t("span",{staticClass:"line-number"},[e._v("25")]),t("br")])]),t("h2",{attrs:{id:"注解说明"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#注解说明"}},[e._v("#")]),e._v(" 注解说明")]),e._v(" "),t("h3",{attrs:{id:"controller"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#controller"}},[e._v("#")]),e._v(" @Controller")]),e._v(" "),t("p",[e._v("在 Spring MVC 中，控制器 Controller 负责处理由 "),t("code",[e._v("DispatcherServlet")]),e._v(" 分发的请求，它把用户请求的数据经过业务处理层处理之后封装成一个 Model ，然后再把该 Model 返回给对应的 View 进行展示。在 Spring MVC 中提供了一个非常简便的定义 Controller 的方法，你无需继承特定的类或实现特定的接口，只需使用 "),t("code",[e._v("@Controller")]),e._v(" 标记一个类是 Controller ，然后使用 "),t("code",[e._v("@RequestMapping")]),e._v(" 和 "),t("code",[e._v("@RequestParam")]),e._v(" 等一些注解用以定义 URL 请求和 Controller 方法之间的映射，这样的 Controller 就能被外界访问到。此外 Controller 不会直接依赖于 "),t("code",[e._v("HttpServletRequest")]),e._v(" 和 "),t("code",[e._v("HttpServletResponse")]),e._v(" 等 "),t("code",[e._v("HttpServlet")]),e._v(" 对象，它们可以通过 Controller 的方法参数灵活的获取到。")]),e._v(" "),t("p",[t("code",[e._v("@Controller")]),e._v(" 用于标记在一个类上，使用它标记的类就是一个 Spring MVC Controller 对象。分发处理器将会扫描使用了该注解的类的方法，并检测该方法是否使用了 "),t("code",[e._v("@RequestMapping")]),e._v(" 注解。"),t("code",[e._v("@Controller")]),e._v(" 只是定义了一个控制器类，而使用 "),t("code",[e._v("@RequestMapping")]),e._v(" 注解的方法才是真正处理请求的处理器。")]),e._v(" "),t("h3",{attrs:{id:"requestmapping"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#requestmapping"}},[e._v("#")]),e._v(" @RequestMapping")]),e._v(" "),t("p",[e._v("RequestMapping 是一个用来处理请求地址映射的注解，可用于类或方法上。"),t("strong",[e._v("用于类上，表示类中的所有响应请求的方法都是以该地址作为父路径")]),e._v("。")]),e._v(" "),t("p",[e._v("RequestMapping 注解有六个属性：")]),e._v(" "),t("ul",[t("li",[t("p",[e._v("value， method")]),e._v(" "),t("ul",[t("li",[e._v("value：指定请求的实际地址，指定的地址可以是 URI Template 模式")]),e._v(" "),t("li",[e._v("method：指定请求的method类型， GET、POST、PUT、DELETE 等")])])]),e._v(" "),t("li",[t("p",[e._v("consumes，produces")]),e._v(" "),t("ul",[t("li",[e._v("consumes：指定处理请求的提交内容类型（Content-Type），例如 application/json, text/html")]),e._v(" "),t("li",[e._v("produces: 指定返回的内容类型，仅当 request 请求头中的(Accept)类型中包含该指定类型才返回")])])]),e._v(" "),t("li",[t("p",[e._v("params，headers")]),e._v(" "),t("ul",[t("li",[e._v("params：指定 request 中必须包含某些参数值是，才让该方法处理")]),e._v(" "),t("li",[e._v("headers：指定 request 中必须包含某些指定的 header 值，才能让该方法处理请求")])])])])])}),[],!1,null,null,null);r.default=s.exports}}]);