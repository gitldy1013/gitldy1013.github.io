(window.webpackJsonp=window.webpackJsonp||[]).push([[319],{1017:function(n,a,s){"use strict";s.r(a);var e=s(5),t=Object(e.a)({},(function(){var n=this,a=n.$createElement,s=n._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[s("h1",{attrs:{id:"spring源码"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#spring源码"}},[n._v("#")]),n._v(" Spring源码")]),n._v(" "),s("h2",{attrs:{id:"spring源码方面的知识"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#spring源码方面的知识"}},[n._v("#")]),n._v(" Spring源码方面的知识")]),n._v(" "),s("ul",[s("li",[n._v("Spring bean的生命周期")]),n._v(" "),s("li",[n._v("Spring 工厂，Spring容器，上下文")]),n._v(" "),s("li",[n._v("Spring BeanPostprocessor")]),n._v(" "),s("li",[n._v("Spring 和 主流框架的源码")]),n._v(" "),s("li",[n._v("Spring BeanFactory 和 FactoryBean的区别")])]),n._v(" "),s("h2",{attrs:{id:"谈谈你对spring的理解"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#谈谈你对spring的理解"}},[n._v("#")]),n._v(" 谈谈你对Spring的理解")]),n._v(" "),s("p",[n._v("IOC、AOP只是作为Spring Framework里面一部分，同时还有还有events，resources，i18n，validation，data binding，type conversion，SpEL")]),n._v(" "),s("p",[s("img",{attrs:{src:"/images/image-20200402092317669.png",alt:"image-20200402092317669"}})]),n._v(" "),s("h2",{attrs:{id:"spring上下文"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#spring上下文"}},[n._v("#")]),n._v(" Spring上下文")]),n._v(" "),s("p",[n._v("从代码级别来说，就是指Spring Context")]),n._v(" "),s("p",[n._v("从源码级别，但我们初始化Spring Context的时候，一堆的Spring组件围绕在一起，使其能够正常工作，这个状态就被称为Spring环境")]),n._v(" "),s("h2",{attrs:{id:"spring初始化"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#spring初始化"}},[n._v("#")]),n._v(" Spring初始化")]),n._v(" "),s("p",[n._v("首先需要引入Spring的依赖，因为我们暂时只是初始化过程，只需要用到IOC")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("<dependency>\n    <groupId>org.springframework</groupId>\n    <artifactId>spring-context</artifactId>\n    <version>5.0.9.RELEASE</version>\n</dependency>\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br")])]),s("p",[n._v("为了更加了解Spring初始化的过程，我们需要定义三个类")]),n._v(" "),s("p",[n._v("1、AppConfig.java，可以当成是扫描类，也就是配置我们需要扫描的目录")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v('/**\n * 配置类\n *\n * @author: 陌溪\n * @create: 2020-04-02-9:08\n */\n@Configuration\n@ComponentScan("com.moxi.interview.study.spring")\npublic class AppConfig {\n}\n\n')])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br"),s("span",{staticClass:"line-number"},[n._v("11")]),s("br")])]),s("p",[n._v("2、BeanTest.java，我们需要被扫描到的Bean")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("\n/**\n * Bean类\n *\n * @author: 陌溪\n * @create: 2020-04-02-9:09\n */\n@Component\npublic class BeanTest {\n}\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br")])]),s("p",[n._v("3、Test.java，启动测试类")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("/**\n * Spring项目启动\n *\n * @author: 陌溪\n * @create: 2020-04-02-9:07\n */\npublic class Test {\n    public static void main(String[] args) {\n        // 初始化\n        AnnotationConfigApplicationContext annotationConfigApplicationContext = new AnnotationConfigApplicationContext(AppConfig.class);\n\n        System.out.println(annotationConfigApplicationContext.getBean(BeanTest.class));\n    }\n}\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br"),s("span",{staticClass:"line-number"},[n._v("11")]),s("br"),s("span",{staticClass:"line-number"},[n._v("12")]),s("br"),s("span",{staticClass:"line-number"},[n._v("13")]),s("br"),s("span",{staticClass:"line-number"},[n._v("14")]),s("br")])]),s("p",[n._v("最后我们通过注解的方式，来获取Spring IOC扫描到的Bean，最后打印出来")]),n._v(" "),s("p",[s("img",{attrs:{src:"/images/image-20200402091642787.png",alt:"image-20200402091642787"}})]),n._v(" "),s("p",[n._v("tip：IDEA点击进去的源码目录，其实是IDEA反编译得到的，和原来的源码会存在一些出入，是IDEA专门优化过的，因此如果你需要修改源码的话，还是需要在官网下载对应的源码包")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("https://github.com/spring-projects/spring-framework\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br")])]),s("h2",{attrs:{id:"springbean的生命周期"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#springbean的生命周期"}},[n._v("#")]),n._v(" SpringBean的生命周期")]),n._v(" "),s("p",[n._v("Spring中的Bean不可能是直接new关键字创建出来的")]),n._v(" "),s("ul",[s("li",[n._v("把类扫描出来（扫描出来后做了什么？）")]),n._v(" "),s("li",[n._v("把Bean实例化")])]),n._v(" "),s("p",[n._v("初始化Spring环境有两种方法，一种是通过注解的方式，一个是通过XML的方式")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("// 方式1，目前用的比较多\nAnnotationConfigApplicationContext annotationConfigApplicationContext = new AnnotationConfigApplicationContext(AppConfig.class)\n\n\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br")])]),s("p",[n._v("同时在这个方法的内部，使用了this()")]),n._v(" "),s("p",[s("img",{attrs:{src:"/images/image-20200402100813001.png",alt:"image-20200402100813001"}})]),n._v(" "),s("p",[n._v("调用AnnotationConfigApplicationContext无参构造方法，同时因为该类又继承了一个父类 GenericApplicationContext，子类在初始化的时候，还会调用父类的无参构造方法，在父类中，我们能够看到它初始化了一个BeanFactory，这就是我们经常提到的Spring工厂")]),n._v(" "),s("p",[s("img",{attrs:{src:"/images/image-20200402100434794.png",alt:"image-20200402100434794"}})]),n._v(" "),s("p",[n._v("这个工厂最重要的功能就是产生Bean")]),n._v(" "),s("p",[n._v("同时在AnnotationConfigApplication方法的最后，还有一个refresh()方法，这个方法是整个Spring最核心的方法，这个方法的内部，同时调用了十多个方法，其中最重要的是 invokeBeanFactoryPostProcessors()")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v('invokeBeanFactoryPostProcessors() {\n\t// 扫描类：\n\t// 处理了各种import：例如@import("xxx.xml"), @MapperScanner, @CompoentScanner ..... \n}\n')])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br")])]),s("h3",{attrs:{id:"普通类的实例化"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#普通类的实例化"}},[n._v("#")]),n._v(" 普通类的实例化")]),n._v(" "),s("p",[n._v("普通类的实例化，就是通过javac编译成xxx.class文件，然后某一天通过new关键字进行实例化，JVM就会把这个class类加载到JVM内存中，这里面就涉及到了方法区，堆栈存储等。")]),n._v(" "),s("p",[s("img",{attrs:{src:"/images/image-20200402101551621.png",alt:"image-20200402101551621"}})]),n._v(" "),s("h3",{attrs:{id:"spring-bean实例化过程"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#spring-bean实例化过程"}},[n._v("#")]),n._v(" Spring Bean实例化过程")]),n._v(" "),s("ul",[s("li",[s("p",[n._v("首先Spring会将全部的Class类，通过classLoader加载到JVM中")])]),n._v(" "),s("li",[s("p",[n._v("然后在通过扫描，创建很多BeanDefinition，我们通过反射将对应Class的信息填充到BeanDefinition中")]),n._v(" "),s("ul",[s("li",[s("p",[n._v("这里的BeanDefinition是用来描述Bean的，也就是Bean的一些信息存储")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v('RootBeanDefinition rootBeanDefinition = new RootBeanDefinition();\nrootBeanDefinition.setBeanClassName("BeanTest");\nrootBeanDefinition.setBeanClass(BeanTest.class);\nrootBeanDefinition.setScope("prototype");\nrootBeanDefinition.setLazyInit();\n')])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br")])])])])]),n._v(" "),s("li",[s("p",[n._v("然后在把填充好的BeanDefinition一个个放入到Map中，Spring扫描了几个类，Map中就有几个类，这个Map被称为 BeanDefinitionMap")])])]),n._v(" "),s("p",[s("img",{attrs:{src:"/images/image-20200402102958645.png",alt:"image-20200402102958645"}})]),n._v(" "),s("ul",[s("li",[n._v("最后我们将这个BeanDefinationMap放入了Spring单例池中")])]),n._v(" "),s("p",[s("img",{attrs:{src:"/images/image-20200402104318234.png",alt:"image-20200402104318234"}})]),n._v(" "),s("p",[n._v("完整的加载图，左边红色部分就是Spring的加载过程，然后开放的原则，它还提供了很多扩展接口，让你可以干扰到Sring的加载过程，使得")]),n._v(" "),s("p",[s("img",{attrs:{src:"/images/image-20200402104306006.png",alt:"image-20200402104306006"}})]),n._v(" "),s("p",[n._v("例如，很多需要对Spring进行扩展的，例如Mybatis，其实都是实现了 BeanFactoryPostProcessor接口")]),n._v(" "),s("p",[n._v("在执行扫描的时候，它会扫描Spring 提供的 BeanFactoryPostProcessor，以及程序员扩展的")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("\n/**\n * 扩展的BeanFactory\n * @author: 陌溪\n * @create: 2020-04-02-10:52\n */\npublic class TestBeanFactoryPostProcessor implements BeanFactoryPostProcessor {\n    @Override\n    public void postProcessBeanFactory(ConfigurableListableBeanFactory beanFactory) throws BeansException {\n\n    }\n}\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br"),s("span",{staticClass:"line-number"},[n._v("11")]),s("br"),s("span",{staticClass:"line-number"},[n._v("12")]),s("br")])])])}),[],!1,null,null,null);a.default=t.exports}}]);