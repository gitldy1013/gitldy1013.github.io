(window.webpackJsonp=window.webpackJsonp||[]).push([[825],{1520:function(t,a,e){"use strict";e.r(a);var r=e(5),s=Object(r.a)({},(function(){var t=this,a=t.$createElement,e=t._self._c||a;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"什么是三层架构"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#什么是三层架构"}},[t._v("#")]),t._v(" 什么是三层架构")]),t._v(" "),e("h2",{attrs:{id:"什么是系统架构"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#什么是系统架构"}},[t._v("#")]),t._v(" 什么是系统架构")]),t._v(" "),e("p",[t._v("所谓系统架构是指，整合应用系统程序大的结构。经常提到的系统结构有两种：三层架构与 MVC。这两种结构既有区别，又有联系。但这两种结构的使用，均是为了降低系统模块间的耦合度。")]),t._v(" "),e("h2",{attrs:{id:"什么是三层架构-2"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#什么是三层架构-2"}},[t._v("#")]),t._v(" 什么是三层架构")]),t._v(" "),e("p",[t._v("三层架构是指：视图层 View、服务层 Service，与持久层 DAO。它们分别完成不同的功能。")]),t._v(" "),e("ul",[e("li",[t._v("View 层：用于接收用户提交请求的代码")]),t._v(" "),e("li",[t._v("Service 层：系统的业务逻辑主要在这里完成")]),t._v(" "),e("li",[t._v("DAO 层：直接操作数据库的代码")])]),t._v(" "),e("p",[t._v("为了更好的降低各层间的耦合度，在三层架构程序设计中，采用面向抽象编程。即上层对下层的调用，是通过接口实现的。而下层对上层的真正服务提供者，是下层接口的实现类。服务标准（接口）是相同的，服务提供者（实现类）可以更换。这就实现了层间解耦合。")]),t._v(" "),e("p",[e("img",{attrs:{src:"/img/2018060421090001.png",alt:""}})])])}),[],!1,null,null,null);a.default=s.exports}}]);