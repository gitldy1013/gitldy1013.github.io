(window.webpackJsonp=window.webpackJsonp||[]).push([[767],{1462:function(t,v,e){"use strict";e.r(v);var a=e(5),_=Object(a.a)({},(function(){var t=this,v=t.$createElement,e=t._self._c||v;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"说说线程安全问题"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#说说线程安全问题"}},[t._v("#")]),t._v(" 说说线程安全问题")]),t._v(" "),e("p",[t._v("线程安全是多线程领域的问题，线程安全可以简单理解为一个方法或者一个实例可以在多线程环境中使用而不会出现问题。")]),t._v(" "),e("p",[t._v("在 Java 多线程编程当中，提供了多种实现 Java 线程安全的方式：")]),t._v(" "),e("ul",[e("li",[t._v("最简单的方式，使用 "),e("code",[t._v("Synchronization")]),t._v(" 关键字")]),t._v(" "),e("li",[t._v("使用 "),e("code",[t._v("java.util.concurrent.atomic")]),t._v(" 包中的原子类，例如 "),e("code",[t._v("AtomicInteger")])]),t._v(" "),e("li",[t._v("使用 "),e("code",[t._v("java.util.concurrent.locks")]),t._v(" 包中的锁")]),t._v(" "),e("li",[t._v("使用线程安全的集合 "),e("code",[t._v("ConcurrentHashMap")])]),t._v(" "),e("li",[t._v("使用 "),e("code",[t._v("volatile")]),t._v(" 关键字，保证变量可见性（直接从内存读，而不是从线程 "),e("code",[t._v("cache")]),t._v(" 读）")])])])}),[],!1,null,null,null);v.default=_.exports}}]);