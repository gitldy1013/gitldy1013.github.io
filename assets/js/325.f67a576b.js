(window.webpackJsonp=window.webpackJsonp||[]).push([[325],{1023:function(s,a,n){"use strict";n.r(a);var t=n(5),e=Object(t.a)({},(function(){var s=this,a=s.$createElement,n=s._self._c||a;return n("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[n("h1",{attrs:{id:"集群高并发情况下如何保证分布式唯一全局id生成"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#集群高并发情况下如何保证分布式唯一全局id生成"}},[s._v("#")]),s._v(" 集群高并发情况下如何保证分布式唯一全局Id生成")]),s._v(" "),n("h2",{attrs:{id:"问题"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#问题"}},[s._v("#")]),s._v(" 问题")]),s._v(" "),n("h3",{attrs:{id:"为什么需要分布式全局唯一id以及分布式id的业务需求"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#为什么需要分布式全局唯一id以及分布式id的业务需求"}},[s._v("#")]),s._v(" 为什么需要分布式全局唯一ID以及分布式ID的业务需求")]),s._v(" "),n("p",[s._v("在复杂分布式系统中，往往需要对大量的数据和消息进行唯一标识，如在美团点评的金融、支付、餐饮、酒店")]),s._v(" "),n("p",[s._v("猫眼电影等产品的系统中数据逐渐增长，对数据库分库分表后需要有一个唯一ID来标识一条数据或信息；")]),s._v(" "),n("p",[s._v("特别Ian的订单、骑手、优惠券都需要有唯一ID做标识")]),s._v(" "),n("p",[s._v("此时一个能够生成全局唯一ID的系统是非常必要的")]),s._v(" "),n("p",[n("img",{attrs:{src:"/images/image-20200418080900190.png",alt:"image-20200418080900190"}})]),s._v(" "),n("h3",{attrs:{id:"id生成规则部分硬性要求"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#id生成规则部分硬性要求"}},[s._v("#")]),s._v(" ID生成规则部分硬性要求")]),s._v(" "),n("ul",[n("li",[s._v("全局唯一")]),s._v(" "),n("li",[s._v("趋势递增\n"),n("ul",[n("li",[s._v("在MySQL的InnoDB引擎中使用的是聚集索引，由于多数RDBMS使用Btree的数据结构来存储索引，在主键的选择上面我们应该尽量使用有序的主键保证写入性能")])])]),s._v(" "),n("li",[s._v("单调递增\n"),n("ul",[n("li",[s._v("保证下一个ID一定大于上一个ID，例如事务版本号、IM增量消息、排序等特殊需求")])])]),s._v(" "),n("li",[s._v("信息安全\n"),n("ul",[n("li",[s._v("如果ID是连续，恶意用户的爬取工作就非常容易做了，直接按照顺序下载指定URL即可，如果是订单号就危险了，竞争对手可以直接知道我们一天的单量，所以在一些应用场景下，需要ID无规则不规则，让竞争对手不好猜")])])]),s._v(" "),n("li",[s._v("含时间戳\n"),n("ul",[n("li",[s._v("一样能够快速在开发中了解这个分布式ID什么时候生成的")])])])]),s._v(" "),n("h3",{attrs:{id:"id号生成系统的可用性要求"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#id号生成系统的可用性要求"}},[s._v("#")]),s._v(" ID号生成系统的可用性要求")]),s._v(" "),n("ul",[n("li",[s._v("高可用\n"),n("ul",[n("li",[s._v("发布一个获取分布式ID请求，服务器就要保证99.999%的情况下给我创建一个唯一分布式ID")])])]),s._v(" "),n("li",[s._v("低延迟\n"),n("ul",[n("li",[s._v("发一个获取分布式ID的请求，服务器就要快，极速")])])]),s._v(" "),n("li",[s._v("高QPS\n"),n("ul",[n("li",[s._v("例如并发一口气10万个创建分布式ID请求同时杀过来，服务器要顶得住且一下子成功创建10万个分布式ID")])])])]),s._v(" "),n("h2",{attrs:{id:"一般通用解决方案"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#一般通用解决方案"}},[s._v("#")]),s._v(" 一般通用解决方案")]),s._v(" "),n("h3",{attrs:{id:"uuid"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#uuid"}},[s._v("#")]),s._v(" UUID")]),s._v(" "),n("p",[n("code",[s._v("UUID.randomUUID()")]),s._v(" , UUID的标准型包含32个16进制数字，以连字号分为五段，形式为 8-4-4-4-12的36个字符，性能非常高，本地生成，没有网络消耗。")]),s._v(" "),n("h4",{attrs:{id:"存在问题"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#存在问题"}},[s._v("#")]),s._v(" 存在问题")]),s._v(" "),n("p",[s._v("入数据库性能差，因为UUID是无序的")]),s._v(" "),n("ul",[n("li",[s._v("无序，无法预测他的生成顺序，不能生成递增有序的数字")])]),s._v(" "),n("p",[s._v("首先分布式id一般都会作为逐渐，但是按照mysql官方推荐主键尽量越短越好，UUID每一个都很长，所以不是很推荐。")]),s._v(" "),n("ul",[n("li",[s._v("主键，ID作为主键时，在特定的环境下会存在一些问题")])]),s._v(" "),n("p",[s._v("比如做DB主键的场景下，UUID就非常不适用MySQL官方有明确的说明")]),s._v(" "),n("ul",[n("li",[s._v("索引，B+树索引的分裂")])]),s._v(" "),n("p",[s._v("既然分布式ID是主键，然后主键是包含索引的，而mysql的索引是通过B+树来实现的，每一次新的UUID数据的插入，为了查询的优化，都会对索引底层的B+树进行修改，因为UUID数据是无序的，所以每一次UUID数据的插入都会对主键的B+树进行很大的修改，这一点很不好，插入完全无序，不但会导致一些中间节点产生分裂，也会白白创造出很多不饱和的节点，这样大大降低了数据库插入的性能。")]),s._v(" "),n("p",[s._v("UUID只能保证全局唯一性，不满足后面的趋势递增，单调递增")]),s._v(" "),n("h3",{attrs:{id:"数据库自增主键"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#数据库自增主键"}},[s._v("#")]),s._v(" 数据库自增主键")]),s._v(" "),n("h4",{attrs:{id:"单机"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#单机"}},[s._v("#")]),s._v(" 单机")]),s._v(" "),n("p",[s._v("在分布式里面，数据库的自增ID机制的主要原理是：数据库自增ID和mysql数据库的replace into实现的，这里的replace into跟insert功能 类似，不同点在于：replace into首先尝试插入数据列表中，如果发现表中已经有此行数据（根据主键或唯一索引判断）则先删除，在插入，否则直接插入新数据。")]),s._v(" "),n("p",[s._v("REPLACE INTO的含义是插入一条记录，如果表中唯一索引的值遇到冲突，则替换老数据")]),s._v(" "),n("p",[n("img",{attrs:{src:"/images/image-20200418083435048.png",alt:"image-20200418083435048"}})]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("REPLACE into t_test(stub) values('b');\nselect LAST_INSERT_ID();\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br")])]),n("p",[s._v("我们每次插入的时候，发现都会把原来的数据给替换，并且ID也会增加")]),s._v(" "),n("p",[s._v("这就满足了")]),s._v(" "),n("ul",[n("li",[s._v("递增性")]),s._v(" "),n("li",[s._v("单调性")]),s._v(" "),n("li",[s._v("唯一性")])]),s._v(" "),n("p",[s._v("在分布式情况下，并且并发量不多的情况，可以使用这种方案来解决，获得一个全局的唯一ID")]),s._v(" "),n("h4",{attrs:{id:"集群分布式集群"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#集群分布式集群"}},[s._v("#")]),s._v(" 集群分布式集群")]),s._v(" "),n("p",[s._v("那数据库自增ID机制适合做分布式ID吗？答案是不太适合")]),s._v(" "),n("p",[s._v("系统水平扩展比较困难，比如定义好步长和机器台数之后，如果要添加机器该怎么办，假设现在有一台机器发号是：1,2,3,4,5,（步长是1），这个时候需要扩容机器一台，可以这样做：把第二胎机器的初始值设置得比第一台超过很多，貌似还好，但是假设线上如果有100台机器，这个时候扩容要怎么做，简直是噩梦，所以系统水平扩展方案复杂难以实现。")]),s._v(" "),n("p",[s._v("数据库压力还是很大，每次获取ID都得读写一次数据库，非常影响性能，不符合分布式ID里面的延迟低和高QPS的规则（在高并发下，如果都去数据库里面获取ID，那是非常影响性能的）")]),s._v(" "),n("h3",{attrs:{id:"基于redis生成全局id策略"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#基于redis生成全局id策略"}},[s._v("#")]),s._v(" 基于Redis生成全局ID策略")]),s._v(" "),n("h4",{attrs:{id:"单机版"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#单机版"}},[s._v("#")]),s._v(" 单机版")]),s._v(" "),n("p",[s._v("因为Redis是单线程，天生保证原子性，可以使用原子操作INCR和INCRBY来实现")]),s._v(" "),n("p",[s._v("INCRBY：设置增长步长")]),s._v(" "),n("h4",{attrs:{id:"集群分布式"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#集群分布式"}},[s._v("#")]),s._v(" 集群分布式")]),s._v(" "),n("p",[s._v("注意：在Redis集群情况下，同样和MySQL一样需要设置不同的增长步长，同时key一定要设置有效期，可以使用Redis集群来获取更高的吞吐量。")]),s._v(" "),n("p",[s._v("假设一个集群中有5台Redis，可以初始化每台Redis的值分别是 1,2,3,4,5 ， 然后设置步长都是5")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("各个Redis生成的ID为：\nA：1 6 11 16 21\nB：2 7 12 17 22\nC：3 8 13 18 23\nD：4 9 14 19 24\nE：5 10 15 20 25\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br")])]),n("p",[s._v("但是存在的问题是，就是Redis集群的维护和保养比较麻烦，配置麻烦。因为要设置单点故障，哨兵值守")]),s._v(" "),n("p",[s._v("但是主要是的问题就是，为了一个ID，却需要引入整个Redis集群，有种杀鸡焉用牛刀的感觉")]),s._v(" "),n("h2",{attrs:{id:"雪花算法"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#雪花算法"}},[s._v("#")]),s._v(" 雪花算法")]),s._v(" "),n("h3",{attrs:{id:"是什么"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#是什么"}},[s._v("#")]),s._v(" 是什么")]),s._v(" "),n("p",[s._v("Twitter的分布式自增ID算法，Snowflake")]),s._v(" "),n("p",[s._v("最初Twitter把存储系统从MySQL迁移到Cassandra（由Facebook开发一套开源分布式NoSQL数据库系统）因为Cassandra没有顺序ID生成机制，所有开发了这样一套全局唯一ID生成服务。")]),s._v(" "),n("p",[s._v("Twitter的分布式雪花算法SnowFlake，经测试SnowFlake每秒可以产生26万个自增可排序的ID")]),s._v(" "),n("ul",[n("li",[s._v("twitter的SnowFlake生成ID能够按照时间有序生成")]),s._v(" "),n("li",[s._v("SnowFlake算法生成ID的结果是一个64Bit大小的整数，为一个Long型（转换成字符串后长度最多19）")]),s._v(" "),n("li",[s._v("分布式系统内不会产生ID碰撞（由datacenter 和 workerID做区分）并且效率较高")])]),s._v(" "),n("p",[s._v("分布式系统中，有一些需要全局唯一ID的场景，生成ID的基本要求")]),s._v(" "),n("ul",[n("li",[s._v("在分布式环境下，必须全局唯一性")]),s._v(" "),n("li",[s._v("一般都需要单调递增，因为一般唯一ID都会存在数据库，而InnoDB的特性就是将内容存储在主键索引上的叶子节点，而且是从左往右递增的，所有考虑到数据库性能，一般生成ID也最好是单调递增的。为了防止ID冲突可以使用36位UUID，但是UUID有一些缺点，首先是它相对比较长，并且另外UUID一般是无序的")]),s._v(" "),n("li",[s._v("可能还会需要无规则，因为如果使用唯一ID作为订单号这种，为了不让别人知道一天的订单量多少，就需要这种规则")])]),s._v(" "),n("h3",{attrs:{id:"结构"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#结构"}},[s._v("#")]),s._v(" 结构")]),s._v(" "),n("p",[s._v("雪花算法的几个核心组成部分")]),s._v(" "),n("p",[n("img",{attrs:{src:"/images/image-20200418091447935.png",alt:"image-20200418091447935"}})]),s._v(" "),n("p",[s._v("在Java中64bit的证书是long类型，所以在SnowFlake算法生成的ID就是long类存储的")]),s._v(" "),n("h4",{attrs:{id:"第一部分"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#第一部分"}},[s._v("#")]),s._v(" 第一部分")]),s._v(" "),n("p",[s._v("二进制中最高位是符号位，1表示负数，0表示正数。生成的ID一般都是用整数，所以最高位固定为0。")]),s._v(" "),n("h4",{attrs:{id:"第二部分"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#第二部分"}},[s._v("#")]),s._v(" 第二部分")]),s._v(" "),n("p",[s._v("第二部分是41bit时间戳位，用来记录时间戳，毫秒级")]),s._v(" "),n("p",[s._v("41位可以表示 2^41 -1 个数字")]),s._v(" "),n("p",[s._v("如果只用来表示正整数，可以表示的范围是： 0 - 2^41 -1，减1是因为可以表示的数值范围是从0开始计算的，而不是从1。")]),s._v(" "),n("p",[s._v("也就是说41位可以表示 2^41 - 1 毫秒的值，转换成单位年则是 69.73年")]),s._v(" "),n("h4",{attrs:{id:"第三部分"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#第三部分"}},[s._v("#")]),s._v(" 第三部分")]),s._v(" "),n("p",[s._v("第三部分为工作机器ID，10Bit用来记录工作机器ID")]),s._v(" "),n("p",[s._v("可以部署在2^10 = 1024个节点，包括5位 datacenterId（数据中心，机房） 和 5位 workerID（机器码）")]),s._v(" "),n("p",[s._v("5位可以表示的最大正整数是 2 ^ 5 = 31个数字，来表示不同的数据中心  和  机器码")]),s._v(" "),n("h4",{attrs:{id:"第四部分"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#第四部分"}},[s._v("#")]),s._v(" 第四部分")]),s._v(" "),n("p",[s._v("12位bit可以用来表示的正整数是 2^12 = 4095，即可以用0 1 2 .... 4094 来表示同一个机器同一个时间戳内产生的4095个ID序号。")]),s._v(" "),n("h4",{attrs:{id:"snowflake可以保证"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#snowflake可以保证"}},[s._v("#")]),s._v(" SnowFlake可以保证")]),s._v(" "),n("p",[s._v("所有生成的ID按时间趋势递增")]),s._v(" "),n("p",[s._v("整个分布式系统内不会产生重复ID，因为有datacenterId 和 workerId来做区分")]),s._v(" "),n("h3",{attrs:{id:"实现"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#实现"}},[s._v("#")]),s._v(" 实现")]),s._v(" "),n("p",[s._v("雪花算法是由scala算法编写的，有人使用java实现，"),n("a",{attrs:{href:"https://github.com/beyondfengyu/SnowFlake/blob/master/SnowFlake.java",target:"_blank",rel:"noopener noreferrer"}},[s._v("github地址"),n("OutboundLink")],1)]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('/**\n * twitter的snowflake算法 -- java实现\n * \n * @author beyond\n * @date 2016/11/26\n */\npublic class SnowFlake {\n\n    /**\n     * 起始的时间戳\n     */\n    private final static long START_STMP = 1480166465631L;\n\n    /**\n     * 每一部分占用的位数\n     */\n    private final static long SEQUENCE_BIT = 12; //序列号占用的位数\n    private final static long MACHINE_BIT = 5;   //机器标识占用的位数\n    private final static long DATACENTER_BIT = 5;//数据中心占用的位数\n\n    /**\n     * 每一部分的最大值\n     */\n    private final static long MAX_DATACENTER_NUM = -1L ^ (-1L << DATACENTER_BIT);\n    private final static long MAX_MACHINE_NUM = -1L ^ (-1L << MACHINE_BIT);\n    private final static long MAX_SEQUENCE = -1L ^ (-1L << SEQUENCE_BIT);\n\n    /**\n     * 每一部分向左的位移\n     */\n    private final static long MACHINE_LEFT = SEQUENCE_BIT;\n    private final static long DATACENTER_LEFT = SEQUENCE_BIT + MACHINE_BIT;\n    private final static long TIMESTMP_LEFT = DATACENTER_LEFT + DATACENTER_BIT;\n\n    private long datacenterId;  //数据中心\n    private long machineId;     //机器标识\n    private long sequence = 0L; //序列号\n    private long lastStmp = -1L;//上一次时间戳\n\n    public SnowFlake(long datacenterId, long machineId) {\n        if (datacenterId > MAX_DATACENTER_NUM || datacenterId < 0) {\n            throw new IllegalArgumentException("datacenterId can\'t be greater than MAX_DATACENTER_NUM or less than 0");\n        }\n        if (machineId > MAX_MACHINE_NUM || machineId < 0) {\n            throw new IllegalArgumentException("machineId can\'t be greater than MAX_MACHINE_NUM or less than 0");\n        }\n        this.datacenterId = datacenterId;\n        this.machineId = machineId;\n    }\n\n    /**\n     * 产生下一个ID\n     *\n     * @return\n     */\n    public synchronized long nextId() {\n        long currStmp = getNewstmp();\n        if (currStmp < lastStmp) {\n            throw new RuntimeException("Clock moved backwards.  Refusing to generate id");\n        }\n\n        if (currStmp == lastStmp) {\n            //相同毫秒内，序列号自增\n            sequence = (sequence + 1) & MAX_SEQUENCE;\n            //同一毫秒的序列数已经达到最大\n            if (sequence == 0L) {\n                currStmp = getNextMill();\n            }\n        } else {\n            //不同毫秒内，序列号置为0\n            sequence = 0L;\n        }\n\n        lastStmp = currStmp;\n\n        return (currStmp - START_STMP) << TIMESTMP_LEFT //时间戳部分\n                | datacenterId << DATACENTER_LEFT       //数据中心部分\n                | machineId << MACHINE_LEFT             //机器标识部分\n                | sequence;                             //序列号部分\n    }\n\n    private long getNextMill() {\n        long mill = getNewstmp();\n        while (mill <= lastStmp) {\n            mill = getNewstmp();\n        }\n        return mill;\n    }\n\n    private long getNewstmp() {\n        return System.currentTimeMillis();\n    }\n\n    public static void main(String[] args) {\n        SnowFlake snowFlake = new SnowFlake(2, 3);\n\n        for (int i = 0; i < (1 << 12); i++) {\n            System.out.println(snowFlake.nextId());\n        }\n\n    }\n}\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br"),n("span",{staticClass:"line-number"},[s._v("23")]),n("br"),n("span",{staticClass:"line-number"},[s._v("24")]),n("br"),n("span",{staticClass:"line-number"},[s._v("25")]),n("br"),n("span",{staticClass:"line-number"},[s._v("26")]),n("br"),n("span",{staticClass:"line-number"},[s._v("27")]),n("br"),n("span",{staticClass:"line-number"},[s._v("28")]),n("br"),n("span",{staticClass:"line-number"},[s._v("29")]),n("br"),n("span",{staticClass:"line-number"},[s._v("30")]),n("br"),n("span",{staticClass:"line-number"},[s._v("31")]),n("br"),n("span",{staticClass:"line-number"},[s._v("32")]),n("br"),n("span",{staticClass:"line-number"},[s._v("33")]),n("br"),n("span",{staticClass:"line-number"},[s._v("34")]),n("br"),n("span",{staticClass:"line-number"},[s._v("35")]),n("br"),n("span",{staticClass:"line-number"},[s._v("36")]),n("br"),n("span",{staticClass:"line-number"},[s._v("37")]),n("br"),n("span",{staticClass:"line-number"},[s._v("38")]),n("br"),n("span",{staticClass:"line-number"},[s._v("39")]),n("br"),n("span",{staticClass:"line-number"},[s._v("40")]),n("br"),n("span",{staticClass:"line-number"},[s._v("41")]),n("br"),n("span",{staticClass:"line-number"},[s._v("42")]),n("br"),n("span",{staticClass:"line-number"},[s._v("43")]),n("br"),n("span",{staticClass:"line-number"},[s._v("44")]),n("br"),n("span",{staticClass:"line-number"},[s._v("45")]),n("br"),n("span",{staticClass:"line-number"},[s._v("46")]),n("br"),n("span",{staticClass:"line-number"},[s._v("47")]),n("br"),n("span",{staticClass:"line-number"},[s._v("48")]),n("br"),n("span",{staticClass:"line-number"},[s._v("49")]),n("br"),n("span",{staticClass:"line-number"},[s._v("50")]),n("br"),n("span",{staticClass:"line-number"},[s._v("51")]),n("br"),n("span",{staticClass:"line-number"},[s._v("52")]),n("br"),n("span",{staticClass:"line-number"},[s._v("53")]),n("br"),n("span",{staticClass:"line-number"},[s._v("54")]),n("br"),n("span",{staticClass:"line-number"},[s._v("55")]),n("br"),n("span",{staticClass:"line-number"},[s._v("56")]),n("br"),n("span",{staticClass:"line-number"},[s._v("57")]),n("br"),n("span",{staticClass:"line-number"},[s._v("58")]),n("br"),n("span",{staticClass:"line-number"},[s._v("59")]),n("br"),n("span",{staticClass:"line-number"},[s._v("60")]),n("br"),n("span",{staticClass:"line-number"},[s._v("61")]),n("br"),n("span",{staticClass:"line-number"},[s._v("62")]),n("br"),n("span",{staticClass:"line-number"},[s._v("63")]),n("br"),n("span",{staticClass:"line-number"},[s._v("64")]),n("br"),n("span",{staticClass:"line-number"},[s._v("65")]),n("br"),n("span",{staticClass:"line-number"},[s._v("66")]),n("br"),n("span",{staticClass:"line-number"},[s._v("67")]),n("br"),n("span",{staticClass:"line-number"},[s._v("68")]),n("br"),n("span",{staticClass:"line-number"},[s._v("69")]),n("br"),n("span",{staticClass:"line-number"},[s._v("70")]),n("br"),n("span",{staticClass:"line-number"},[s._v("71")]),n("br"),n("span",{staticClass:"line-number"},[s._v("72")]),n("br"),n("span",{staticClass:"line-number"},[s._v("73")]),n("br"),n("span",{staticClass:"line-number"},[s._v("74")]),n("br"),n("span",{staticClass:"line-number"},[s._v("75")]),n("br"),n("span",{staticClass:"line-number"},[s._v("76")]),n("br"),n("span",{staticClass:"line-number"},[s._v("77")]),n("br"),n("span",{staticClass:"line-number"},[s._v("78")]),n("br"),n("span",{staticClass:"line-number"},[s._v("79")]),n("br"),n("span",{staticClass:"line-number"},[s._v("80")]),n("br"),n("span",{staticClass:"line-number"},[s._v("81")]),n("br"),n("span",{staticClass:"line-number"},[s._v("82")]),n("br"),n("span",{staticClass:"line-number"},[s._v("83")]),n("br"),n("span",{staticClass:"line-number"},[s._v("84")]),n("br"),n("span",{staticClass:"line-number"},[s._v("85")]),n("br"),n("span",{staticClass:"line-number"},[s._v("86")]),n("br"),n("span",{staticClass:"line-number"},[s._v("87")]),n("br"),n("span",{staticClass:"line-number"},[s._v("88")]),n("br"),n("span",{staticClass:"line-number"},[s._v("89")]),n("br"),n("span",{staticClass:"line-number"},[s._v("90")]),n("br"),n("span",{staticClass:"line-number"},[s._v("91")]),n("br"),n("span",{staticClass:"line-number"},[s._v("92")]),n("br"),n("span",{staticClass:"line-number"},[s._v("93")]),n("br"),n("span",{staticClass:"line-number"},[s._v("94")]),n("br"),n("span",{staticClass:"line-number"},[s._v("95")]),n("br"),n("span",{staticClass:"line-number"},[s._v("96")]),n("br"),n("span",{staticClass:"line-number"},[s._v("97")]),n("br"),n("span",{staticClass:"line-number"},[s._v("98")]),n("br"),n("span",{staticClass:"line-number"},[s._v("99")]),n("br"),n("span",{staticClass:"line-number"},[s._v("100")]),n("br"),n("span",{staticClass:"line-number"},[s._v("101")]),n("br"),n("span",{staticClass:"line-number"},[s._v("102")]),n("br")])]),n("h3",{attrs:{id:"工程落地经验"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#工程落地经验"}},[s._v("#")]),s._v(" 工程落地经验")]),s._v(" "),n("h4",{attrs:{id:"hutools工具包"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#hutools工具包"}},[s._v("#")]),s._v(" hutools工具包")]),s._v(" "),n("p",[s._v("地址：https://github.com/looly/hutool")]),s._v(" "),n("h4",{attrs:{id:"springboot整合雪花算法"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#springboot整合雪花算法"}},[s._v("#")]),s._v(" SpringBoot整合雪花算法")]),s._v(" "),n("p",[s._v("引入hutool工具类")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("<dependency>\n    <groupId>cn.hutool</groupId>\n    <artifactId>hutool-all</artifactId>\n    <version>5.3.1</version>\n</dependency>\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br")])]),n("p",[s._v("整合")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("/**\n * 雪花算法\n *\n * @author: 陌溪\n * @create: 2020-04-18-11:08\n */\npublic class SnowFlakeDemo {\n    private long workerId = 0;\n    private long datacenterId = 1;\n    private Snowflake snowFlake = IdUtil.createSnowflake(workerId, datacenterId);\n\n    @PostConstruct\n    public void init() {\n        try {\n            // 将网络ip转换成long\n            workerId = NetUtil.ipv4ToLong(NetUtil.getLocalhostStr());\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n\n    /**\n     * 获取雪花ID\n     * @return\n     */\n    public synchronized long snowflakeId() {\n        return this.snowFlake.nextId();\n    }\n\n    public synchronized long snowflakeId(long workerId, long datacenterId) {\n        Snowflake snowflake = IdUtil.createSnowflake(workerId, datacenterId);\n        return snowflake.nextId();\n    }\n\n    public static void main(String[] args) {\n        SnowFlakeDemo snowFlakeDemo = new SnowFlakeDemo();\n        for (int i = 0; i < 20; i++) {\n            new Thread(() -> {\n                System.out.println(snowFlakeDemo.snowflakeId());\n            }, String.valueOf(i)).start();\n        }\n    }\n}\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br"),n("span",{staticClass:"line-number"},[s._v("23")]),n("br"),n("span",{staticClass:"line-number"},[s._v("24")]),n("br"),n("span",{staticClass:"line-number"},[s._v("25")]),n("br"),n("span",{staticClass:"line-number"},[s._v("26")]),n("br"),n("span",{staticClass:"line-number"},[s._v("27")]),n("br"),n("span",{staticClass:"line-number"},[s._v("28")]),n("br"),n("span",{staticClass:"line-number"},[s._v("29")]),n("br"),n("span",{staticClass:"line-number"},[s._v("30")]),n("br"),n("span",{staticClass:"line-number"},[s._v("31")]),n("br"),n("span",{staticClass:"line-number"},[s._v("32")]),n("br"),n("span",{staticClass:"line-number"},[s._v("33")]),n("br"),n("span",{staticClass:"line-number"},[s._v("34")]),n("br"),n("span",{staticClass:"line-number"},[s._v("35")]),n("br"),n("span",{staticClass:"line-number"},[s._v("36")]),n("br"),n("span",{staticClass:"line-number"},[s._v("37")]),n("br"),n("span",{staticClass:"line-number"},[s._v("38")]),n("br"),n("span",{staticClass:"line-number"},[s._v("39")]),n("br"),n("span",{staticClass:"line-number"},[s._v("40")]),n("br"),n("span",{staticClass:"line-number"},[s._v("41")]),n("br"),n("span",{staticClass:"line-number"},[s._v("42")]),n("br"),n("span",{staticClass:"line-number"},[s._v("43")]),n("br")])]),n("p",[s._v("得到结果")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("1251350711346790400\n1251350711346790402\n1251350711346790401\n1251350711346790403\n1251350711346790405\n1251350711346790404\n1251350711346790406\n1251350711346790407\n1251350711350984704\n1251350711350984706\n1251350711350984705\n1251350711350984707\n1251350711350984708\n1251350711350984709\n1251350711350984710\n1251350711350984711\n1251350711350984712\n1251350711355179008\n1251350711355179009\n1251350711355179010\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br")])]),n("h3",{attrs:{id:"优缺点"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#优缺点"}},[s._v("#")]),s._v(" 优缺点")]),s._v(" "),n("h4",{attrs:{id:"优点"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#优点"}},[s._v("#")]),s._v(" 优点")]),s._v(" "),n("ul",[n("li",[s._v("毫秒数在高维，自增序列在低位，整个ID都是趋势递增的")]),s._v(" "),n("li",[s._v("不依赖数据库等第三方系统，以服务的方式部署，稳定性更高，生成ID的性能也是非常高的")]),s._v(" "),n("li",[s._v("可以根据自身业务特性分配bit位，非常灵活")])]),s._v(" "),n("h4",{attrs:{id:"缺点"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#缺点"}},[s._v("#")]),s._v(" 缺点")]),s._v(" "),n("ul",[n("li",[s._v("依赖机器时钟，如果机器时钟回拨，会导致重复ID生成")]),s._v(" "),n("li",[s._v("在单机上是递增的，但由于涉及到分布式环境，每台机器上的时钟不可能完全同步，有时候会出现不是全局递增的情况，此缺点可以认为无所谓，一般分布式ID只要求趋势递增，并不会严格要求递增，90%的需求只要求趋势递增。")])]),s._v(" "),n("h4",{attrs:{id:"其它补充"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#其它补充"}},[s._v("#")]),s._v(" 其它补充")]),s._v(" "),n("p",[s._v("为了解决时钟回拨问题，导致ID重复，后面有人专门提出了解决的方案")]),s._v(" "),n("ul",[n("li",[s._v("百度开源的分布式唯一ID生成器 UidGenerator")]),s._v(" "),n("li",[s._v("Leaf - 美团点评分布式ID生成系统")])])])}),[],!1,null,null,null);a.default=e.exports}}]);