(window.webpackJsonp=window.webpackJsonp||[]).push([[106],{805:function(s,a,n){"use strict";n.r(a);var e=n(5),t=Object(e.a)({},(function(){var s=this,a=s.$createElement,n=s._self._c||a;return n("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[n("h1",{attrs:{id:"java注解和反射"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#java注解和反射"}},[s._v("#")]),s._v(" Java注解和反射")]),s._v(" "),n("h2",{attrs:{id:"什么是注解"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#什么是注解"}},[s._v("#")]),s._v(" 什么是注解")]),s._v(" "),n("ul",[n("li",[s._v("Annotation是JDK5.0开始引入的新技术")]),s._v(" "),n("li",[s._v("Annotation的作用\n"),n("ul",[n("li",[s._v("不是程序本身，可以对程序做出解释（这一点和注释没有什么区别）")]),s._v(" "),n("li",[s._v("可以被其它程序，比如编译器读取")])])]),s._v(" "),n("li",[s._v("Annotation的格式\n"),n("ul",[n("li",[s._v("注解以 "),n("code",[s._v("@注释名")]),s._v(" 在代码中存在的，还可以添加一些参数值")]),s._v(" "),n("li",[s._v("例如："),n("code",[s._v('@SuppressWarnings(value = "unchecked")')])])])]),s._v(" "),n("li",[s._v("Annotation在那里使用？\n"),n("ul",[n("li",[s._v("可以附加在package、class、method、field等上面，相当于给他们添加了额外的辅助信息")]),s._v(" "),n("li",[s._v("通过反射机制变成实现对这些元数据的控制")])])])]),s._v(" "),n("h2",{attrs:{id:"内置注解"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#内置注解"}},[s._v("#")]),s._v(" 内置注解")]),s._v(" "),n("ul",[n("li",[s._v("@Override：定义在 "),n("code",[s._v("java.lang.Override")]),s._v("中，此注释只适用于修饰方法，表示一个方法声明打算重写超类中的另一个方法声明")]),s._v(" "),n("li",[s._v("@Deprecated：定义在"),n("code",[s._v("java.lang.Deprecated")]),s._v("中，此注释可以用于修饰方法，属性，类，表示不鼓励程序员使用这样的元素，通常是因为它很危险，或者存在更好的选择")]),s._v(" "),n("li",[s._v("@SuppressWarnings：定义在"),n("code",[s._v("java.lang.SuppressWarnings")]),s._v("中，用来抑制编译时的警告信息，与前面的两个注释不同，你需要额外添加一个参数才能正确使用，这些参数都是已经定义好了的，我们选择性的使用就好了。\n"),n("ul",[n("li",[s._v('@SuppressWarnings("all")')]),s._v(" "),n("li",[s._v('@SuppressWarnings("unchecked")')]),s._v(" "),n("li",[s._v('@SuppressWarnings(value={"unchecked", "deprecation"})')]),s._v(" "),n("li",[s._v("...")])])])]),s._v(" "),n("h2",{attrs:{id:"元注解"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#元注解"}},[s._v("#")]),s._v(" 元注解")]),s._v(" "),n("p",[s._v("元注解的作用就是负责注解其它注解，Java定义了4个标准的meta-annotation类型，他们被用来提供对其它annotation类型作说明。")]),s._v(" "),n("p",[s._v("这些类型和它们所支持的类在 "),n("code",[s._v("java.lang.annotation")]),s._v("包可以找到 "),n("code",[s._v("@Target")]),s._v(" 、"),n("code",[s._v("@Retention")]),s._v("、"),n("code",[s._v("@Documented")]),s._v("、"),n("code",[s._v("@Inherited")])]),s._v(" "),n("ul",[n("li",[s._v("@Target：用于描述注解的使用范围，即：被描述的注解可以在什么地方使用")]),s._v(" "),n("li",[s._v("@Retention：表示需要什么保存该注释信息，用于描述注解的生命周期\n"),n("ul",[n("li",[s._v("级别范围：Source < Class < Runtime")])])]),s._v(" "),n("li",[s._v("@Document：说明该注解被包含在java doc中")]),s._v(" "),n("li",[s._v("@Inherited：说明子类可以集成父类中的注解")])]),s._v(" "),n("p",[s._v("示例")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("/**\n * 元注解\n *\n * @author: 陌溪\n * @create: 2020-03-28-22:57\n */\n@MyAnnotation\npublic class MateAnnotationDemo {\n\n}\n\n/**\n * 定义一个注解\n */\n@Target(value={ElementType.METHOD, ElementType.TYPE})  // target表示我们注解应用的范围，在方法上，和类上有效\n@Retention(RetentionPolicy.RUNTIME)   // Retention：表示我们的注解在什么时候还有效，运行时候有效\n@Documented   // 表示说我们的注解是否生成在java doc中\n@Inherited   // 表示子类可以继承父类的注解\n@interface MyAnnotation {\n\n}\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br")])]),n("h2",{attrs:{id:"自定义注解"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#自定义注解"}},[s._v("#")]),s._v(" 自定义注解")]),s._v(" "),n("p",[s._v("使用 "),n("code",[s._v("@interface")]),s._v("自定义注解时，自动继承了 "),n("code",[s._v("java.lang.annotation.Annotation")]),s._v("接口")]),s._v(" "),n("ul",[n("li",[s._v("@interface 用来声明一个注解，格式：public @interface 注解名 {定义内容")]),s._v(" "),n("li",[s._v("其中的每个方法实际上是申明了一个配置参数")]),s._v(" "),n("li",[s._v("方法的名称就是参数的类型")]),s._v(" "),n("li",[s._v("返回值类型就是参数的类型（返回值只能是基本数据类型，Class，String，enum）")]),s._v(" "),n("li",[s._v("通过default来申明参数的默认值")]),s._v(" "),n("li",[s._v("如果只有一个参数成员，一般参数名为 value")]),s._v(" "),n("li",[s._v("注解元素必须要有值，我们定义元素时，经常使用空字符串或者0作为默认值")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('/**\n * 自定义注解\n *\n * @author: 陌溪\n * @create: 2020-03-28-22:57\n */\npublic class MateAnnotationDemo {\n\n    // 注解可以显示赋值，如果没有默认值，我们就必须给注解赋值\n    @MyAnnotation(schools = {"大学"})\n    public void test(){\n\n    }\n\n}\n\n/**\n * 定义一个注解\n */\n@Target(value={ElementType.METHOD, ElementType.TYPE})  // target表示我们注解应用的范围，在方法上，和类上有效\n@Retention(RetentionPolicy.RUNTIME)   // Retention：表示我们的注解在什么时候还有效，运行时候有效\n@Documented   // 表示说我们的注解是否生成在java doc中\n@Inherited   // 表示子类可以继承父类的注解\n@interface MyAnnotation {\n\n    // 注解的参数：参数类型 + 参数名()\n    String name() default "";\n\n    int age() default 0;\n\n    // 如果默认值为-1，代表不存在\n    int id() default -1;\n\n    String[] schools();\n}\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br"),n("span",{staticClass:"line-number"},[s._v("23")]),n("br"),n("span",{staticClass:"line-number"},[s._v("24")]),n("br"),n("span",{staticClass:"line-number"},[s._v("25")]),n("br"),n("span",{staticClass:"line-number"},[s._v("26")]),n("br"),n("span",{staticClass:"line-number"},[s._v("27")]),n("br"),n("span",{staticClass:"line-number"},[s._v("28")]),n("br"),n("span",{staticClass:"line-number"},[s._v("29")]),n("br"),n("span",{staticClass:"line-number"},[s._v("30")]),n("br"),n("span",{staticClass:"line-number"},[s._v("31")]),n("br"),n("span",{staticClass:"line-number"},[s._v("32")]),n("br"),n("span",{staticClass:"line-number"},[s._v("33")]),n("br"),n("span",{staticClass:"line-number"},[s._v("34")]),n("br"),n("span",{staticClass:"line-number"},[s._v("35")]),n("br")])]),n("h2",{attrs:{id:"反射机制"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#反射机制"}},[s._v("#")]),s._v(" 反射机制")]),s._v(" "),n("h3",{attrs:{id:"动态语言与静态语言"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#动态语言与静态语言"}},[s._v("#")]),s._v(" 动态语言与静态语言")]),s._v(" "),n("h4",{attrs:{id:"动态语言"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#动态语言"}},[s._v("#")]),s._v(" 动态语言")]),s._v(" "),n("p",[s._v("动态语言是一类在运行时可以改变其结构的语言：例如新的函数，对象，甚至代码可以被引进，已有的函数可以被删除或是其它结构上的变化。通俗点说就是在运行时代码可以根据某些条件改变自身结构")]),s._v(" "),n("p",[s._v("主要的动态语言有：Object-c、C#、JavaScript、PHP、Python等")]),s._v(" "),n("h4",{attrs:{id:"静态语言"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#静态语言"}},[s._v("#")]),s._v(" 静态语言")]),s._v(" "),n("p",[s._v("与动态语言相比，运行时结构不可变的语言就是静态语言。例如Java、C、C++")]),s._v(" "),n("p",[s._v("Java不是动态语言，但是Java可以称为“准动态语言”。即Java有一定的动态性，我们可以利用反射机制来获取类似于动态语言的 特性，Java的动态性让编程的时候更加灵活。")]),s._v(" "),n("h3",{attrs:{id:"java反射机制概述"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#java反射机制概述"}},[s._v("#")]),s._v(" Java反射机制概述")]),s._v(" "),n("h4",{attrs:{id:"什么是反射"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#什么是反射"}},[s._v("#")]),s._v(" 什么是反射")]),s._v(" "),n("p",[s._v("Java Reflection：Java反射是Java被视为动态语言的关键，反射机制运行程序在执行期借助于Reflection API 去的任何类内部的信息，并能直接操作任意对象的内部属性及方法。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('Class c = Class.forName("java.lang.String")\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br")])]),n("p",[s._v("在加载完类后，在堆内存的方法区就产生了一个Class类型的对象（一个类只有一个Class对象），这个对象就包含了完整的类的结构信息，我们可以通过这个对象看到类的结构，这个对象就像一面镜子，透过这个镜子看到类的结构，所以我们形象的称之为：反射")]),s._v(" "),n("p",[n("img",{attrs:{src:"/images/image-20200328232620190.png",alt:"image-20200328232620190"}})]),s._v(" "),n("p",[s._v("tip：反射可以获取到private修饰的成员变量和方法")]),s._v(" "),n("h4",{attrs:{id:"反射的应用"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#反射的应用"}},[s._v("#")]),s._v(" 反射的应用")]),s._v(" "),n("ul",[n("li",[s._v("在运行时判断任意一个对象所属类")]),s._v(" "),n("li",[s._v("在运行时构造任意一个类的对象")]),s._v(" "),n("li",[s._v("在运行时判断任意一个类所具有的成员变量和方法")]),s._v(" "),n("li",[s._v("在运行时获取泛型信息")]),s._v(" "),n("li",[s._v("在运行时调用任意一个对象的成员变量和方法")]),s._v(" "),n("li",[s._v("在运行时候处理注解")]),s._v(" "),n("li",[s._v("生成动态代理")]),s._v(" "),n("li",[s._v(".....")])]),s._v(" "),n("h4",{attrs:{id:"java反射的优缺点"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#java反射的优缺点"}},[s._v("#")]),s._v(" Java反射的优缺点")]),s._v(" "),n("ul",[n("li",[s._v("优点：可以实现动态创建对象和编译，体现出很大的灵活性")]),s._v(" "),n("li",[s._v("缺点：对性能有影响。使用反射基本上是一种解释操作，我们可以告诉JVM，我们希望做什么并且它满足我们的要求，这类操作总是慢于直接执行相同的操作。也就是说new创建和对象，比反射性能更高")])]),s._v(" "),n("h4",{attrs:{id:"反射相关的主要api"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#反射相关的主要api"}},[s._v("#")]),s._v(" 反射相关的主要API")]),s._v(" "),n("ul",[n("li",[s._v("java.lang.Class：代表一个类")]),s._v(" "),n("li",[s._v("java.lang.reflect.Method：代表类的方法")]),s._v(" "),n("li",[s._v("java.lang.reflect.Field：代表类的成员变量")]),s._v(" "),n("li",[s._v("java.lang.reflect.Constructor：代表类的构造器")]),s._v(" "),n("li",[s._v("........")])]),s._v(" "),n("h2",{attrs:{id:"理解class类并获取class实例"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#理解class类并获取class实例"}},[s._v("#")]),s._v(" 理解Class类并获取Class实例")]),s._v(" "),n("h3",{attrs:{id:"class类"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#class类"}},[s._v("#")]),s._v(" Class类")]),s._v(" "),n("p",[s._v("我们下面通过Class.forName来获取一个实例对象")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('/**\n * 反射Demo\n *\n * @author: 陌溪\n * @create: 2020-03-29-8:21\n */\npublic class ReflectionDemo {\n    public static void main(String[] args) throws ClassNotFoundException {\n        // 通过反射获取类的Class对象\n        Class c1 = Class.forName("com.moxi.interview.study.annotation.User");\n        Class c2 = Class.forName("com.moxi.interview.study.annotation.User");\n        Class c3 = Class.forName("com.moxi.interview.study.annotation.User");\n        System.out.println(c1.hashCode());\n        System.out.println(c2.hashCode());\n        System.out.println(c3.hashCode());\n\n\n    }\n}\n\n/**\n * 实体类：pojo，entity\n */\nclass User {\n    private String name;\n    private int id;\n    private int age;\n\n    public User() {\n\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    public void setName(String name) {\n        this.name = name;\n    }\n\n    public int getId() {\n        return id;\n    }\n\n    public void setId(int id) {\n        this.id = id;\n    }\n\n    public int getAge() {\n        return age;\n    }\n\n    public void setAge(int age) {\n        this.age = age;\n    }\n\n    @Override\n    public String toString() {\n        return "User{" +\n                "name=\'" + name + \'\\\'\' +\n                ", id=" + id +\n                ", age=" + age +\n                \'}\';\n    }\n}\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br"),n("span",{staticClass:"line-number"},[s._v("23")]),n("br"),n("span",{staticClass:"line-number"},[s._v("24")]),n("br"),n("span",{staticClass:"line-number"},[s._v("25")]),n("br"),n("span",{staticClass:"line-number"},[s._v("26")]),n("br"),n("span",{staticClass:"line-number"},[s._v("27")]),n("br"),n("span",{staticClass:"line-number"},[s._v("28")]),n("br"),n("span",{staticClass:"line-number"},[s._v("29")]),n("br"),n("span",{staticClass:"line-number"},[s._v("30")]),n("br"),n("span",{staticClass:"line-number"},[s._v("31")]),n("br"),n("span",{staticClass:"line-number"},[s._v("32")]),n("br"),n("span",{staticClass:"line-number"},[s._v("33")]),n("br"),n("span",{staticClass:"line-number"},[s._v("34")]),n("br"),n("span",{staticClass:"line-number"},[s._v("35")]),n("br"),n("span",{staticClass:"line-number"},[s._v("36")]),n("br"),n("span",{staticClass:"line-number"},[s._v("37")]),n("br"),n("span",{staticClass:"line-number"},[s._v("38")]),n("br"),n("span",{staticClass:"line-number"},[s._v("39")]),n("br"),n("span",{staticClass:"line-number"},[s._v("40")]),n("br"),n("span",{staticClass:"line-number"},[s._v("41")]),n("br"),n("span",{staticClass:"line-number"},[s._v("42")]),n("br"),n("span",{staticClass:"line-number"},[s._v("43")]),n("br"),n("span",{staticClass:"line-number"},[s._v("44")]),n("br"),n("span",{staticClass:"line-number"},[s._v("45")]),n("br"),n("span",{staticClass:"line-number"},[s._v("46")]),n("br"),n("span",{staticClass:"line-number"},[s._v("47")]),n("br"),n("span",{staticClass:"line-number"},[s._v("48")]),n("br"),n("span",{staticClass:"line-number"},[s._v("49")]),n("br"),n("span",{staticClass:"line-number"},[s._v("50")]),n("br"),n("span",{staticClass:"line-number"},[s._v("51")]),n("br"),n("span",{staticClass:"line-number"},[s._v("52")]),n("br"),n("span",{staticClass:"line-number"},[s._v("53")]),n("br"),n("span",{staticClass:"line-number"},[s._v("54")]),n("br"),n("span",{staticClass:"line-number"},[s._v("55")]),n("br"),n("span",{staticClass:"line-number"},[s._v("56")]),n("br"),n("span",{staticClass:"line-number"},[s._v("57")]),n("br"),n("span",{staticClass:"line-number"},[s._v("58")]),n("br"),n("span",{staticClass:"line-number"},[s._v("59")]),n("br"),n("span",{staticClass:"line-number"},[s._v("60")]),n("br"),n("span",{staticClass:"line-number"},[s._v("61")]),n("br"),n("span",{staticClass:"line-number"},[s._v("62")]),n("br"),n("span",{staticClass:"line-number"},[s._v("63")]),n("br"),n("span",{staticClass:"line-number"},[s._v("64")]),n("br"),n("span",{staticClass:"line-number"},[s._v("65")]),n("br")])]),n("p",[s._v("上面我们通过反射获取了三个对象，我们输出对应对象的hashcode码，会发现")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("1173230247\n1173230247\n1173230247\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br")])]),n("p",[s._v("它们的hashcode码是一样的，这就说明了：")]),s._v(" "),n("ul",[n("li",[s._v("一个类在内存中只有一个Class对象")]),s._v(" "),n("li",[s._v("一个类被加载后，类的整体结构都会被封装在Class对象中")])]),s._v(" "),n("p",[s._v("在Object类中定义了以下的方法，此方法将被所有子类继承")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("public final Class getClass()\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br")])]),n("p",[s._v("以上方法的返回值的类型是一个Class类，此类是Java反射的源头，实际上所谓反射从程序的运行结果来看也很好理解，即：可以通过对象反射求出类的名称。")]),s._v(" "),n("p",[n("img",{attrs:{src:"/images/image-20200329093212035.png",alt:"image-20200329093212035"}})]),s._v(" "),n("p",[s._v("也就是说，我们通过对象来获取到它的Class，相当于逆过程")]),s._v(" "),n("p",[s._v("通过对照镜子我们可以得到的信息：某个类的属性，方法和构造器，某个类到底实现了那些接口。对于每个类而言，JRE都为其保留一个不变的Class类型对象，一个CLass对象包含了特定某个结构的有关信息")]),s._v(" "),n("ul",[n("li",[s._v("Class本身也是一个类")]),s._v(" "),n("li",[s._v("Class对象只能由系统建立对象")]),s._v(" "),n("li",[s._v("一个加载的类在JVM中只会有一个Class实例")]),s._v(" "),n("li",[s._v("一个Class对象对应的是一个加载到JVM中的一个.class文件")]),s._v(" "),n("li",[s._v("每个类的实例都会记得自己是由哪个Class实例所生成")]),s._v(" "),n("li",[s._v("通过Class可以完整地得到一个类中所有被加载的结构")]),s._v(" "),n("li",[s._v("Class类是Reflection的根源，针对任何你想动态加载、运行的类、唯有先获得相应的Class对象")])]),s._v(" "),n("h3",{attrs:{id:"class类常用的方法"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#class类常用的方法"}},[s._v("#")]),s._v(" Class类常用的方法")]),s._v(" "),n("ul",[n("li",[s._v("ClassforName(String name)：返回指定类name的Class对象")]),s._v(" "),n("li",[s._v("newInstance()：调用缺省构造函数，返回Class对象的一个实例")]),s._v(" "),n("li",[s._v("getName()：返回此Class对象所表示的实体（类，接口，数组或void）的名称")]),s._v(" "),n("li",[s._v("getSuperClass()：返回当前Class对象的父类Class对象")]),s._v(" "),n("li",[s._v("getinterfaces()：返回当前对象的接口")]),s._v(" "),n("li",[s._v("getClassLoader()：返回该类的类加载器")]),s._v(" "),n("li",[s._v("getConstructors()：返回一个包含某些Constructor对象的数组")]),s._v(" "),n("li",[s._v("getMethod(String name, Class.. T)：返回一个Method对象，此对象的形参类型为paramsType")]),s._v(" "),n("li",[s._v("getDeclaredFields()：返回Field对象的一个数组")])]),s._v(" "),n("h3",{attrs:{id:"获取对象实例的方法"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#获取对象实例的方法"}},[s._v("#")]),s._v(" 获取对象实例的方法")]),s._v(" "),n("ul",[n("li",[s._v("若已知具体的类，通过类的class属性获取，该方法最为安全可靠，程序性能最高\n"),n("ul",[n("li",[s._v("Class clazz = Person.class;")])])]),s._v(" "),n("li",[s._v("已知某个类的实例，调用该实例的getClass()方法获取Class对象\n"),n("ul",[n("li",[s._v("Class clazz = person.getClass()")])])]),s._v(" "),n("li",[s._v("已经一个类的全类名，且该类在类路径下，可以通过Class类的静态方法forName()获取，HIA可能抛出ClassNotFoundException\n"),n("ul",[n("li",[s._v('Class clazz = Class.forName("demo01.Sutdent")')])])]),s._v(" "),n("li",[s._v("内置数据类型可以直接通过 类名.Type")]),s._v(" "),n("li",[s._v("还可以利用ClassLoader")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('/**\n * Class类创建的方式\n *\n * @author: 陌溪\n * @create: 2020-03-29-9:56\n */\nclass Person {\n    public String name;\n    public Person() {\n    }\n    public Person(String name) {\n        this.name = name;\n    }\n    @Override\n    public String toString() {\n        return "Person{" +\n                "name=\'" + name + \'\\\'\' +\n                \'}\';\n    }\n}\n\nclass Student extends Person{\n    public Student() {\n        this.name = "学生";\n    }\n}\n\nclass Teacher extends Person {\n    public Teacher() {\n        this.name = "老师";\n    }\n}\n\n\npublic class ClassCreateDemo {\n    public static void main(String[] args) throws ClassNotFoundException {\n\n        Person person = new Student();\n        System.out.println("这个人是：" + person.name);\n\n        // 方式1：通过对象获得\n        Class c1 = person.getClass();\n        System.out.println("c1:" + c1.hashCode());\n\n        //方式2：通过forName获得\n        Class c2 = Class.forName("com.moxi.interview.study.annotation.Student");\n        System.out.println("c2:" + c2.hashCode());\n\n        // 方式3：通过类名获取（最为高效）\n        Class c3 = Student.class;\n        System.out.println("c3:" + c3.hashCode());\n\n        // 方式4：基本内置类型的包装类，都有一个Type属性\n        Class c4 = Integer.TYPE;\n        System.out.println(c4.getName());\n\n        // 方式5：获取父类类型\n        Class c5 = c1.getSuperclass();\n    }\n}\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br"),n("span",{staticClass:"line-number"},[s._v("23")]),n("br"),n("span",{staticClass:"line-number"},[s._v("24")]),n("br"),n("span",{staticClass:"line-number"},[s._v("25")]),n("br"),n("span",{staticClass:"line-number"},[s._v("26")]),n("br"),n("span",{staticClass:"line-number"},[s._v("27")]),n("br"),n("span",{staticClass:"line-number"},[s._v("28")]),n("br"),n("span",{staticClass:"line-number"},[s._v("29")]),n("br"),n("span",{staticClass:"line-number"},[s._v("30")]),n("br"),n("span",{staticClass:"line-number"},[s._v("31")]),n("br"),n("span",{staticClass:"line-number"},[s._v("32")]),n("br"),n("span",{staticClass:"line-number"},[s._v("33")]),n("br"),n("span",{staticClass:"line-number"},[s._v("34")]),n("br"),n("span",{staticClass:"line-number"},[s._v("35")]),n("br"),n("span",{staticClass:"line-number"},[s._v("36")]),n("br"),n("span",{staticClass:"line-number"},[s._v("37")]),n("br"),n("span",{staticClass:"line-number"},[s._v("38")]),n("br"),n("span",{staticClass:"line-number"},[s._v("39")]),n("br"),n("span",{staticClass:"line-number"},[s._v("40")]),n("br"),n("span",{staticClass:"line-number"},[s._v("41")]),n("br"),n("span",{staticClass:"line-number"},[s._v("42")]),n("br"),n("span",{staticClass:"line-number"},[s._v("43")]),n("br"),n("span",{staticClass:"line-number"},[s._v("44")]),n("br"),n("span",{staticClass:"line-number"},[s._v("45")]),n("br"),n("span",{staticClass:"line-number"},[s._v("46")]),n("br"),n("span",{staticClass:"line-number"},[s._v("47")]),n("br"),n("span",{staticClass:"line-number"},[s._v("48")]),n("br"),n("span",{staticClass:"line-number"},[s._v("49")]),n("br"),n("span",{staticClass:"line-number"},[s._v("50")]),n("br"),n("span",{staticClass:"line-number"},[s._v("51")]),n("br"),n("span",{staticClass:"line-number"},[s._v("52")]),n("br"),n("span",{staticClass:"line-number"},[s._v("53")]),n("br"),n("span",{staticClass:"line-number"},[s._v("54")]),n("br"),n("span",{staticClass:"line-number"},[s._v("55")]),n("br"),n("span",{staticClass:"line-number"},[s._v("56")]),n("br"),n("span",{staticClass:"line-number"},[s._v("57")]),n("br"),n("span",{staticClass:"line-number"},[s._v("58")]),n("br"),n("span",{staticClass:"line-number"},[s._v("59")]),n("br"),n("span",{staticClass:"line-number"},[s._v("60")]),n("br")])]),n("h3",{attrs:{id:"哪些类型可以有class对象"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#哪些类型可以有class对象"}},[s._v("#")]),s._v(" 哪些类型可以有Class对象")]),s._v(" "),n("p",[s._v("class：外部类，成员（成员内部类，静态内部类），局部内部类，匿名内部类")]),s._v(" "),n("p",[s._v("interface：接口")]),s._v(" "),n("p",[s._v("[]：数组")]),s._v(" "),n("p",[s._v("enum：枚举")]),s._v(" "),n("p",[s._v("annotation：注解@interface")]),s._v(" "),n("p",[s._v("primitive type：基本数据类型")]),s._v(" "),n("p",[s._v("void")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("/**\n * 获取Class的方式\n *\n * @author: 陌溪\n * @create: 2020-03-29-10:16\n */\npublic class GetClassDemo {\n    public static void main(String[] args) {\n        Class c1 = Object.class; // 类\n        Class c2 = Comparable.class; // 接口\n        Class c3 = String[].class; // 数组\n        Class c4 = int[][].class; // 二维数组\n        Class c5 = Override.class; // 注解\n        Class c6 = ElementType.class; // 枚举\n        Class c7 = Integer.class; // 基本数据类型\n        Class c8 = void.class; // void，空数据类型\n        Class c9 = Class.class; // Class\n\n        System.out.println(c1);\n        System.out.println(c2);\n        System.out.println(c3);\n        System.out.println(c4);\n        System.out.println(c5);\n        System.out.println(c6);\n        System.out.println(c7);\n        System.out.println(c8);\n        System.out.println(c9);\n    }\n}\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br"),n("span",{staticClass:"line-number"},[s._v("23")]),n("br"),n("span",{staticClass:"line-number"},[s._v("24")]),n("br"),n("span",{staticClass:"line-number"},[s._v("25")]),n("br"),n("span",{staticClass:"line-number"},[s._v("26")]),n("br"),n("span",{staticClass:"line-number"},[s._v("27")]),n("br"),n("span",{staticClass:"line-number"},[s._v("28")]),n("br"),n("span",{staticClass:"line-number"},[s._v("29")]),n("br")])]),n("p",[s._v("最后运行结果为：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("class java.lang.Object\ninterface java.lang.Comparable\nclass [Ljava.lang.String;\nclass [[I\ninterface java.lang.Override\nclass java.lang.annotation.ElementType\nclass java.lang.Integer\nvoid\nclass java.lang.Class\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br")])]),n("p",[s._v("同时需要注意，只要类型和维度一样，那就是同一个Class对象")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("int [] a = new int[10];\nint [] b = new int[10];\nSystem.out.println(a.getClass().hashCode());\nSystem.out.println(b.getClass().hashCode());\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br")])]),n("p",[s._v("这两个的hashcode是一样的")]),s._v(" "),n("h3",{attrs:{id:"java内存分析"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#java内存分析"}},[s._v("#")]),s._v(" Java内存分析")]),s._v(" "),n("p",[s._v("java内存分为以下三部分")]),s._v(" "),n("ul",[n("li",[s._v("堆\n"),n("ul",[n("li",[s._v("存放new的对象和数组")]),s._v(" "),n("li",[s._v("可以被所有的线程共享，不会存放别的对象引用")])])]),s._v(" "),n("li",[s._v("栈\n"),n("ul",[n("li",[s._v("存放基本变量（会包含这个基本类型的具体数值）")]),s._v(" "),n("li",[s._v("引用对象的变量（会存放这个引用在对堆里面的具体地址）")])])]),s._v(" "),n("li",[s._v("方法区\n"),n("ul",[n("li",[s._v("可以被所有线程共享")]),s._v(" "),n("li",[s._v("包含了所有的class和static变量")])])])]),s._v(" "),n("h2",{attrs:{id:"类的加载与classloader的理解"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#类的加载与classloader的理解"}},[s._v("#")]),s._v(" 类的加载与ClassLoader的理解")]),s._v(" "),n("h3",{attrs:{id:"类加载过程"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#类加载过程"}},[s._v("#")]),s._v(" 类加载过程")]),s._v(" "),n("p",[s._v("当程序主动使用某个类时，如果该类还未被加载到内存中，则系统会通过如下三个步骤对该类进行初始化：")]),s._v(" "),n("p",[n("img",{attrs:{src:"/images/image-20200329105217945.png",alt:"image-20200329105217945"}})]),s._v(" "),n("ul",[n("li",[s._v("加载：将class文件字节码内容加载到内存，并将这些静态数据转换成方法区的运行时数据结构，然后生成一个代表这个类的 "),n("code",[s._v("java.lang.Class")]),s._v(" 对象。")]),s._v(" "),n("li",[s._v("链接：将Java类的二进制代码合并到JVM的运行状态之中的过程。\n"),n("ul",[n("li",[s._v("验证：确保加载的类信息符合JVM规范，没有安全方面的问题")]),s._v(" "),n("li",[s._v("准备：正式为类变量(static)分配内存并设置类变量默认初始值的阶段，这些内存都将在方法区中进行分配。")]),s._v(" "),n("li",[s._v("解析：虚拟机常量池的符号引用(常量名)替换为直接引用(地址)的过程")])])]),s._v(" "),n("li",[s._v("初始化：\n"),n("ul",[n("li",[s._v("执行类构造器"),n("clinit",[s._v("方法的过程，类构造器"),n("clinit",[s._v(" 方法是由编译期自动收集类中所有类变量的赋值动作和静态代码块中的语句合并产生的。（类构造器是构造类信息的，不是构造该类对象的构造器）")])],1)],1),s._v(" "),n("li",[s._v("当初始化一个类的时候，如果发现其父类还没有初始化完成，则需要先触发其父类的初始化")]),s._v(" "),n("li",[s._v("虚拟机会保证一个类的"),n("clinit",[s._v("方法在多相差环境中被正确的加锁和同步")])],1)])])]),s._v(" "),n("p",[s._v("下面一段代码，分别说明了static代码块，以及子类和父类构造方法的执行流程")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('/**\n * 类加载流程\n *\n * @author: 陌溪\n * @create: 2020-03-29-11:02\n */\nclass SuperA {\n\n    static {\n        System.out.println("父类静态代码块初始化");\n    }\n\n    public SuperA() {\n        System.out.println("父类构造函数初始化");\n    }\n}\nclass A extends SuperA{\n    static {\n        System.out.println("静态代码块初始化");\n        m = 300;\n    }\n\n    static int m = 100;\n\n    public A() {\n        System.out.println("A类的无参构造方法");\n    }\n\n}\npublic class ClassLoaderDemo {\n\n    public static void main(String[] args) {\n        A a = new A();\n        System.out.println(a.m);\n    }\n}\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br"),n("span",{staticClass:"line-number"},[s._v("23")]),n("br"),n("span",{staticClass:"line-number"},[s._v("24")]),n("br"),n("span",{staticClass:"line-number"},[s._v("25")]),n("br"),n("span",{staticClass:"line-number"},[s._v("26")]),n("br"),n("span",{staticClass:"line-number"},[s._v("27")]),n("br"),n("span",{staticClass:"line-number"},[s._v("28")]),n("br"),n("span",{staticClass:"line-number"},[s._v("29")]),n("br"),n("span",{staticClass:"line-number"},[s._v("30")]),n("br"),n("span",{staticClass:"line-number"},[s._v("31")]),n("br"),n("span",{staticClass:"line-number"},[s._v("32")]),n("br"),n("span",{staticClass:"line-number"},[s._v("33")]),n("br"),n("span",{staticClass:"line-number"},[s._v("34")]),n("br"),n("span",{staticClass:"line-number"},[s._v("35")]),n("br"),n("span",{staticClass:"line-number"},[s._v("36")]),n("br")])]),n("p",[s._v("最后的结果为：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("父类静态代码块初始化\n静态代码块初始化\n父类构造函数初始化\nA类的无参构造方法\n100\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br")])]),n("p",[s._v("说明静态代码块都是执行的，并且父类优先")]),s._v(" "),n("h3",{attrs:{id:"类加载步骤"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#类加载步骤"}},[s._v("#")]),s._v(" 类加载步骤")]),s._v(" "),n("ul",[n("li",[n("p",[s._v("加载到内存，会产生一个类对应Class对象")])]),s._v(" "),n("li",[n("p",[s._v("链接，链接结束 m = 0")])]),s._v(" "),n("li",[n("p",[s._v("初始化：")]),s._v(" "),n("ul",[n("li",[n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('<clinit>() {\n\tsyso("A类静态方法")\n\tm = 300;\n\tm = 100;\n}\n\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br")])])])])])]),s._v(" "),n("p",[n("img",{attrs:{src:"/images/image-20200329113526771.png",alt:"image-20200329113526771"}})]),s._v(" "),n("h3",{attrs:{id:"什么时候发生类初始化"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#什么时候发生类初始化"}},[s._v("#")]),s._v(" 什么时候发生类初始化")]),s._v(" "),n("h4",{attrs:{id:"类的主动引用-一定发生初始化"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#类的主动引用-一定发生初始化"}},[s._v("#")]),s._v(" 类的主动引用（一定发生初始化）")]),s._v(" "),n("ul",[n("li",[s._v("当虚拟机启动，先初始化main方法所有在类")]),s._v(" "),n("li",[s._v("new 一个类的对象")]),s._v(" "),n("li",[s._v("调用类的静态成员（除了 final常量）和静态方法")]),s._v(" "),n("li",[s._v("使用 java.lang.reflect包的方法对类进行反射调用")]),s._v(" "),n("li",[s._v("当初始化一个类，如果其父类没有被初始化，则会先初始化它的父类")])]),s._v(" "),n("h4",{attrs:{id:"类的被动引用-不会发生初始化"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#类的被动引用-不会发生初始化"}},[s._v("#")]),s._v(" 类的被动引用（不会发生初始化）")]),s._v(" "),n("ul",[n("li",[s._v("当访问一个静态域时，只有真正的申明这个域的类才会被初始化，如：当通过子类引用父类的静态变量，不会导致子类初始化")]),s._v(" "),n("li",[s._v("通过数组定义类引用，不会触发此类的初始化")]),s._v(" "),n("li",[s._v("引用常量不会触发此类的初始化（常量在链接阶段就存入调用类的常量池了）")])]),s._v(" "),n("h3",{attrs:{id:"类加载器的作用"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#类加载器的作用"}},[s._v("#")]),s._v(" 类加载器的作用")]),s._v(" "),n("ul",[n("li",[s._v("类加载的作用：将class文件字节码内容加载到内存中，并将这些静态数据转换成方法区的运行时数据结构，然后在堆中生成了一个代表这个类的 "),n("code",[s._v("java.lang.Class")]),s._v("对象，作为方法区中类数据的访问入口。")]),s._v(" "),n("li",[s._v("类缓存：标准的JavaSE类加载器可以按要求查找类，但是一旦某个类被加载到类加载器中，它将维持加载（缓存）一段时间。不过JVM垃圾回收机制可以回收这些Class对象")])]),s._v(" "),n("p",[n("img",{attrs:{src:"/images/image-20200329114720558.png",alt:"image-20200329114720558"}})]),s._v(" "),n("p",[s._v("类加载器作用是用来把类（Class）装载进内存的，JVM规范定义了如下类型的类的加载器")]),s._v(" "),n("p",[n("img",{attrs:{src:"/images/image-20200329114953888.png",alt:"image-20200329114953888"}})]),s._v(" "),n("p",[s._v("代码如下：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("/**\n * 类加载器的种类\n *\n * @author: 陌溪\n * @create: 2020-03-29-11:51\n */\npublic class ClassLoaderTypeDemo {\n    public static void main(String[] args) {\n\n        //当前类是哪个加载器\n        ClassLoader loader = ClassLoaderTypeDemo.class.getClassLoader();\n        System.out.println(loader);\n\n        // 获取系统类加载器\n        ClassLoader classLoader = ClassLoader.getSystemClassLoader();\n        System.out.println(classLoader);\n\n        // 获取系统类加载器的父类加载器 -> 扩展类加载器\n        ClassLoader parentClassLoader = classLoader.getParent();\n        System.out.println(parentClassLoader);\n\n        // 获取扩展类加载器的父类加载器 -> 根加载器（C、C++）\n        ClassLoader superParentClassLoader = parentClassLoader.getParent();\n        System.out.println(superParentClassLoader);\n\n        // 测试JDK内置类是谁加载的\n        ClassLoader loader2 = Object.class.getClassLoader();\n        System.out.println(loader2);\n    }\n}\n\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br"),n("span",{staticClass:"line-number"},[s._v("23")]),n("br"),n("span",{staticClass:"line-number"},[s._v("24")]),n("br"),n("span",{staticClass:"line-number"},[s._v("25")]),n("br"),n("span",{staticClass:"line-number"},[s._v("26")]),n("br"),n("span",{staticClass:"line-number"},[s._v("27")]),n("br"),n("span",{staticClass:"line-number"},[s._v("28")]),n("br"),n("span",{staticClass:"line-number"},[s._v("29")]),n("br"),n("span",{staticClass:"line-number"},[s._v("30")]),n("br"),n("span",{staticClass:"line-number"},[s._v("31")]),n("br")])]),n("p",[s._v("运行结果：我们发现，根加载器我们无法获取到")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("sun.misc.Launcher$AppClassLoader@18b4aac2\nsun.misc.Launcher$AppClassLoader@18b4aac2\nsun.misc.Launcher$ExtClassLoader@45ee12a7\nnull\nnull\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br")])]),n("p",[s._v("获取类加载器能够加载的路径")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('// 如何获取类加载器可以加载的路径\nSystem.out.println(System.getProperty("java.class.path"));\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br")])]),n("p",[s._v("最后输出结果为：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('        // 如何获取类加载器可以加载的路径\n        System.out.println(System.getProperty("java.class.path"));\n\n        /*\n        E:\\Software\\JDK1.8\\Java\\jre\\lib\\charsets.jar;\n        E:\\Software\\JDK1.8\\Java\\jre\\lib\\deploy.jar;\n        E:\\Software\\JDK1.8\\Java\\jre\\lib\\ext\\access-bridge-64.jar;\n        E:\\Software\\JDK1.8\\Java\\jre\\lib\\ext\\cldrdata.jar;\n        E:\\Software\\JDK1.8\\Java\\jre\\lib\\ext\\dnsns.jar;\n        E:\\Software\\JDK1.8\\Java\\jre\\lib\\ext\\jaccess.jar;\n        E:\\Software\\JDK1.8\\Java\\jre\\lib\\ext\\jfxrt.jar;\n        E:\\Software\\JDK1.8\\Java\\jre\\lib\\ext\\localedata.jar;\n        E:\\Software\\JDK1.8\\Java\\jre\\lib\\ext\\nashorn.jar;\n        E:\\Software\\JDK1.8\\Java\\jre\\lib\\ext\\sunec.jar;\n        E:\\Software\\JDK1.8\\Java\\jre\\lib\\ext\\sunjce_provider.jar;\n        E:\\Software\\JDK1.8\\Java\\jre\\lib\\ext\\sunmscapi.jar;\n        E:\\Software\\JDK1.8\\Java\\jre\\lib\\ext\\sunpkcs11.jar;\n        E:\\Software\\JDK1.8\\Java\\jre\\lib\\ext\\zipfs.jar;\n        E:\\Software\\JDK1.8\\Java\\jre\\lib\\javaws.jar;\n        E:\\Software\\JDK1.8\\Java\\jre\\lib\\jce.jar;\n        E:\\Software\\JDK1.8\\Java\\jre\\lib\\jfr.jar;\n        E:\\Software\\JDK1.8\\Java\\jre\\lib\\jfxswt.jar;\n        E:\\Software\\JDK1.8\\Java\\jre\\lib\\jsse.jar;\n        E:\\Software\\JDK1.8\\Java\\jre\\lib\\management-agent.jar;\n        E:\\Software\\JDK1.8\\Java\\jre\\lib\\plugin.jar;\n        E:\\Software\\JDK1.8\\Java\\jre\\lib\\resources.jar;\n        E:\\Software\\JDK1.8\\Java\\jre\\lib\\rt.jar;\n        C:\\Users\\Administrator\\Desktop\\LearningNotes\\校招面试\\JUC\\Code\\target\\classes;\n        C:\\Users\\Administrator\\.m2\\repository\\org\\projectlombok\\lombok\\1.18.10\\lombok-1.18.10.jar;\n        C:\\Users\\Administrator\\.m2\\repository\\cglib\\cglib\\3.3.0\\cglib-3.3.0.jar;\n        C:\\Users\\Administrator\\.m2\\repository\\org\\ow2\\asm\\asm\\7.1\\asm-7.1.jar;\n        E:\\Software\\IntelliJ IDEA\\IntelliJ IDEA 2019.1.2\\lib\\idea_rt.jar\n         */\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br"),n("span",{staticClass:"line-number"},[s._v("23")]),n("br"),n("span",{staticClass:"line-number"},[s._v("24")]),n("br"),n("span",{staticClass:"line-number"},[s._v("25")]),n("br"),n("span",{staticClass:"line-number"},[s._v("26")]),n("br"),n("span",{staticClass:"line-number"},[s._v("27")]),n("br"),n("span",{staticClass:"line-number"},[s._v("28")]),n("br"),n("span",{staticClass:"line-number"},[s._v("29")]),n("br"),n("span",{staticClass:"line-number"},[s._v("30")]),n("br"),n("span",{staticClass:"line-number"},[s._v("31")]),n("br"),n("span",{staticClass:"line-number"},[s._v("32")]),n("br"),n("span",{staticClass:"line-number"},[s._v("33")]),n("br")])]),n("p",[s._v("我们能够发现，类在加载的时候，都是有自己的加载区域的，而不是任何地方的类都能够被加载")]),s._v(" "),n("h3",{attrs:{id:"获取运行时候类的完整结构"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#获取运行时候类的完整结构"}},[s._v("#")]),s._v(" 获取运行时候类的完整结构")]),s._v(" "),n("p",[s._v("通过反射能够获取运行时类的完整结构")]),s._v(" "),n("ul",[n("li",[s._v("实现的全部接口")]),s._v(" "),n("li",[s._v("所继承的父类")]),s._v(" "),n("li",[s._v("全部的构造器")]),s._v(" "),n("li",[s._v("全部的方法")]),s._v(" "),n("li",[s._v("全部的Field")]),s._v(" "),n("li",[s._v("注解")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('/**\n * 获取运行时类信息\n * @author: 陌溪\n * @create: 2020-03-29-12:13\n */\npublic class GetClassInfo {\n    public static void main(String[] args) throws ClassNotFoundException, NoSuchFieldException, NoSuchMethodException {\n        Class clazz = Class.forName("com.moxi.interview.study.annotation.User");\n\n        // 获取类名字\n        System.out.println(clazz.getName()); // 包名 + 类名\n        System.out.println(clazz.getSimpleName()); // 类名\n\n        // 获取类属性\n        System.out.println("================");\n        // 只能找到public属性\n        Field [] fields = clazz.getFields();\n\n        // 找到全部的属性\n        Field [] fieldAll = clazz.getDeclaredFields();\n\n        for (int i = 0; i < fieldAll.length; i++) {\n            System.out.println(fieldAll[i]);\n        }\n\n        // 获取指定属性的值\n        Field name = clazz.getDeclaredField("name");\n\n        // 获取方法\n        Method [] methods = clazz.getDeclaredMethods(); // 获取本类和父类的所有public方法\n        Method [] methods2 = clazz.getMethods(); // 获取本类所有方法\n\n        // 获得指定方法\n        Method method = clazz.getDeclaredMethod("getName", null);\n\n        // 获取方法的时候，可以把参数也丢进去，这样因为避免方法重载，而造成不知道加载那个方法\n        Method method2 = clazz.getDeclaredMethod("setName", String.class);\n\n    }\n}\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br"),n("span",{staticClass:"line-number"},[s._v("23")]),n("br"),n("span",{staticClass:"line-number"},[s._v("24")]),n("br"),n("span",{staticClass:"line-number"},[s._v("25")]),n("br"),n("span",{staticClass:"line-number"},[s._v("26")]),n("br"),n("span",{staticClass:"line-number"},[s._v("27")]),n("br"),n("span",{staticClass:"line-number"},[s._v("28")]),n("br"),n("span",{staticClass:"line-number"},[s._v("29")]),n("br"),n("span",{staticClass:"line-number"},[s._v("30")]),n("br"),n("span",{staticClass:"line-number"},[s._v("31")]),n("br"),n("span",{staticClass:"line-number"},[s._v("32")]),n("br"),n("span",{staticClass:"line-number"},[s._v("33")]),n("br"),n("span",{staticClass:"line-number"},[s._v("34")]),n("br"),n("span",{staticClass:"line-number"},[s._v("35")]),n("br"),n("span",{staticClass:"line-number"},[s._v("36")]),n("br"),n("span",{staticClass:"line-number"},[s._v("37")]),n("br"),n("span",{staticClass:"line-number"},[s._v("38")]),n("br"),n("span",{staticClass:"line-number"},[s._v("39")]),n("br"),n("span",{staticClass:"line-number"},[s._v("40")]),n("br")])]),n("h2",{attrs:{id:"双亲委派机制"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#双亲委派机制"}},[s._v("#")]),s._v(" 双亲委派机制")]),s._v(" "),n("p",[s._v("如果我们想定义一个：java.lang.string 包，我们会发现无法创建")]),s._v(" "),n("p",[s._v("因为类在加载的时候，会逐级往上")]),s._v(" "),n("p",[s._v("也就是说当前的系统加载器，不会马上的创建该类，而是将该类委派给 扩展类加载器，扩展类加载器在委派为根加载器，然后引导类加载器去看这个类在不在能访问的路径下，发现 sring包已经存在了，所以就无法进行，也就是我们无法使用自己自定义的string类，而是使用初始化的stirng类")]),s._v(" "),n("p",[s._v("当一个类收到了类加载请求，他首先不会尝试自己去加载这个类，而是把这个请求委派给父类去完成，每一个层次类加载器都是如此，因此所有的加载请求都应该传送到启动类加载其中，只有当父类加载器反馈自己无法完成这个请求的时候（在它的加载路径下没有找到所需加载的Class），子类加载器才会尝试自己去加载。")]),s._v(" "),n("p",[s._v("采用双亲委派的一个好处是比如加载位于rt.jar 包中的类java.lang.Object，不管是哪个加载器加载这个类，最终都是委托给顶层的启动类加载器进行加载，这样就保证了使用不同的类加载器最终得到的都是同样一个Object 对象")]),s._v(" "),n("p",[n("img",{attrs:{src:"/images/image-20200329122029227.png",alt:"image-20200329122029227"}})]),s._v(" "),n("h2",{attrs:{id:"有了class对象-我们能够做什么"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#有了class对象-我们能够做什么"}},[s._v("#")]),s._v(" 有了Class对象，我们能够做什么？")]),s._v(" "),n("p",[s._v("创建类的对象：通过调用Class对象的newInstance()方法")]),s._v(" "),n("ul",[n("li",[s._v("类必须有一个无参数的构造器")]),s._v(" "),n("li",[s._v("类的构造器的权限需要足够")])]),s._v(" "),n("p",[s._v("如果没有无参构造器就不能创建对象？")]),s._v(" "),n("p",[s._v("只要在操作的时候明确的调用类中的构造器，并将参数传递进去之后，才可以实例化操作。")]),s._v(" "),n("p",[s._v("步骤如下：")]),s._v(" "),n("ul",[n("li",[s._v("通过Class类的getDeclaredConstructor(Class ... parameterTypes)取得本类的指定形参类型的构造器")]),s._v(" "),n("li",[s._v("向构造器的形参中，传递一个对象数组进去，里面包含了构造器中所需的各个参数")]),s._v(" "),n("li",[s._v("通过Constructor实例化对象")])]),s._v(" "),n("h4",{attrs:{id:"调用指定方法"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#调用指定方法"}},[s._v("#")]),s._v(" 调用指定方法")]),s._v(" "),n("p",[s._v("通过反射，调用类中的方法，通过Method类完成。")]),s._v(" "),n("ul",[n("li",[s._v("通过Class类的getMethod方法取得一个Method对象，并设置此方法操作是所需要的参数类型")]),s._v(" "),n("li",[s._v("之后使用Object invoke进行调用，并向方法中传递要设置的obj对象的参数信息")])]),s._v(" "),n("h4",{attrs:{id:"invoke方法"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#invoke方法"}},[s._v("#")]),s._v(" Invoke方法")]),s._v(" "),n("ul",[n("li",[s._v("Object invoke(Object obj， Object ... args)")]),s._v(" "),n("li",[s._v("Object对应原方法的返回值，若原方法无返回值，此时返回null")]),s._v(" "),n("li",[s._v("若原方法为静态方法，此时形参Object 可以为null")]),s._v(" "),n("li",[s._v("若原方法形参列表为空，则Object[] args 为 null")]),s._v(" "),n("li",[s._v("若原方法声明private，则需要在调用此invoke() 方法前，显示调用方法对象的setAccessible(true)方法，将可访问private的方法")])]),s._v(" "),n("h4",{attrs:{id:"setaccessible方法"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#setaccessible方法"}},[s._v("#")]),s._v(" setAccessible方法")]),s._v(" "),n("ul",[n("li",[s._v("Method和Field、Constructor对象都有setAccessible()方法")]),s._v(" "),n("li",[s._v("setAccessible作用是启动和禁用访问安全检查的开关")]),s._v(" "),n("li",[s._v("参数值为true则指示反射对象再使用时应该取消Java语言访问检查\n"),n("ul",[n("li",[s._v("提高反射效率，如果代码中必须使用反射，而这句代码需要频繁被嗲用，那么设置成true")]),s._v(" "),n("li",[s._v("使得原本无法访问的私有成员也可以访问")])])]),s._v(" "),n("li",[s._v("参数值为false则指示反射的对象应该实行Java语言访问检查")])]),s._v(" "),n("p",[n("img",{attrs:{src:"/images/image-20200329144428207.png",alt:"image-20200329144428207"}})]),s._v(" "),n("p",[s._v("完整代码：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('/**\n * 通过反射获取对象\n *\n * @author: 陌溪\n * @create: 2020-03-29-12:43\n */\npublic class GetObjectByReflectionDemo {\n    public static void main(String[] args) throws ClassNotFoundException, IllegalAccessException, InstantiationException, NoSuchMethodException, InvocationTargetException, NoSuchFieldException {\n\n        // 获取Class\n        Class clazz = Class.forName("com.moxi.interview.study.annotation.User");\n\n        // 构造一个对象，newInstance调用的是无参构造器，如果没有无参构造器的话，本方法会出错\n//        User user = (User)clazz.newInstance();\n\n        // 获取class的有参构造器\n        Constructor constructor = clazz.getDeclaredConstructor(String.class, int.class, int.class);\n        User user2 = (User) constructor.newInstance("小溪", 10, 10);\n        System.out.println(user2);\n\n\n        // 通过反射调用普通构造方法\n        User user3 = (User)clazz.newInstance();\n        // 获取setName 方法\n        Method setName = clazz.getDeclaredMethod("setName", String.class);\n        // 执行setName方法，传入对象 和 参数\n        setName.invoke(user3, "小白");\n        System.out.println(user3);\n\n        System.out.println("============");\n        Field age = clazz.getDeclaredField("age");\n        // 关闭权限检测,这样才能直接修改字段，因为 set方法不能直接操作私有变量\n        age.setAccessible(true);\n        age.set(user3, 10);\n        System.out.println(user3);\n\n    }\n}\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br"),n("span",{staticClass:"line-number"},[s._v("23")]),n("br"),n("span",{staticClass:"line-number"},[s._v("24")]),n("br"),n("span",{staticClass:"line-number"},[s._v("25")]),n("br"),n("span",{staticClass:"line-number"},[s._v("26")]),n("br"),n("span",{staticClass:"line-number"},[s._v("27")]),n("br"),n("span",{staticClass:"line-number"},[s._v("28")]),n("br"),n("span",{staticClass:"line-number"},[s._v("29")]),n("br"),n("span",{staticClass:"line-number"},[s._v("30")]),n("br"),n("span",{staticClass:"line-number"},[s._v("31")]),n("br"),n("span",{staticClass:"line-number"},[s._v("32")]),n("br"),n("span",{staticClass:"line-number"},[s._v("33")]),n("br"),n("span",{staticClass:"line-number"},[s._v("34")]),n("br"),n("span",{staticClass:"line-number"},[s._v("35")]),n("br"),n("span",{staticClass:"line-number"},[s._v("36")]),n("br"),n("span",{staticClass:"line-number"},[s._v("37")]),n("br"),n("span",{staticClass:"line-number"},[s._v("38")]),n("br")])]),n("p",[s._v("运行结果")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("User{name='小溪', id=10, age=10}\nUser{name='小白', id=0, age=0}\n============\nUser{name='小白', id=0, age=10}\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br")])]),n("h2",{attrs:{id:"反射性能对比"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#反射性能对比"}},[s._v("#")]),s._v(" 反射性能对比")]),s._v(" "),n("p",[s._v("下面我们编写代码来具体试一试，使用反射的时候和不适用反射，在执行方法时的性能对比")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('/**\n * 反射性能\n *\n * @author: 陌溪\n * @create: 2020-03-29-14:55\n */\npublic class ReflectionPerformance {\n\n    /**\n     * 普通方式调用\n     */\n    public static void test01() {\n        User user = new User();\n        long startTime = System.currentTimeMillis();\n        for (int i = 0; i < 1000000000; i++) {\n            user.getName();\n        }\n        long endTime = System.currentTimeMillis();\n\n        System.out.println("普通方式执行10亿次getName的时间:" + (endTime - startTime) + " ms");\n    }\n\n    /**\n     * 反射方式调用\n     */\n    public static void test02() throws Exception {\n        Class clazz = Class.forName("com.moxi.interview.study.annotation.User");\n        Method getName = clazz.getDeclaredMethod("getName", null);\n        User user = (User) clazz.newInstance();\n        long startTime = System.currentTimeMillis();\n        for (int i = 0; i < 1000000000; i++) {\n            getName.invoke(user, null);\n        }\n        long endTime = System.currentTimeMillis();\n\n        System.out.println("反射方式执行10亿次getName的时间:" + (endTime - startTime) + " ms");\n    }\n\n    /**\n     * 反射方式调用，关闭权限检查\n     */\n    public static void test03() throws Exception {\n        Class clazz = Class.forName("com.moxi.interview.study.annotation.User");\n        Method getName = clazz.getDeclaredMethod("getName", null);\n        User user = (User) clazz.newInstance();\n        long startTime = System.currentTimeMillis();\n        getName.setAccessible(true);\n        for (int i = 0; i < 1000000000; i++) {\n            getName.invoke(user, null);\n        }\n        long endTime = System.currentTimeMillis();\n\n        System.out.println("反射方式执行10亿次getName的时间:" + (endTime - startTime) + " ms");\n    }\n    public static void main(String[] args) throws Exception {\n        test01();\n        test02();\n        test03();\n    }\n}\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br"),n("span",{staticClass:"line-number"},[s._v("23")]),n("br"),n("span",{staticClass:"line-number"},[s._v("24")]),n("br"),n("span",{staticClass:"line-number"},[s._v("25")]),n("br"),n("span",{staticClass:"line-number"},[s._v("26")]),n("br"),n("span",{staticClass:"line-number"},[s._v("27")]),n("br"),n("span",{staticClass:"line-number"},[s._v("28")]),n("br"),n("span",{staticClass:"line-number"},[s._v("29")]),n("br"),n("span",{staticClass:"line-number"},[s._v("30")]),n("br"),n("span",{staticClass:"line-number"},[s._v("31")]),n("br"),n("span",{staticClass:"line-number"},[s._v("32")]),n("br"),n("span",{staticClass:"line-number"},[s._v("33")]),n("br"),n("span",{staticClass:"line-number"},[s._v("34")]),n("br"),n("span",{staticClass:"line-number"},[s._v("35")]),n("br"),n("span",{staticClass:"line-number"},[s._v("36")]),n("br"),n("span",{staticClass:"line-number"},[s._v("37")]),n("br"),n("span",{staticClass:"line-number"},[s._v("38")]),n("br"),n("span",{staticClass:"line-number"},[s._v("39")]),n("br"),n("span",{staticClass:"line-number"},[s._v("40")]),n("br"),n("span",{staticClass:"line-number"},[s._v("41")]),n("br"),n("span",{staticClass:"line-number"},[s._v("42")]),n("br"),n("span",{staticClass:"line-number"},[s._v("43")]),n("br"),n("span",{staticClass:"line-number"},[s._v("44")]),n("br"),n("span",{staticClass:"line-number"},[s._v("45")]),n("br"),n("span",{staticClass:"line-number"},[s._v("46")]),n("br"),n("span",{staticClass:"line-number"},[s._v("47")]),n("br"),n("span",{staticClass:"line-number"},[s._v("48")]),n("br"),n("span",{staticClass:"line-number"},[s._v("49")]),n("br"),n("span",{staticClass:"line-number"},[s._v("50")]),n("br"),n("span",{staticClass:"line-number"},[s._v("51")]),n("br"),n("span",{staticClass:"line-number"},[s._v("52")]),n("br"),n("span",{staticClass:"line-number"},[s._v("53")]),n("br"),n("span",{staticClass:"line-number"},[s._v("54")]),n("br"),n("span",{staticClass:"line-number"},[s._v("55")]),n("br"),n("span",{staticClass:"line-number"},[s._v("56")]),n("br"),n("span",{staticClass:"line-number"},[s._v("57")]),n("br"),n("span",{staticClass:"line-number"},[s._v("58")]),n("br"),n("span",{staticClass:"line-number"},[s._v("59")]),n("br"),n("span",{staticClass:"line-number"},[s._v("60")]),n("br")])]),n("p",[s._v("运行结果：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("普通方式执行10亿次getName的时间:3 ms\n反射方式执行10亿次getName的时间:2554 ms\n反射方式执行10亿次getName的时间:1365 ms\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br")])]),n("p",[s._v("我们上面分别是执行了 10亿次 getName的方法，从里面可以看出，通过直接实例化对象后，调用getName耗时最短，同时关闭了 权限检查后的比不关闭能提高一倍的性能。")]),s._v(" "),n("h2",{attrs:{id:"反射操作泛型"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#反射操作泛型"}},[s._v("#")]),s._v(" 反射操作泛型")]),s._v(" "),n("p",[s._v("Java采用泛型擦除机制来引入泛型，Java中的泛型仅仅是给编译器Java才使用的，确保数据的安全性和免去强制类型转换的问题，但是一旦编译完成后，所有的泛型有关的类型全部被擦除")]),s._v(" "),n("p",[s._v("为了通过反射操作这些类型，Java新增了ParameterizedType，GenericArrayType，TypeVariable和WildcardType几种类型来代表不能被归一到Class类中的类型但是有何原始类型齐名的类型。")]),s._v(" "),n("ul",[n("li",[s._v("ParameterizedType：表示一种参数化类型，比如Collection"),n("String")],1),s._v(" "),n("li",[s._v("GenericArrayType：表示一种元素类型是参数化类型或者类型变量的数组类型")]),s._v(" "),n("li",[s._v("TypeVariable：是各种类型变量的公共父接口")]),s._v(" "),n("li",[s._v("WildcardType：代表一种通配符类型的表达式")])]),s._v(" "),n("p",[s._v("下面我们通过代码来获取方法上的泛型，包括参数泛型，以及返回值泛型")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('/**\n * 通过反射获取泛型\n *\n * @author: 陌溪\n * @create: 2020-03-29-15:15\n */\npublic class GenericityDemo {\n\n    public void test01(Map<String, User> map, List<User> list) {\n        System.out.println("test01");\n    }\n\n    public Map<String, User> test02() {\n        System.out.println("test02");\n        return null;\n    }\n\n    public static void main(String[] args) throws Exception{\n\n        Method method = GenericityDemo.class.getMethod("test01", Map.class, List.class);\n\n        // 获取所有的泛型，也就是参数泛型\n        Type[] genericParameterTypes = method.getGenericParameterTypes();\n\n        // 遍历打印全部泛型\n        for (Type genericParameterType : genericParameterTypes) {\n            System.out.println(" # " +genericParameterType);\n            if(genericParameterType instanceof ParameterizedType) {\n                Type[] actualTypeArguments = ((ParameterizedType) genericParameterType).getActualTypeArguments();\n                for (Type actualTypeArgument : actualTypeArguments) {\n                    System.out.println(actualTypeArgument);\n                }\n            }\n        }\n\n        // 获取返回值泛型\n        Method method2 = GenericityDemo.class.getMethod("test02", null);\n        Type returnGenericParameterTypes = method2.getGenericReturnType();\n\n        // 遍历打印全部泛型\n        if(returnGenericParameterTypes instanceof ParameterizedType) {\n            Type[] actualTypeArguments = ((ParameterizedType) returnGenericParameterTypes).getActualTypeArguments();\n            for (Type actualTypeArgument : actualTypeArguments) {\n                System.out.println(actualTypeArgument);\n            }\n        }\n\n    }\n}\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br"),n("span",{staticClass:"line-number"},[s._v("23")]),n("br"),n("span",{staticClass:"line-number"},[s._v("24")]),n("br"),n("span",{staticClass:"line-number"},[s._v("25")]),n("br"),n("span",{staticClass:"line-number"},[s._v("26")]),n("br"),n("span",{staticClass:"line-number"},[s._v("27")]),n("br"),n("span",{staticClass:"line-number"},[s._v("28")]),n("br"),n("span",{staticClass:"line-number"},[s._v("29")]),n("br"),n("span",{staticClass:"line-number"},[s._v("30")]),n("br"),n("span",{staticClass:"line-number"},[s._v("31")]),n("br"),n("span",{staticClass:"line-number"},[s._v("32")]),n("br"),n("span",{staticClass:"line-number"},[s._v("33")]),n("br"),n("span",{staticClass:"line-number"},[s._v("34")]),n("br"),n("span",{staticClass:"line-number"},[s._v("35")]),n("br"),n("span",{staticClass:"line-number"},[s._v("36")]),n("br"),n("span",{staticClass:"line-number"},[s._v("37")]),n("br"),n("span",{staticClass:"line-number"},[s._v("38")]),n("br"),n("span",{staticClass:"line-number"},[s._v("39")]),n("br"),n("span",{staticClass:"line-number"},[s._v("40")]),n("br"),n("span",{staticClass:"line-number"},[s._v("41")]),n("br"),n("span",{staticClass:"line-number"},[s._v("42")]),n("br"),n("span",{staticClass:"line-number"},[s._v("43")]),n("br"),n("span",{staticClass:"line-number"},[s._v("44")]),n("br"),n("span",{staticClass:"line-number"},[s._v("45")]),n("br"),n("span",{staticClass:"line-number"},[s._v("46")]),n("br"),n("span",{staticClass:"line-number"},[s._v("47")]),n("br"),n("span",{staticClass:"line-number"},[s._v("48")]),n("br"),n("span",{staticClass:"line-number"},[s._v("49")]),n("br")])]),n("p",[s._v("得到的结果")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v(" # java.util.Map<java.lang.String, com.moxi.interview.study.annotation.User>\nclass java.lang.String\nclass com.moxi.interview.study.annotation.User\n # java.util.List<com.moxi.interview.study.annotation.User>\nclass com.moxi.interview.study.annotation.User\n###################\nclass java.lang.String\nclass com.moxi.interview.study.annotation.User\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br")])]),n("h2",{attrs:{id:"反射操作注解"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#反射操作注解"}},[s._v("#")]),s._v(" 反射操作注解")]),s._v(" "),n("p",[s._v("通过反射能够获取到 类、方法、字段。。。等上的注解")]),s._v(" "),n("ul",[n("li",[s._v("getAnnotation")]),s._v(" "),n("li",[s._v("getAnnotations")])]),s._v(" "),n("h3",{attrs:{id:"orm对象关系映射"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#orm对象关系映射"}},[s._v("#")]),s._v(" ORM对象关系映射")]),s._v(" "),n("p",[s._v("ORM即为：Object relationship Mapping，对象关系映射")]),s._v(" "),n("ul",[n("li",[s._v("类和表结构对应")]),s._v(" "),n("li",[s._v("属性和字段对应")]),s._v(" "),n("li",[s._v("对象和记录对应")])]),s._v(" "),n("p",[n("img",{attrs:{src:"/images/image-20200329153301047.png",alt:"image-20200329153301047"}})]),s._v(" "),n("p",[s._v("下面使用代码，模拟ORM框架的简单使用")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('/**\n * ORMDemo\n *\n * @author: 陌溪\n * @create: 2020-03-29-15:33\n */\n@TableKuang("db_student")\nclass Student2 {\n    @FieldKuang(columnName = "db_id", type="int", length = 10)\n    private int id;\n\n    @FieldKuang(columnName = "db_age", type="int", length = 10)\n    private int age;\n\n    @FieldKuang(columnName = "db_name", type="varchar", length = 10)\n    private String name;\n\n    public Student2() {\n    }\n\n    public Student2(int id, int age, String name) {\n        this.id = id;\n        this.age = age;\n        this.name = name;\n    }\n\n    public int getId() {\n        return id;\n    }\n\n    public void setId(int id) {\n        this.id = id;\n    }\n\n    public int getAge() {\n        return age;\n    }\n\n    public void setAge(int age) {\n        this.age = age;\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    public void setName(String name) {\n        this.name = name;\n    }\n\n    @Override\n    public String toString() {\n        return "Student2{" +\n                "id=" + id +\n                ", age=" + age +\n                ", name=\'" + name + \'\\\'\' +\n                \'}\';\n    }\n}\n\n/**\n * 自定义注解：类名的注解\n */\n@Target(ElementType.TYPE)\n@Retention(RetentionPolicy.RUNTIME)\n@interface TableKuang {\n    String value();\n}\n\n/**\n * 自定义注解：属性的注解\n */\n@Target(ElementType.FIELD)\n@Retention(RetentionPolicy.RUNTIME)\n@interface FieldKuang {\n    String columnName();\n    String type();\n    int length() default 0;\n}\npublic class ORMDemo {\n\n    public static void main(String[] args) throws Exception{\n        // 获取Student 的 Class对象\n        Class c1 = Class.forName("com.moxi.interview.study.annotation.Student2");\n\n        // 通过反射，获取到全部注解\n        Annotation [] annotations = c1.getAnnotations();\n\n        for (Annotation annotation : annotations) {\n            System.out.println(annotation);\n        }\n\n        // 获取注解的value值\n        TableKuang tableKuang = (TableKuang)c1.getAnnotation(TableKuang.class);\n        String value = tableKuang.value();\n        System.out.println(value);\n\n        // 获得类指定的注解\n        Field f = c1.getDeclaredField("name");\n        FieldKuang fieldKuang = f.getAnnotation(FieldKuang.class);\n        System.out.println(fieldKuang.columnName());\n        System.out.println(fieldKuang.type());\n        System.out.println(fieldKuang.length());\n    }\n}\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br"),n("span",{staticClass:"line-number"},[s._v("23")]),n("br"),n("span",{staticClass:"line-number"},[s._v("24")]),n("br"),n("span",{staticClass:"line-number"},[s._v("25")]),n("br"),n("span",{staticClass:"line-number"},[s._v("26")]),n("br"),n("span",{staticClass:"line-number"},[s._v("27")]),n("br"),n("span",{staticClass:"line-number"},[s._v("28")]),n("br"),n("span",{staticClass:"line-number"},[s._v("29")]),n("br"),n("span",{staticClass:"line-number"},[s._v("30")]),n("br"),n("span",{staticClass:"line-number"},[s._v("31")]),n("br"),n("span",{staticClass:"line-number"},[s._v("32")]),n("br"),n("span",{staticClass:"line-number"},[s._v("33")]),n("br"),n("span",{staticClass:"line-number"},[s._v("34")]),n("br"),n("span",{staticClass:"line-number"},[s._v("35")]),n("br"),n("span",{staticClass:"line-number"},[s._v("36")]),n("br"),n("span",{staticClass:"line-number"},[s._v("37")]),n("br"),n("span",{staticClass:"line-number"},[s._v("38")]),n("br"),n("span",{staticClass:"line-number"},[s._v("39")]),n("br"),n("span",{staticClass:"line-number"},[s._v("40")]),n("br"),n("span",{staticClass:"line-number"},[s._v("41")]),n("br"),n("span",{staticClass:"line-number"},[s._v("42")]),n("br"),n("span",{staticClass:"line-number"},[s._v("43")]),n("br"),n("span",{staticClass:"line-number"},[s._v("44")]),n("br"),n("span",{staticClass:"line-number"},[s._v("45")]),n("br"),n("span",{staticClass:"line-number"},[s._v("46")]),n("br"),n("span",{staticClass:"line-number"},[s._v("47")]),n("br"),n("span",{staticClass:"line-number"},[s._v("48")]),n("br"),n("span",{staticClass:"line-number"},[s._v("49")]),n("br"),n("span",{staticClass:"line-number"},[s._v("50")]),n("br"),n("span",{staticClass:"line-number"},[s._v("51")]),n("br"),n("span",{staticClass:"line-number"},[s._v("52")]),n("br"),n("span",{staticClass:"line-number"},[s._v("53")]),n("br"),n("span",{staticClass:"line-number"},[s._v("54")]),n("br"),n("span",{staticClass:"line-number"},[s._v("55")]),n("br"),n("span",{staticClass:"line-number"},[s._v("56")]),n("br"),n("span",{staticClass:"line-number"},[s._v("57")]),n("br"),n("span",{staticClass:"line-number"},[s._v("58")]),n("br"),n("span",{staticClass:"line-number"},[s._v("59")]),n("br"),n("span",{staticClass:"line-number"},[s._v("60")]),n("br"),n("span",{staticClass:"line-number"},[s._v("61")]),n("br"),n("span",{staticClass:"line-number"},[s._v("62")]),n("br"),n("span",{staticClass:"line-number"},[s._v("63")]),n("br"),n("span",{staticClass:"line-number"},[s._v("64")]),n("br"),n("span",{staticClass:"line-number"},[s._v("65")]),n("br"),n("span",{staticClass:"line-number"},[s._v("66")]),n("br"),n("span",{staticClass:"line-number"},[s._v("67")]),n("br"),n("span",{staticClass:"line-number"},[s._v("68")]),n("br"),n("span",{staticClass:"line-number"},[s._v("69")]),n("br"),n("span",{staticClass:"line-number"},[s._v("70")]),n("br"),n("span",{staticClass:"line-number"},[s._v("71")]),n("br"),n("span",{staticClass:"line-number"},[s._v("72")]),n("br"),n("span",{staticClass:"line-number"},[s._v("73")]),n("br"),n("span",{staticClass:"line-number"},[s._v("74")]),n("br"),n("span",{staticClass:"line-number"},[s._v("75")]),n("br"),n("span",{staticClass:"line-number"},[s._v("76")]),n("br"),n("span",{staticClass:"line-number"},[s._v("77")]),n("br"),n("span",{staticClass:"line-number"},[s._v("78")]),n("br"),n("span",{staticClass:"line-number"},[s._v("79")]),n("br"),n("span",{staticClass:"line-number"},[s._v("80")]),n("br"),n("span",{staticClass:"line-number"},[s._v("81")]),n("br"),n("span",{staticClass:"line-number"},[s._v("82")]),n("br"),n("span",{staticClass:"line-number"},[s._v("83")]),n("br"),n("span",{staticClass:"line-number"},[s._v("84")]),n("br"),n("span",{staticClass:"line-number"},[s._v("85")]),n("br"),n("span",{staticClass:"line-number"},[s._v("86")]),n("br"),n("span",{staticClass:"line-number"},[s._v("87")]),n("br"),n("span",{staticClass:"line-number"},[s._v("88")]),n("br"),n("span",{staticClass:"line-number"},[s._v("89")]),n("br"),n("span",{staticClass:"line-number"},[s._v("90")]),n("br"),n("span",{staticClass:"line-number"},[s._v("91")]),n("br"),n("span",{staticClass:"line-number"},[s._v("92")]),n("br"),n("span",{staticClass:"line-number"},[s._v("93")]),n("br"),n("span",{staticClass:"line-number"},[s._v("94")]),n("br"),n("span",{staticClass:"line-number"},[s._v("95")]),n("br"),n("span",{staticClass:"line-number"},[s._v("96")]),n("br"),n("span",{staticClass:"line-number"},[s._v("97")]),n("br"),n("span",{staticClass:"line-number"},[s._v("98")]),n("br"),n("span",{staticClass:"line-number"},[s._v("99")]),n("br"),n("span",{staticClass:"line-number"},[s._v("100")]),n("br"),n("span",{staticClass:"line-number"},[s._v("101")]),n("br"),n("span",{staticClass:"line-number"},[s._v("102")]),n("br"),n("span",{staticClass:"line-number"},[s._v("103")]),n("br"),n("span",{staticClass:"line-number"},[s._v("104")]),n("br"),n("span",{staticClass:"line-number"},[s._v("105")]),n("br")])])])}),[],!1,null,null,null);a.default=t.exports}}]);